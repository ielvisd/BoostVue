var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as bsv from 'bsv-2';
import * as uuid from 'uuid';
export const authorIdentityPrefix = '15PciHG22SNLQJXMoSUaWVi7WSqc7hCfva';
export class Actor {
    constructor({ relayone }) {
        this.relayone = relayone;
    }
    get identity() {
        return '';
    }
    publishOpReturn(opReturn) {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    publishMessage(newMessage, sign = false) {
        return __awaiter(this, void 0, void 0, function* () {
            newMessage.nonce = newMessage.nonce || uuid.v4();
            const payloadToSign = JSON.stringify(Object.assign(newMessage.content, {
                _app: newMessage.app,
                _type: newMessage.type,
                _nonce: newMessage.nonce
            }));
            console.log("PAYLOAD TO SIGN", payloadToSign);
            let signature = '';
            const send = {
                to: 'johngalt@relayx.io',
                amount: 0.001,
                currency: 'BSV',
                opReturn: [
                    'onchain.sv',
                    newMessage.app,
                    newMessage.type,
                    payloadToSign,
                    "|",
                    authorIdentityPrefix,
                    "BITCOIN_ECDSA",
                    this.identity,
                    signature,
                    '0x05' // signed index #5 "payloadToSign"
                ]
            };
            console.log("relayone.send", send);
            return this.relayone.send(send);
        });
    }
    socialMessage(newMessage) {
        const defaultContentType = 'text/markdown';
        const contentType = newMessage.contentType || 'text/markdown';
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            const payloadToSign = newMessage.content;
            let address = new bsv.Address().fromString(this.identity);
            var signature = '';
            return this.publishOpReturn([
                'B',
                newMessage.app,
                payloadToSign,
                "|",
                authorIdentityPrefix,
                "BITCOIN_ECDSA",
                this.identity,
                signature,
                '0x05' // signed index #5 "payloadToSign"
            ]);
            let verified = bsv.Bsm.verify(Buffer.from(payloadToSign, 'utf8'), signature, address);
            if (!verified) {
                throw new Error('SIGNATURE NOT VERIFIED');
            }
        }));
    }
}
