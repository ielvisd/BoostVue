var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Actor } from './actor';
const axios = require('axios');
export function post(params) {
    return __awaiter(this, void 0, void 0, function* () {
        // @ts-ignore
        return onchain(window.relayone).post(params);
    });
}
export function findOne(params) {
    return __awaiter(this, void 0, void 0, function* () {
        // @ts-ignore
        return onchain(window.relayone).findOne(params);
    });
}
export function findAll(params) {
    return __awaiter(this, void 0, void 0, function* () {
        // @ts-ignore
        return onchain(window.relayone).findAll(params);
    });
}
export function findOrCreate(params) {
    return __awaiter(this, void 0, void 0, function* () {
        // @ts-ignore
        return onchain(window.relayone).findOrCreate(params);
    });
}
const onchain = (relayone) => {
    function findOne(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const where = {};
            if (params.app) {
                where['app'] = params.app;
            }
            if (params.author) {
                where['author'] = params.author;
            }
            if (params.type) {
                where['type'] = params.type;
            }
            if (params.content) {
                Object.keys(params.content).forEach(key => {
                    where[key] = params.content[key];
                });
                //delete params.content
            }
            const query = new URLSearchParams(where).toString();
            const url = `https://onchain.sv/api/v1/search/events`;
            //const url = `http://localhost:5200/api/v1/search/events`
            console.log('SEARCH URL', url);
            const { data } = yield axios.post(url, params);
            const [event] = data.events;
            if (!event) {
                return;
            }
            return event;
        });
    }
    function findAll(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const where = {};
            if (params.app) {
                where['app'] = params.app;
            }
            if (params.author) {
                where['author'] = params.author;
            }
            if (params.type) {
                where['type'] = params.type;
            }
            if (params.content) {
                Object.keys(params.content).forEach(key => {
                    where[key] = params.content[key];
                });
                delete params.content;
            }
            const query = Object.keys(where).reduce((query, key) => {
                return `${query}&${key}=${where[key]}`;
            }, '?');
            //const url = `https://onchain.sv/api/v1/search/events`
            const url = `http://localhost:5200/api/v1/search/events`;
            const { data } = yield axios.post(url, params);
            return data.events;
        });
    }
    function post(params) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('POST', params);
            const actor = new Actor({
                relayone
            });
            console.log('actor', actor);
            const message = {
                app: params.app,
                type: params.type,
                content: params.content,
                //nonce: ''
            };
            console.log('actor.publishMessage', message);
            const result = yield actor.publishMessage(message);
            console.log('relayone.send.result', result);
            axios.get(`https://onchain.sv/api/v1/events/${result.txid}`)
                .then((result) => {
                console.log('published to onchain.sv', result);
            })
                .catch((error) => {
                console.error('failed to publish to onchain.sv', error);
            });
            return {
                result
            };
        });
    }
    function findOrCreate(params) {
        return __awaiter(this, void 0, void 0, function* () {
            var isNew = true;
            var result = yield findOne(params.where);
            if (result) {
                return [result, false];
            }
            if (!result) {
                yield post(Object.assign(params.where, params.defaults));
                result = yield findOne(params.where);
            }
            if (!result) {
                throw new Error('Failed To Find Or Create');
            }
            return [result, isNew];
        });
    }
    return {
        findOne,
        findOrCreate,
        post,
        findAll
    };
};
export default onchain;
