"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromTx = void 0;
const bsv_1 = __importStar(require("bsv"));
function fromTx(transaction, options = {}) {
    return new Promise(function (resolve, reject) {
        let gene = new bsv_1.Transaction(transaction);
        let t = gene.toObject();
        let result = [];
        let inputs = [];
        let outputs = [];
        let graph = {};
        if (gene.inputs) {
            gene.inputs.forEach(function (input, input_index) {
                if (input.script) {
                    let xput = { i: input_index, seq: input.sequenceNumber };
                    input.script.chunks.forEach(function (c, chunk_index) {
                        let chunk = c;
                        if (c.buf) {
                            if (c.buf.byteLength >= 1000000) {
                                xput["xlb" + chunk_index] = c.buf.toString("base64");
                            }
                            else if (c.buf.byteLength >= 512 && c.buf.byteLength < 1000000) {
                                xput["lb" + chunk_index] = c.buf.toString('base64');
                            }
                            else {
                                xput["b" + chunk_index] = c.buf.toString('base64');
                            }
                            if (options && options.h && options.h > 0) {
                                xput["h" + chunk_index] = c.buf.toString('hex');
                            }
                        }
                        else {
                            if (typeof c.opcodenum !== 'undefined') {
                                xput["b" + chunk_index] = {
                                    op: c.opcodenum
                                };
                            }
                            else {
                                xput["b" + chunk_index] = c;
                            }
                        }
                    });
                    let sender = {
                        h: input.prevTxId.toString('hex'),
                        i: input.outputIndex
                    };
                    let address = input.script.toAddress(bsv_1.default.Networks.livenet).toString();
                    if (address && address.length > 0) {
                        sender.a = address;
                    }
                    xput.e = sender;
                    inputs.push(xput);
                }
            });
        }
        if (gene.outputs) {
            gene.outputs.forEach(function (output, output_index) {
                if (output.script) {
                    let xput = { i: output_index };
                    output.script.chunks.forEach(function (c, chunk_index) {
                        let chunk = c;
                        if (c.buf) {
                            if (c.buf.byteLength >= 1000000) {
                                xput["xlb" + chunk_index] = c.buf.toString('base64');
                                xput["xls" + chunk_index] = c.buf.toString('utf8');
                            }
                            else if (c.buf.byteLength >= 512 && c.buf.byteLength < 1000000) {
                                xput["lb" + chunk_index] = c.buf.toString('base64');
                                xput["ls" + chunk_index] = c.buf.toString('utf8');
                            }
                            else {
                                xput["b" + chunk_index] = c.buf.toString('base64');
                                xput["s" + chunk_index] = c.buf.toString('utf8');
                            }
                            if (options && options.h && options.h > 0) {
                                xput["h" + chunk_index] = c.buf.toString('hex');
                            }
                        }
                        else {
                            if (typeof c.opcodenum !== 'undefined') {
                                xput["b" + chunk_index] = {
                                    op: c.opcodenum
                                };
                            }
                            else {
                                xput["b" + chunk_index] = c;
                            }
                        }
                    });
                    let receiver = {
                        v: output.satoshis,
                        i: output_index
                    };
                    let address = output.script.toAddress(bsv_1.default.Networks.livenet).toString();
                    if (address && address.length > 0) {
                        receiver.a = address;
                    }
                    xput.e = receiver;
                    outputs.push(xput);
                }
            });
        }
        let r = {
            tx: { h: t.hash },
            in: inputs,
            out: outputs,
            lock: t.nLockTime
        };
        // confirmations
        if (options && options.confirmations) {
            r.confirmations = options.confirmations;
        }
        resolve(r);
    });
}
exports.fromTx = fromTx;
