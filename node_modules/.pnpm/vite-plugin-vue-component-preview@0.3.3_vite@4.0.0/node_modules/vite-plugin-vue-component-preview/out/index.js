"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const vite_plugin_vue_markdown_1 = __importDefault(require("vite-plugin-vue-markdown"));
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
function removeHtmlComments(htmlCode) {
    const htmlCommentRege = /<!--[\s\S]*?-->/g;
    return htmlCode.replace(htmlCommentRege, '');
}
module.exports = function Preview() {
    const markdown = (0, vite_plugin_vue_markdown_1.default)();
    const previewBlockReg = /\<(preview)[\s\S]*?\>([\s\S]*?)\<\/\1\>/g;
    const virtualModuleId = 'virtual:vue-component-preview';
    const resolvedVirtualModuleId = '\0' + virtualModuleId;
    const fileHashs = {};
    let server;
    let proxyingHotUpdateFile;
    return {
        name: 'vite-plugin-vue-component-preview',
        configureServer(_server) {
            server = _server;
            server.middlewares.use((req, res, next) => {
                var _a;
                if ((_a = req.url) === null || _a === void 0 ? void 0 : _a.startsWith('/__preview/')) {
                    req.url = '/'; // avoid 404
                }
                next();
            });
            server.ws.on('vue-component-preview:hash', (data) => {
                var _a;
                data.file = path.join(server.config.root, data.file);
                if (((_a = fileHashs[data.file]) !== null && _a !== void 0 ? _a : '') !== data.text) {
                    fileHashs[data.file] = data.text;
                    server.watcher.emit('change', data.file);
                }
            });
        },
        resolveId(id) {
            if (id === virtualModuleId) {
                return resolvedVirtualModuleId;
            }
            const cleanId = id.replace(/\?.*$/, '');
            if (cleanId.endsWith('__preview.vue') &&
                !cleanId.startsWith(server.config.root)) {
                return path.join(server.config.root, id);
            }
        },
        load(id) {
            if (id === resolvedVirtualModuleId) {
                return `
import { defineAsyncComponent, h, Suspense, ref, computed } from 'vue';

export default function (app) {
	const location = globalThis.location;
	if (location && location.pathname.startsWith('/__preview/')) {
		app._component.setup = () => {
			const pathname = ref(location.pathname);
			const importPath = computed(() => pathname.value.substring('/__preview'.length));
			const Component = computed(() => {
				const _fileName = importPath.value;
				return defineAsyncComponent(() => import(/* @vite-ignore */_fileName));
			});
			const Layout = computed(() => {
				const _fileName = importPath.value;
				return defineAsyncComponent(() => import(/* @vite-ignore */_fileName + '__preview.vue'));
			});
			if (import.meta.hot) {
				try {
					import.meta.hot.send('vue-component-preview:hash', {
						file: importPath.value,
						text: location.hash ? atob(location.hash.substring(1)) : '',
					});
				} catch { }
				window.addEventListener('hashchange', () => {
					try {
						import.meta.hot.send('vue-component-preview:hash', {
							file: importPath.value,
							text: location.hash ? atob(location.hash.substring(1)) : '',
						});
					} catch { }
				});
			}
			return () => h(Suspense, undefined, [
				h(Layout.value, undefined, {
					default: (props) => h(Component.value, props)
				})
			]);
		};
	}
}`;
            }
            if (id.endsWith('__preview.vue')) {
                const fileName = id.substring(0, id.length - '__preview.vue'.length);
                const code = fileHashs[fileName] || fs.readFileSync(fileName, 'utf-8');
                return parsePreviewCode(code);
            }
        },
        transform(code, id) {
            if (fileHashs[id]) {
                code = fileHashs[id];
            }
            if (id.endsWith('.vue')) {
                // remove preview block
                code = code.replace(previewBlockReg, '');
            }
            return code;
        },
        handleHotUpdate(ctx) {
            var _a;
            if (proxyingHotUpdateFile === undefined && ctx.file.endsWith('.vue')) {
                setTimeout(() => {
                    proxyingHotUpdateFile = ctx.file;
                    ctx.server.watcher.emit('change', ctx.file);
                }, 100);
            }
            else if (proxyingHotUpdateFile === ctx.file) {
                proxyingHotUpdateFile = undefined;
                const originalFile = ctx.file;
                ctx.file = ctx.file + '__preview.vue';
                ctx.modules = [...(_a = ctx.server.moduleGraph.getModulesByFile(ctx.file)) !== null && _a !== void 0 ? _a : []];
                const read = ctx.read;
                ctx.read = () => __awaiter(this, void 0, void 0, function* () { return parsePreviewCode(fileHashs[originalFile] || (yield read())); });
            }
        },
    };
    function parsePreviewCode(code) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            // extract preview block content
            code = removeHtmlComments(code);
            const previewBlock = code.match(previewBlockReg);
            if (previewBlock) {
                const startTagEnd = previewBlock[0].indexOf('>') + 1;
                const endTagStart = previewBlock[0].lastIndexOf('</');
                code = previewBlock[0].substring(startTagEnd, endTagStart);
                const parsed = yield ((_a = markdown.transform) === null || _a === void 0 ? void 0 : _a.call({}, code, '/foo.md'));
                if (typeof parsed === 'object' && (parsed === null || parsed === void 0 ? void 0 : parsed.code)) {
                    code = parsed.code;
                }
                else if (typeof parsed === 'string') {
                    code = parsed;
                }
                else {
                    code = '<template><slot /></template>';
                }
            }
            else {
                code = '<template><slot /></template>';
            }
            return code;
        });
    }
};
