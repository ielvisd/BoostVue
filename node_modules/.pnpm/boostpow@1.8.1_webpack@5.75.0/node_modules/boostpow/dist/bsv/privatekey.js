"use strict";var _=require("./util/_"),Address=require("./address"),Base58Check=require("./encoding/base58check"),BN=require("./crypto/bn"),JSUtil=require("./util/javas"),Networks=require("./networks"),Point=require("./crypto/point"),PublicKey=require("./publickey"),Random=require("./crypto/random"),$=require("./util/preconditions");function PrivateKey(e,r){if(!(this instanceof PrivateKey))return new PrivateKey(e,r);if(e instanceof PrivateKey)return e;var t=this._classifyArguments(e,r);if(!t.bn||0===t.bn.cmp(new BN(0)))throw new TypeError("Number can not be equal to zero, undefined, null or false");if(!t.bn.lt(Point.getN()))throw new TypeError("Number must be less than N");if(void 0===t.network)throw new TypeError('Must specify the network ("livenet" or "testnet")');return JSUtil.defineImmutable(this,{bn:t.bn,compressed:t.compressed,network:t.network}),Object.defineProperty(this,"publicKey",{configurable:!1,enumerable:!0,get:this.toPublicKey.bind(this)}),this}PrivateKey.prototype._classifyArguments=function(e,r){var t={compressed:!0,network:r?Networks.get(r):Networks.defaultNetwork};if(_.isUndefined(e)||_.isNull(e))t.bn=PrivateKey._getRandomBN();else if(e instanceof BN)t.bn=e;else if(e instanceof Buffer||e instanceof Uint8Array)t=PrivateKey._transformBuffer(e,r);else if(e.bn&&e.network)t=PrivateKey._transformObject(e);else if(!r&&Networks.get(e))t.bn=PrivateKey._getRandomBN(),t.network=Networks.get(e);else{if("string"!=typeof e)throw new TypeError("First argument is an unrecognized data type.");JSUtil.isHexa(e)?t.bn=new BN(Buffer.from(e,"hex")):t=PrivateKey._transformWIF(e,r)}return t},PrivateKey._getRandomBN=function(){var e,r;do{var t=Random.getRandomBuffer(32);e=(r=BN.fromBuffer(t)).lt(Point.getN())}while(!e);return r},PrivateKey._transformBuffer=function(e,r){var t={};if(32===e.length)return PrivateKey._transformBNBuffer(e,r);if(t.network=Networks.get(e[0],"privatekey"),!t.network)throw new Error("Invalid network");if(r&&t.network!==Networks.get(r))throw new TypeError("Private key network mismatch");if(34===e.length&&1===e[33])t.compressed=!0;else{if(33!==e.length)throw new Error("Length of buffer must be 33 (uncompressed) or 34 (compressed)");t.compressed=!1}return t.bn=BN.fromBuffer(e.slice(1,33)),t},PrivateKey._transformBNBuffer=function(e,r){var t={};return t.network=Networks.get(r)||Networks.defaultNetwork,t.bn=BN.fromBuffer(e),t.compressed=!1,t},PrivateKey._transformWIF=function(e,r){return PrivateKey._transformBuffer(Base58Check.decode(e),r)},PrivateKey.fromBuffer=function(e,r){return new PrivateKey(e,r)},PrivateKey.fromHex=function(e,r){return PrivateKey.fromBuffer(Buffer.from(e,"hex"),r)},PrivateKey._transformObject=function(e){return{bn:new BN(e.bn,"hex"),network:Networks.get(e.network),compressed:e.compressed}},PrivateKey.fromString=PrivateKey.fromWIF=function(e){return $.checkArgument(_.isString(e),"First argument is expected to be a string."),new PrivateKey(e)},PrivateKey.fromObject=PrivateKey.fromJSON=function(e){return $.checkArgument(_.isObject(e),"First argument is expected to be an object."),new PrivateKey(e)},PrivateKey.fromRandom=function(e){var r=PrivateKey._getRandomBN();return new PrivateKey(r,e)},PrivateKey.getValidationError=function(e,r){var t;try{new PrivateKey(e,r)}catch(e){t=e}return t},PrivateKey.isValid=function(e,r){return!!e&&!PrivateKey.getValidationError(e,r)},PrivateKey.prototype.toString=function(){return this.toWIF()},PrivateKey.prototype.toWIF=function(){var e,r=this.network;return e=this.compressed?Buffer.concat([Buffer.from([r.privatekey]),this.bn.toBuffer({size:32}),Buffer.from([1])]):Buffer.concat([Buffer.from([r.privatekey]),this.bn.toBuffer({size:32})]),Base58Check.encode(e)},PrivateKey.prototype.toBigNumber=function(){return this.bn},PrivateKey.prototype.toBuffer=function(){return this.bn.toBuffer({size:32})},PrivateKey.prototype.toHex=function(){return this.toBuffer().toString("hex")},PrivateKey.prototype.toPublicKey=function(){return this._pubkey||(this._pubkey=PublicKey.fromPrivateKey(this)),this._pubkey},PrivateKey.prototype.toAddress=function(e){var r=this.toPublicKey();return Address.fromPublicKey(r,e||this.network)},PrivateKey.prototype.toObject=PrivateKey.prototype.toJSON=function(){return{bn:this.bn.toString("hex"),compressed:this.compressed,network:this.network.toString()}},PrivateKey.prototype.inspect=function(){var e=this.compressed?"":", uncompressed";return"<PrivateKey: "+this.toHex()+", network: "+this.network+e+">"},module.exports=PrivateKey;