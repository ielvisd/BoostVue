"use strict";var _=require("./util/_"),$=require("./util/preconditions"),errors=require("./errors"),Base58Check=require("./encoding/base58check"),Networks=require("./networks"),Hash=require("./crypto/hash"),JSUtil=require("./util/javas"),PublicKey=require("./publickey");function Address(r,e,t){if(!(this instanceof Address))return new Address(r,e,t);if(_.isArray(r)&&_.isNumber(e))return Address.createMultisig(r,e,t);if(r instanceof Address)return r;if($.checkArgument(r,"First argument is required, please include address data.","guide/address.html"),e&&!Networks.get(e))throw new TypeError('Second argument must be "livenet", "testnet", or "regtest".');if(t&&t!==Address.PayToPublicKeyHash&&t!==Address.PayToScriptHash)throw new TypeError('Third argument must be "pubkeyhash" or "scripthash".');var s=this._classifyArguments(r,e,t);return s.network=s.network||Networks.get(e)||Networks.defaultNetwork,s.type=s.type||t||Address.PayToPublicKeyHash,JSUtil.defineImmutable(this,{hashBuffer:s.hashBuffer,network:s.network,type:s.type}),this}Address.prototype._classifyArguments=function(r,e,t){if((r instanceof Buffer||r instanceof Uint8Array)&&20===r.length)return Address._transformHash(r);if((r instanceof Buffer||r instanceof Uint8Array)&&21===r.length)return Address._transformBuffer(r,e,t);if(r instanceof PublicKey)return Address._transformPublicKey(r);if(r instanceof Script)return Address._transformScript(r,e);if("string"==typeof r)return Address._transformString(r,e,t);if(_.isObject(r))return Address._transformObject(r);throw new TypeError("First argument is an unrecognized data format.")},Address.PayToPublicKeyHash="pubkeyhash",Address.PayToScriptHash="scripthash",Address._transformHash=function(r){var e={};if(!(r instanceof Buffer||r instanceof Uint8Array))throw new TypeError("Address supplied is not a buffer.");if(20!==r.length)throw new TypeError("Address hashbuffers must be exactly 20 bytes.");return e.hashBuffer=r,e},Address._transformObject=function(r){return $.checkArgument(r.hash||r.hashBuffer,"Must provide a `hash` or `hashBuffer` property"),$.checkArgument(r.type,"Must provide a `type` property"),{hashBuffer:r.hash?Buffer.from(r.hash,"hex"):r.hashBuffer,network:Networks.get(r.network)||Networks.defaultNetwork,type:r.type}},Address._classifyFromVersion=function(r){var e={},t=Networks.get(r[0],"pubkeyhash"),s=Networks.get(r[0],"scripthash");return t?(e.network=t,e.type=Address.PayToPublicKeyHash):s&&(e.network=s,e.type=Address.PayToScriptHash),e},Address._transformBuffer=function(r,e,t){var s={};if(!(r instanceof Buffer||r instanceof Uint8Array))throw new TypeError("Address supplied is not a buffer.");if(21!==r.length)throw new TypeError("Address buffers must be exactly 21 bytes.");var n=Networks.get(e),o=Address._classifyFromVersion(r);if(e&&!n)throw new TypeError("Unknown network");if(!o.network||n&&n!==o.network)throw new TypeError("Address has mismatched network type.");if(!o.type||t&&t!==o.type)throw new TypeError("Address has mismatched type.");return s.hashBuffer=r.slice(1),s.network=o.network,s.type=o.type,s},Address._transformPublicKey=function(r){var e={};if(!(r instanceof PublicKey))throw new TypeError("Address must be an instance of PublicKey.");return e.hashBuffer=Hash.sha256ripemd160(r.toBuffer()),e.type=Address.PayToPublicKeyHash,e},Address._transformScript=function(r,e){$.checkArgument(r instanceof Script,"script must be a Script instance");var t=r.getAddressInfo(e);if(!t)throw new errors.Script.CantDeriveAddress(r);return t},Address.createMultisig=function(r,e,t){return t=t||r[0].network||Networks.defaultNetwork,Address.payingTo(Script.buildMultisigOut(r,e),t)},Address._transformString=function(r,e,t){if("string"!=typeof r)throw new TypeError("data parameter supplied is not a string.");if(r.length<27)throw new Error("Invalid Address string provided");r=r.trim();var s=Networks.get(e);if(e&&!s)throw new TypeError("Unknown network");var n=Base58Check.decode(r);return Address._transformBuffer(n,e,t)},Address.fromPublicKey=function(r,e){var t=Address._transformPublicKey(r);return e=e||Networks.defaultNetwork,new Address(t.hashBuffer,e,t.type)},Address.fromPrivateKey=function(r,e){let t=PublicKey.fromPrivateKey(r);return e=e||r.network||Networks.defaultNetwork,Address.fromPublicKey(t,e)},Address.fromPublicKeyHash=function(r,e){var t=Address._transformHash(r);return new Address(t.hashBuffer,e,Address.PayToPublicKeyHash)},Address.fromScriptHash=function(r,e){$.checkArgument(r,"hash parameter is required");var t=Address._transformHash(r);return new Address(t.hashBuffer,e,Address.PayToScriptHash)},Address.payingTo=function(r,e){return $.checkArgument(r,"script is required"),$.checkArgument(r instanceof Script,"script must be instance of Script"),Address.fromScriptHash(Hash.sha256ripemd160(r.toBuffer()),e)},Address.fromScript=function(r,e){$.checkArgument(r instanceof Script,"script must be a Script instance");var t=Address._transformScript(r,e);return new Address(t.hashBuffer,e,t.type)},Address.fromBuffer=function(r,e,t){var s=Address._transformBuffer(r,e,t);return new Address(s.hashBuffer,s.network,s.type)},Address.fromHex=function(r,e,t){return Address.fromBuffer(Buffer.from(r,"hex"),e,t)},Address.fromString=function(r,e,t){var s=Address._transformString(r,e,t);return new Address(s.hashBuffer,s.network,s.type)},Address.fromObject=function(r){return $.checkState(JSUtil.isHexa(r.hash),'Unexpected hash property, "'+r.hash+'", expected to be hex.'),new Address(Buffer.from(r.hash,"hex"),r.network,r.type)},Address.getValidationError=function(r,e,t){var s;try{new Address(r,e,t)}catch(r){s=r}return s},Address.isValid=function(r,e,t){return!Address.getValidationError(r,e,t)},Address.prototype.isPayToPublicKeyHash=function(){return this.type===Address.PayToPublicKeyHash},Address.prototype.isPayToScriptHash=function(){return this.type===Address.PayToScriptHash},Address.prototype.toBuffer=function(){var r=Buffer.from([this.network[this.type]]);return Buffer.concat([r,this.hashBuffer])},Address.prototype.toHex=function(){return this.toBuffer().toString("hex")},Address.prototype.toObject=Address.prototype.toJSON=function(){return{hash:this.hashBuffer.toString("hex"),type:this.type,network:this.network.toString()}},Address.prototype.inspect=function(){return"<Address: "+this.toString()+", type: "+this.type+", network: "+this.network+">"},Address.prototype.toString=function(){return Base58Check.encode(this.toBuffer())},module.exports=Address;var Script=require("./script");