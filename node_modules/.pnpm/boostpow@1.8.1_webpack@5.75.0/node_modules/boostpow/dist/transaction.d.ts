/// <reference types="node" />
import * as bsv from './bsv';
import { Digest32 } from './fields/digest32';
import { Int32Little } from './fields/int32Little';
import { UInt32Little } from './fields/uint32Little';
interface incomplete_input {
    prevTxId: Buffer | string | Digest32;
    outputIndex: number | UInt32Little;
    scriptSize: number;
    sequenceNumber?: number | UInt32Little;
}
export interface output {
    satoshis: number;
    script: Buffer | string | bsv.Script;
}
export interface incomplete_transaction {
    version: number | Int32Little;
    inputs: incomplete_input[];
    outputs: output[];
    locktime?: number | UInt32Little;
}
export declare function estimateTransactionSize(x: incomplete_transaction): number;
export interface input {
    prevTxId: Buffer | string | Digest32;
    outputIndex: number | UInt32Little;
    script: Buffer | string | bsv.Script;
    sequenceNumber?: number | UInt32Little;
}
export interface transaction {
    version: number | Int32Little;
    inputs: input[];
    outputs: output[];
    locktime?: number | UInt32Little;
}
export declare function serializedSize(x: transaction): number;
export declare function writeTransaction(tx: transaction): Buffer;
export declare function writeIncompleteTransaction(tx: incomplete_transaction): Buffer;
interface document {
    satoshis?: number;
    scriptCode: Buffer | string | bsv.Script;
    inputIndex: number;
    incompleteTransaction: Buffer | bsv.Transaction | incomplete_transaction;
}
export declare function sign(wif: string | bsv.PrivateKey, doc: document, sigtype?: number, flags?: number): Buffer;
export declare function verify(pubkey: Buffer | bsv.PublicKey, sig: Buffer, doc: document, flags?: number): boolean;
export {};
