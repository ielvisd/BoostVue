import {
  __commonJS,
  __export,
  __toESM,
  _global,
  import_buffer,
  import_process,
  init_shim,
  require_buffer
} from "./chunk-NUVZMWDA.js";

// node_modules/.pnpm/safe-buffer@5.2.1/node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS({
  "node_modules/.pnpm/safe-buffer@5.2.1/node_modules/safe-buffer/index.js"(exports, module) {
    init_shim();
    var buffer = require_buffer();
    var Buffer2 = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
      module.exports = buffer;
    } else {
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer2(arg, encodingOrOffset, length);
    }
    SafeBuffer.prototype = Object.create(Buffer2.prototype);
    copyProps(Buffer2, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer2(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer2(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer2(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer.SlowBuffer(size);
    };
  }
});

// node_modules/.pnpm/randombytes@2.1.0/node_modules/randombytes/browser.js
var require_browser = __commonJS({
  "node_modules/.pnpm/randombytes@2.1.0/node_modules/randombytes/browser.js"(exports, module) {
    "use strict";
    init_shim();
    var MAX_BYTES = 65536;
    var MAX_UINT32 = 4294967295;
    function oldBrowser() {
      throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
    }
    var Buffer2 = require_safe_buffer().Buffer;
    var crypto2 = _global.crypto || _global.msCrypto;
    if (crypto2 && crypto2.getRandomValues) {
      module.exports = randomBytes;
    } else {
      module.exports = oldBrowser;
    }
    function randomBytes(size, cb) {
      if (size > MAX_UINT32)
        throw new RangeError("requested too many random bytes");
      var bytes = Buffer2.allocUnsafe(size);
      if (size > 0) {
        if (size > MAX_BYTES) {
          for (var generated = 0; generated < size; generated += MAX_BYTES) {
            crypto2.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
          }
        } else {
          crypto2.getRandomValues(bytes);
        }
      }
      if (typeof cb === "function") {
        return import_process.default.nextTick(function() {
          cb(null, bytes);
        });
      }
      return bytes;
    }
  }
});

// node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js"(exports, module) {
    init_shim();
    if (typeof Object.create === "function") {
      module.exports = function inherits2(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module.exports = function inherits2(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// node_modules/.pnpm/events@3.3.0/node_modules/events/events.js
var require_events = __commonJS({
  "node_modules/.pnpm/events@3.3.0/node_modules/events/events.js"(exports, module) {
    "use strict";
    init_shim();
    var R = typeof Reflect === "object" ? Reflect : null;
    var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply2(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };
    var ReflectOwnKeys;
    if (R && typeof R.ownKeys === "function") {
      ReflectOwnKeys = R.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target);
      };
    }
    function ProcessEmitWarning(warning) {
      if (console && console.warn)
        console.warn(warning);
    }
    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
      return value !== value;
    };
    function EventEmitter() {
      EventEmitter.init.call(this);
    }
    module.exports = EventEmitter;
    module.exports.once = once;
    EventEmitter.EventEmitter = EventEmitter;
    EventEmitter.prototype._events = void 0;
    EventEmitter.prototype._eventsCount = 0;
    EventEmitter.prototype._maxListeners = void 0;
    var defaultMaxListeners = 10;
    function checkListener(listener) {
      if (typeof listener !== "function") {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }
    Object.defineProperty(EventEmitter, "defaultMaxListeners", {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        }
        defaultMaxListeners = arg;
      }
    });
    EventEmitter.init = function() {
      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      }
      this._maxListeners = this._maxListeners || void 0;
    };
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
      }
      this._maxListeners = n;
      return this;
    };
    function _getMaxListeners(that) {
      if (that._maxListeners === void 0)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }
    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };
    EventEmitter.prototype.emit = function emit(type) {
      var args = [];
      for (var i = 1; i < arguments.length; i++)
        args.push(arguments[i]);
      var doError = type === "error";
      var events = this._events;
      if (events !== void 0)
        doError = doError && events.error === void 0;
      else if (!doError)
        return false;
      if (doError) {
        var er;
        if (args.length > 0)
          er = args[0];
        if (er instanceof Error) {
          throw er;
        }
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err;
      }
      var handler = events[type];
      if (handler === void 0)
        return false;
      if (typeof handler === "function") {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          ReflectApply(listeners[i], this, args);
      }
      return true;
    };
    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;
      checkListener(listener);
      events = target._events;
      if (events === void 0) {
        events = target._events = /* @__PURE__ */ Object.create(null);
        target._eventsCount = 0;
      } else {
        if (events.newListener !== void 0) {
          target.emit(
            "newListener",
            type,
            listener.listener ? listener.listener : listener
          );
          events = target._events;
        }
        existing = events[type];
      }
      if (existing === void 0) {
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === "function") {
          existing = events[type] = prepend ? [listener, existing] : [existing, listener];
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
          existing.warned = true;
          var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
          w.name = "MaxListenersExceededWarning";
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          ProcessEmitWarning(w);
        }
      }
      return target;
    }
    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };
    EventEmitter.prototype.on = EventEmitter.prototype.addListener;
    EventEmitter.prototype.prependListener = function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };
    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0)
          return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }
    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: void 0, target, type, listener };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }
    EventEmitter.prototype.once = function once2(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.removeListener = function removeListener(type, listener) {
      var list, events, position, i, originalListener;
      checkListener(listener);
      events = this._events;
      if (events === void 0)
        return this;
      list = events[type];
      if (list === void 0)
        return this;
      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = /* @__PURE__ */ Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit("removeListener", type, list.listener || listener);
        }
      } else if (typeof list !== "function") {
        position = -1;
        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }
        if (position < 0)
          return this;
        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }
        if (list.length === 1)
          events[type] = list[0];
        if (events.removeListener !== void 0)
          this.emit("removeListener", type, originalListener || listener);
      }
      return this;
    };
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
      var listeners, events, i;
      events = this._events;
      if (events === void 0)
        return this;
      if (events.removeListener === void 0) {
        if (arguments.length === 0) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== void 0) {
          if (--this._eventsCount === 0)
            this._events = /* @__PURE__ */ Object.create(null);
          else
            delete events[type];
        }
        return this;
      }
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === "removeListener")
            continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
        return this;
      }
      listeners = events[type];
      if (typeof listeners === "function") {
        this.removeListener(type, listeners);
      } else if (listeners !== void 0) {
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }
      return this;
    };
    function _listeners(target, type, unwrap) {
      var events = target._events;
      if (events === void 0)
        return [];
      var evlistener = events[type];
      if (evlistener === void 0)
        return [];
      if (typeof evlistener === "function")
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];
      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }
    EventEmitter.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };
    EventEmitter.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };
    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === "function") {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };
    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;
      if (events !== void 0) {
        var evlistener = events[type];
        if (typeof evlistener === "function") {
          return 1;
        } else if (evlistener !== void 0) {
          return evlistener.length;
        }
      }
      return 0;
    }
    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };
    function arrayClone(arr, n) {
      var copy = new Array(n);
      for (var i = 0; i < n; ++i)
        copy[i] = arr[i];
      return copy;
    }
    function spliceOne(list, index) {
      for (; index + 1 < list.length; index++)
        list[index] = list[index + 1];
      list.pop();
    }
    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }
    function once(emitter, name) {
      return new Promise(function(resolve, reject) {
        function errorListener(err) {
          emitter.removeListener(name, resolver);
          reject(err);
        }
        function resolver() {
          if (typeof emitter.removeListener === "function") {
            emitter.removeListener("error", errorListener);
          }
          resolve([].slice.call(arguments));
        }
        ;
        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
        if (name !== "error") {
          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
        }
      });
    }
    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
      if (typeof emitter.on === "function") {
        eventTargetAgnosticAddListener(emitter, "error", handler, flags);
      }
    }
    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
      if (typeof emitter.on === "function") {
        if (flags.once) {
          emitter.once(name, listener);
        } else {
          emitter.on(name, listener);
        }
      } else if (typeof emitter.addEventListener === "function") {
        emitter.addEventListener(name, function wrapListener(arg) {
          if (flags.once) {
            emitter.removeEventListener(name, wrapListener);
          }
          listener(arg);
        });
      } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
      }
    }
  }
});

// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/stream-browser.js
var require_stream_browser = __commonJS({
  "node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/stream-browser.js"(exports, module) {
    init_shim();
    module.exports = require_events().EventEmitter;
  }
});

// node_modules/.pnpm/has-symbols@1.0.3/node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  "node_modules/.pnpm/has-symbols@1.0.3/node_modules/has-symbols/shams.js"(exports, module) {
    "use strict";
    init_shim();
    module.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (sym in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/.pnpm/has-tostringtag@1.0.0/node_modules/has-tostringtag/shams.js
var require_shams2 = __commonJS({
  "node_modules/.pnpm/has-tostringtag@1.0.0/node_modules/has-tostringtag/shams.js"(exports, module) {
    "use strict";
    init_shim();
    var hasSymbols = require_shams();
    module.exports = function hasToStringTagShams() {
      return hasSymbols() && !!Symbol.toStringTag;
    };
  }
});

// node_modules/.pnpm/has-symbols@1.0.3/node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  "node_modules/.pnpm/has-symbols@1.0.3/node_modules/has-symbols/index.js"(exports, module) {
    "use strict";
    init_shim();
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// node_modules/.pnpm/function-bind@1.1.1/node_modules/function-bind/implementation.js
var require_implementation = __commonJS({
  "node_modules/.pnpm/function-bind@1.1.1/node_modules/function-bind/implementation.js"(exports, module) {
    "use strict";
    init_shim();
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var slice = Array.prototype.slice;
    var toStr = Object.prototype.toString;
    var funcType = "[object Function]";
    module.exports = function bind2(that) {
      var target = this;
      if (typeof target !== "function" || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slice.call(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result = target.apply(
            this,
            args.concat(slice.call(arguments))
          );
          if (Object(result) === result) {
            return result;
          }
          return this;
        } else {
          return target.apply(
            that,
            args.concat(slice.call(arguments))
          );
        }
      };
      var boundLength = Math.max(0, target.length - args.length);
      var boundArgs = [];
      for (var i = 0; i < boundLength; i++) {
        boundArgs.push("$" + i);
      }
      bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  }
});

// node_modules/.pnpm/function-bind@1.1.1/node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  "node_modules/.pnpm/function-bind@1.1.1/node_modules/function-bind/index.js"(exports, module) {
    "use strict";
    init_shim();
    var implementation = require_implementation();
    module.exports = Function.prototype.bind || implementation;
  }
});

// node_modules/.pnpm/has@1.0.3/node_modules/has/src/index.js
var require_src = __commonJS({
  "node_modules/.pnpm/has@1.0.3/node_modules/has/src/index.js"(exports, module) {
    "use strict";
    init_shim();
    var bind2 = require_function_bind();
    module.exports = bind2.call(Function.call, Object.prototype.hasOwnProperty);
  }
});

// node_modules/.pnpm/get-intrinsic@1.1.3/node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  "node_modules/.pnpm/get-intrinsic@1.1.3/node_modules/get-intrinsic/index.js"(exports, module) {
    "use strict";
    init_shim();
    var undefined2;
    var $SyntaxError = SyntaxError;
    var $Function = Function;
    var $TypeError = TypeError;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e) {
      }
    };
    var $gOPD = Object.getOwnPropertyDescriptor;
    if ($gOPD) {
      try {
        $gOPD({}, "");
      } catch (e) {
        $gOPD = null;
      }
    }
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var getProto = Object.getPrototypeOf || function(x) {
      return x.__proto__;
    };
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": Error,
      "%eval%": eval,
      "%EvalError%": EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": Object,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": RangeError,
      "%ReferenceError%": ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
    };
    var doEval = function doEval2(name) {
      var value;
      if (name === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value = fn.prototype;
        }
      } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen) {
          value = getProto(gen.prototype);
        }
      }
      INTRINSICS[name] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind2 = require_function_bind();
    var hasOwn = require_src();
    var $concat = bind2.call(Function.call, Array.prototype.concat);
    var $spliceApply = bind2.call(Function.apply, Array.prototype.splice);
    var $replace = bind2.call(Function.call, String.prototype.replace);
    var $strSlice = bind2.call(Function.call, String.prototype.slice);
    var $exec = bind2.call(Function.call, RegExp.prototype.exec);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    };
    module.exports = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== "string" || name.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name) === null) {
        throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
      }
      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i = 1, isOwn = true; i < parts.length; i += 1) {
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  }
});

// node_modules/.pnpm/call-bind@1.0.2/node_modules/call-bind/index.js
var require_call_bind = __commonJS({
  "node_modules/.pnpm/call-bind@1.0.2/node_modules/call-bind/index.js"(exports, module) {
    "use strict";
    init_shim();
    var bind2 = require_function_bind();
    var GetIntrinsic = require_get_intrinsic();
    var $apply = GetIntrinsic("%Function.prototype.apply%");
    var $call = GetIntrinsic("%Function.prototype.call%");
    var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind2.call($call, $apply);
    var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
    var $max = GetIntrinsic("%Math.max%");
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = null;
      }
    }
    module.exports = function callBind(originalFunction) {
      var func = $reflectApply(bind2, $call, arguments);
      if ($gOPD && $defineProperty) {
        var desc = $gOPD(func, "length");
        if (desc.configurable) {
          $defineProperty(
            func,
            "length",
            { value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
          );
        }
      }
      return func;
    };
    var applyBind = function applyBind2() {
      return $reflectApply(bind2, $apply, arguments);
    };
    if ($defineProperty) {
      $defineProperty(module.exports, "apply", { value: applyBind });
    } else {
      module.exports.apply = applyBind;
    }
  }
});

// node_modules/.pnpm/call-bind@1.0.2/node_modules/call-bind/callBound.js
var require_callBound = __commonJS({
  "node_modules/.pnpm/call-bind@1.0.2/node_modules/call-bind/callBound.js"(exports, module) {
    "use strict";
    init_shim();
    var GetIntrinsic = require_get_intrinsic();
    var callBind = require_call_bind();
    var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
    module.exports = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = GetIntrinsic(name, !!allowMissing);
      if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
        return callBind(intrinsic);
      }
      return intrinsic;
    };
  }
});

// node_modules/.pnpm/is-arguments@1.1.1/node_modules/is-arguments/index.js
var require_is_arguments = __commonJS({
  "node_modules/.pnpm/is-arguments@1.1.1/node_modules/is-arguments/index.js"(exports, module) {
    "use strict";
    init_shim();
    var hasToStringTag = require_shams2()();
    var callBound = require_callBound();
    var $toString = callBound("Object.prototype.toString");
    var isStandardArguments = function isArguments(value) {
      if (hasToStringTag && value && typeof value === "object" && Symbol.toStringTag in value) {
        return false;
      }
      return $toString(value) === "[object Arguments]";
    };
    var isLegacyArguments = function isArguments(value) {
      if (isStandardArguments(value)) {
        return true;
      }
      return value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && $toString(value) !== "[object Array]" && $toString(value.callee) === "[object Function]";
    };
    var supportsStandardArguments = function() {
      return isStandardArguments(arguments);
    }();
    isStandardArguments.isLegacyArguments = isLegacyArguments;
    module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
  }
});

// node_modules/.pnpm/is-generator-function@1.0.10/node_modules/is-generator-function/index.js
var require_is_generator_function = __commonJS({
  "node_modules/.pnpm/is-generator-function@1.0.10/node_modules/is-generator-function/index.js"(exports, module) {
    "use strict";
    init_shim();
    var toStr = Object.prototype.toString;
    var fnToStr = Function.prototype.toString;
    var isFnRegex = /^\s*(?:function)?\*/;
    var hasToStringTag = require_shams2()();
    var getProto = Object.getPrototypeOf;
    var getGeneratorFunc = function() {
      if (!hasToStringTag) {
        return false;
      }
      try {
        return Function("return function*() {}")();
      } catch (e) {
      }
    };
    var GeneratorFunction;
    module.exports = function isGeneratorFunction(fn) {
      if (typeof fn !== "function") {
        return false;
      }
      if (isFnRegex.test(fnToStr.call(fn))) {
        return true;
      }
      if (!hasToStringTag) {
        var str = toStr.call(fn);
        return str === "[object GeneratorFunction]";
      }
      if (!getProto) {
        return false;
      }
      if (typeof GeneratorFunction === "undefined") {
        var generatorFunc = getGeneratorFunc();
        GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
      }
      return getProto(fn) === GeneratorFunction;
    };
  }
});

// node_modules/.pnpm/is-callable@1.2.7/node_modules/is-callable/index.js
var require_is_callable = __commonJS({
  "node_modules/.pnpm/is-callable@1.2.7/node_modules/is-callable/index.js"(exports, module) {
    "use strict";
    init_shim();
    var fnToStr = Function.prototype.toString;
    var reflectApply = typeof Reflect === "object" && Reflect !== null && Reflect.apply;
    var badArrayLike;
    var isCallableMarker;
    if (typeof reflectApply === "function" && typeof Object.defineProperty === "function") {
      try {
        badArrayLike = Object.defineProperty({}, "length", {
          get: function() {
            throw isCallableMarker;
          }
        });
        isCallableMarker = {};
        reflectApply(function() {
          throw 42;
        }, null, badArrayLike);
      } catch (_) {
        if (_ !== isCallableMarker) {
          reflectApply = null;
        }
      }
    } else {
      reflectApply = null;
    }
    var constructorRegex = /^\s*class\b/;
    var isES6ClassFn = function isES6ClassFunction(value) {
      try {
        var fnStr = fnToStr.call(value);
        return constructorRegex.test(fnStr);
      } catch (e) {
        return false;
      }
    };
    var tryFunctionObject = function tryFunctionToStr(value) {
      try {
        if (isES6ClassFn(value)) {
          return false;
        }
        fnToStr.call(value);
        return true;
      } catch (e) {
        return false;
      }
    };
    var toStr = Object.prototype.toString;
    var objectClass = "[object Object]";
    var fnClass = "[object Function]";
    var genClass = "[object GeneratorFunction]";
    var ddaClass = "[object HTMLAllCollection]";
    var ddaClass2 = "[object HTML document.all class]";
    var ddaClass3 = "[object HTMLCollection]";
    var hasToStringTag = typeof Symbol === "function" && !!Symbol.toStringTag;
    var isIE68 = !(0 in [,]);
    var isDDA = function isDocumentDotAll() {
      return false;
    };
    if (typeof document === "object") {
      all3 = document.all;
      if (toStr.call(all3) === toStr.call(document.all)) {
        isDDA = function isDocumentDotAll(value) {
          if ((isIE68 || !value) && (typeof value === "undefined" || typeof value === "object")) {
            try {
              var str = toStr.call(value);
              return (str === ddaClass || str === ddaClass2 || str === ddaClass3 || str === objectClass) && value("") == null;
            } catch (e) {
            }
          }
          return false;
        };
      }
    }
    var all3;
    module.exports = reflectApply ? function isCallable(value) {
      if (isDDA(value)) {
        return true;
      }
      if (!value) {
        return false;
      }
      if (typeof value !== "function" && typeof value !== "object") {
        return false;
      }
      try {
        reflectApply(value, null, badArrayLike);
      } catch (e) {
        if (e !== isCallableMarker) {
          return false;
        }
      }
      return !isES6ClassFn(value) && tryFunctionObject(value);
    } : function isCallable(value) {
      if (isDDA(value)) {
        return true;
      }
      if (!value) {
        return false;
      }
      if (typeof value !== "function" && typeof value !== "object") {
        return false;
      }
      if (hasToStringTag) {
        return tryFunctionObject(value);
      }
      if (isES6ClassFn(value)) {
        return false;
      }
      var strClass = toStr.call(value);
      if (strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass)) {
        return false;
      }
      return tryFunctionObject(value);
    };
  }
});

// node_modules/.pnpm/for-each@0.3.3/node_modules/for-each/index.js
var require_for_each = __commonJS({
  "node_modules/.pnpm/for-each@0.3.3/node_modules/for-each/index.js"(exports, module) {
    "use strict";
    init_shim();
    var isCallable = require_is_callable();
    var toStr = Object.prototype.toString;
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    var forEachArray = function forEachArray2(array, iterator, receiver) {
      for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty2.call(array, i)) {
          if (receiver == null) {
            iterator(array[i], i, array);
          } else {
            iterator.call(receiver, array[i], i, array);
          }
        }
      }
    };
    var forEachString = function forEachString2(string, iterator, receiver) {
      for (var i = 0, len = string.length; i < len; i++) {
        if (receiver == null) {
          iterator(string.charAt(i), i, string);
        } else {
          iterator.call(receiver, string.charAt(i), i, string);
        }
      }
    };
    var forEachObject = function forEachObject2(object, iterator, receiver) {
      for (var k in object) {
        if (hasOwnProperty2.call(object, k)) {
          if (receiver == null) {
            iterator(object[k], k, object);
          } else {
            iterator.call(receiver, object[k], k, object);
          }
        }
      }
    };
    var forEach2 = function forEach3(list, iterator, thisArg) {
      if (!isCallable(iterator)) {
        throw new TypeError("iterator must be a function");
      }
      var receiver;
      if (arguments.length >= 3) {
        receiver = thisArg;
      }
      if (toStr.call(list) === "[object Array]") {
        forEachArray(list, iterator, receiver);
      } else if (typeof list === "string") {
        forEachString(list, iterator, receiver);
      } else {
        forEachObject(list, iterator, receiver);
      }
    };
    module.exports = forEach2;
  }
});

// node_modules/.pnpm/available-typed-arrays@1.0.5/node_modules/available-typed-arrays/index.js
var require_available_typed_arrays = __commonJS({
  "node_modules/.pnpm/available-typed-arrays@1.0.5/node_modules/available-typed-arrays/index.js"(exports, module) {
    "use strict";
    init_shim();
    var possibleNames = [
      "BigInt64Array",
      "BigUint64Array",
      "Float32Array",
      "Float64Array",
      "Int16Array",
      "Int32Array",
      "Int8Array",
      "Uint16Array",
      "Uint32Array",
      "Uint8Array",
      "Uint8ClampedArray"
    ];
    var g = typeof globalThis === "undefined" ? _global : globalThis;
    module.exports = function availableTypedArrays() {
      var out = [];
      for (var i = 0; i < possibleNames.length; i++) {
        if (typeof g[possibleNames[i]] === "function") {
          out[out.length] = possibleNames[i];
        }
      }
      return out;
    };
  }
});

// node_modules/.pnpm/gopd@1.0.1/node_modules/gopd/index.js
var require_gopd = __commonJS({
  "node_modules/.pnpm/gopd@1.0.1/node_modules/gopd/index.js"(exports, module) {
    "use strict";
    init_shim();
    var GetIntrinsic = require_get_intrinsic();
    var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
    if ($gOPD) {
      try {
        $gOPD([], "length");
      } catch (e) {
        $gOPD = null;
      }
    }
    module.exports = $gOPD;
  }
});

// node_modules/.pnpm/is-typed-array@1.1.10/node_modules/is-typed-array/index.js
var require_is_typed_array = __commonJS({
  "node_modules/.pnpm/is-typed-array@1.1.10/node_modules/is-typed-array/index.js"(exports, module) {
    "use strict";
    init_shim();
    var forEach2 = require_for_each();
    var availableTypedArrays = require_available_typed_arrays();
    var callBound = require_callBound();
    var $toString = callBound("Object.prototype.toString");
    var hasToStringTag = require_shams2()();
    var gOPD = require_gopd();
    var g = typeof globalThis === "undefined" ? _global : globalThis;
    var typedArrays = availableTypedArrays();
    var $indexOf = callBound("Array.prototype.indexOf", true) || function indexOf(array, value) {
      for (var i = 0; i < array.length; i += 1) {
        if (array[i] === value) {
          return i;
        }
      }
      return -1;
    };
    var $slice = callBound("String.prototype.slice");
    var toStrTags = {};
    var getPrototypeOf2 = Object.getPrototypeOf;
    if (hasToStringTag && gOPD && getPrototypeOf2) {
      forEach2(typedArrays, function(typedArray) {
        var arr = new g[typedArray]();
        if (Symbol.toStringTag in arr) {
          var proto = getPrototypeOf2(arr);
          var descriptor = gOPD(proto, Symbol.toStringTag);
          if (!descriptor) {
            var superProto = getPrototypeOf2(proto);
            descriptor = gOPD(superProto, Symbol.toStringTag);
          }
          toStrTags[typedArray] = descriptor.get;
        }
      });
    }
    var tryTypedArrays = function tryAllTypedArrays(value) {
      var anyTrue = false;
      forEach2(toStrTags, function(getter, typedArray) {
        if (!anyTrue) {
          try {
            anyTrue = getter.call(value) === typedArray;
          } catch (e) {
          }
        }
      });
      return anyTrue;
    };
    module.exports = function isTypedArray2(value) {
      if (!value || typeof value !== "object") {
        return false;
      }
      if (!hasToStringTag || !(Symbol.toStringTag in value)) {
        var tag = $slice($toString(value), 8, -1);
        return $indexOf(typedArrays, tag) > -1;
      }
      if (!gOPD) {
        return false;
      }
      return tryTypedArrays(value);
    };
  }
});

// node_modules/.pnpm/which-typed-array@1.1.9/node_modules/which-typed-array/index.js
var require_which_typed_array = __commonJS({
  "node_modules/.pnpm/which-typed-array@1.1.9/node_modules/which-typed-array/index.js"(exports, module) {
    "use strict";
    init_shim();
    var forEach2 = require_for_each();
    var availableTypedArrays = require_available_typed_arrays();
    var callBound = require_callBound();
    var gOPD = require_gopd();
    var $toString = callBound("Object.prototype.toString");
    var hasToStringTag = require_shams2()();
    var g = typeof globalThis === "undefined" ? _global : globalThis;
    var typedArrays = availableTypedArrays();
    var $slice = callBound("String.prototype.slice");
    var toStrTags = {};
    var getPrototypeOf2 = Object.getPrototypeOf;
    if (hasToStringTag && gOPD && getPrototypeOf2) {
      forEach2(typedArrays, function(typedArray) {
        if (typeof g[typedArray] === "function") {
          var arr = new g[typedArray]();
          if (Symbol.toStringTag in arr) {
            var proto = getPrototypeOf2(arr);
            var descriptor = gOPD(proto, Symbol.toStringTag);
            if (!descriptor) {
              var superProto = getPrototypeOf2(proto);
              descriptor = gOPD(superProto, Symbol.toStringTag);
            }
            toStrTags[typedArray] = descriptor.get;
          }
        }
      });
    }
    var tryTypedArrays = function tryAllTypedArrays(value) {
      var foundName = false;
      forEach2(toStrTags, function(getter, typedArray) {
        if (!foundName) {
          try {
            var name = getter.call(value);
            if (name === typedArray) {
              foundName = name;
            }
          } catch (e) {
          }
        }
      });
      return foundName;
    };
    var isTypedArray2 = require_is_typed_array();
    module.exports = function whichTypedArray(value) {
      if (!isTypedArray2(value)) {
        return false;
      }
      if (!hasToStringTag || !(Symbol.toStringTag in value)) {
        return $slice($toString(value), 8, -1);
      }
      return tryTypedArrays(value);
    };
  }
});

// node_modules/.pnpm/util@0.12.5/node_modules/util/support/types.js
var require_types = __commonJS({
  "node_modules/.pnpm/util@0.12.5/node_modules/util/support/types.js"(exports) {
    "use strict";
    init_shim();
    var isArgumentsObject = require_is_arguments();
    var isGeneratorFunction = require_is_generator_function();
    var whichTypedArray = require_which_typed_array();
    var isTypedArray2 = require_is_typed_array();
    function uncurryThis(f2) {
      return f2.call.bind(f2);
    }
    var BigIntSupported = typeof BigInt !== "undefined";
    var SymbolSupported = typeof Symbol !== "undefined";
    var ObjectToString = uncurryThis(Object.prototype.toString);
    var numberValue = uncurryThis(Number.prototype.valueOf);
    var stringValue = uncurryThis(String.prototype.valueOf);
    var booleanValue = uncurryThis(Boolean.prototype.valueOf);
    if (BigIntSupported) {
      bigIntValue = uncurryThis(BigInt.prototype.valueOf);
    }
    var bigIntValue;
    if (SymbolSupported) {
      symbolValue = uncurryThis(Symbol.prototype.valueOf);
    }
    var symbolValue;
    function checkBoxedPrimitive(value, prototypeValueOf) {
      if (typeof value !== "object") {
        return false;
      }
      try {
        prototypeValueOf(value);
        return true;
      } catch (e) {
        return false;
      }
    }
    exports.isArgumentsObject = isArgumentsObject;
    exports.isGeneratorFunction = isGeneratorFunction;
    exports.isTypedArray = isTypedArray2;
    function isPromise(input) {
      return typeof Promise !== "undefined" && input instanceof Promise || input !== null && typeof input === "object" && typeof input.then === "function" && typeof input.catch === "function";
    }
    exports.isPromise = isPromise;
    function isArrayBufferView2(value) {
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        return ArrayBuffer.isView(value);
      }
      return isTypedArray2(value) || isDataView(value);
    }
    exports.isArrayBufferView = isArrayBufferView2;
    function isUint8Array(value) {
      return whichTypedArray(value) === "Uint8Array";
    }
    exports.isUint8Array = isUint8Array;
    function isUint8ClampedArray(value) {
      return whichTypedArray(value) === "Uint8ClampedArray";
    }
    exports.isUint8ClampedArray = isUint8ClampedArray;
    function isUint16Array(value) {
      return whichTypedArray(value) === "Uint16Array";
    }
    exports.isUint16Array = isUint16Array;
    function isUint32Array(value) {
      return whichTypedArray(value) === "Uint32Array";
    }
    exports.isUint32Array = isUint32Array;
    function isInt8Array(value) {
      return whichTypedArray(value) === "Int8Array";
    }
    exports.isInt8Array = isInt8Array;
    function isInt16Array(value) {
      return whichTypedArray(value) === "Int16Array";
    }
    exports.isInt16Array = isInt16Array;
    function isInt32Array(value) {
      return whichTypedArray(value) === "Int32Array";
    }
    exports.isInt32Array = isInt32Array;
    function isFloat32Array(value) {
      return whichTypedArray(value) === "Float32Array";
    }
    exports.isFloat32Array = isFloat32Array;
    function isFloat64Array(value) {
      return whichTypedArray(value) === "Float64Array";
    }
    exports.isFloat64Array = isFloat64Array;
    function isBigInt64Array(value) {
      return whichTypedArray(value) === "BigInt64Array";
    }
    exports.isBigInt64Array = isBigInt64Array;
    function isBigUint64Array(value) {
      return whichTypedArray(value) === "BigUint64Array";
    }
    exports.isBigUint64Array = isBigUint64Array;
    function isMapToString(value) {
      return ObjectToString(value) === "[object Map]";
    }
    isMapToString.working = typeof Map !== "undefined" && isMapToString(/* @__PURE__ */ new Map());
    function isMap(value) {
      if (typeof Map === "undefined") {
        return false;
      }
      return isMapToString.working ? isMapToString(value) : value instanceof Map;
    }
    exports.isMap = isMap;
    function isSetToString(value) {
      return ObjectToString(value) === "[object Set]";
    }
    isSetToString.working = typeof Set !== "undefined" && isSetToString(/* @__PURE__ */ new Set());
    function isSet(value) {
      if (typeof Set === "undefined") {
        return false;
      }
      return isSetToString.working ? isSetToString(value) : value instanceof Set;
    }
    exports.isSet = isSet;
    function isWeakMapToString(value) {
      return ObjectToString(value) === "[object WeakMap]";
    }
    isWeakMapToString.working = typeof WeakMap !== "undefined" && isWeakMapToString(/* @__PURE__ */ new WeakMap());
    function isWeakMap(value) {
      if (typeof WeakMap === "undefined") {
        return false;
      }
      return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
    }
    exports.isWeakMap = isWeakMap;
    function isWeakSetToString(value) {
      return ObjectToString(value) === "[object WeakSet]";
    }
    isWeakSetToString.working = typeof WeakSet !== "undefined" && isWeakSetToString(/* @__PURE__ */ new WeakSet());
    function isWeakSet(value) {
      return isWeakSetToString(value);
    }
    exports.isWeakSet = isWeakSet;
    function isArrayBufferToString(value) {
      return ObjectToString(value) === "[object ArrayBuffer]";
    }
    isArrayBufferToString.working = typeof ArrayBuffer !== "undefined" && isArrayBufferToString(new ArrayBuffer());
    function isArrayBuffer2(value) {
      if (typeof ArrayBuffer === "undefined") {
        return false;
      }
      return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
    }
    exports.isArrayBuffer = isArrayBuffer2;
    function isDataViewToString(value) {
      return ObjectToString(value) === "[object DataView]";
    }
    isDataViewToString.working = typeof ArrayBuffer !== "undefined" && typeof DataView !== "undefined" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
    function isDataView(value) {
      if (typeof DataView === "undefined") {
        return false;
      }
      return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
    }
    exports.isDataView = isDataView;
    var SharedArrayBufferCopy = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : void 0;
    function isSharedArrayBufferToString(value) {
      return ObjectToString(value) === "[object SharedArrayBuffer]";
    }
    function isSharedArrayBuffer(value) {
      if (typeof SharedArrayBufferCopy === "undefined") {
        return false;
      }
      if (typeof isSharedArrayBufferToString.working === "undefined") {
        isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
      }
      return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
    }
    exports.isSharedArrayBuffer = isSharedArrayBuffer;
    function isAsyncFunction(value) {
      return ObjectToString(value) === "[object AsyncFunction]";
    }
    exports.isAsyncFunction = isAsyncFunction;
    function isMapIterator(value) {
      return ObjectToString(value) === "[object Map Iterator]";
    }
    exports.isMapIterator = isMapIterator;
    function isSetIterator(value) {
      return ObjectToString(value) === "[object Set Iterator]";
    }
    exports.isSetIterator = isSetIterator;
    function isGeneratorObject(value) {
      return ObjectToString(value) === "[object Generator]";
    }
    exports.isGeneratorObject = isGeneratorObject;
    function isWebAssemblyCompiledModule(value) {
      return ObjectToString(value) === "[object WebAssembly.Module]";
    }
    exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
    function isNumberObject(value) {
      return checkBoxedPrimitive(value, numberValue);
    }
    exports.isNumberObject = isNumberObject;
    function isStringObject(value) {
      return checkBoxedPrimitive(value, stringValue);
    }
    exports.isStringObject = isStringObject;
    function isBooleanObject(value) {
      return checkBoxedPrimitive(value, booleanValue);
    }
    exports.isBooleanObject = isBooleanObject;
    function isBigIntObject(value) {
      return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
    }
    exports.isBigIntObject = isBigIntObject;
    function isSymbolObject(value) {
      return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
    }
    exports.isSymbolObject = isSymbolObject;
    function isBoxedPrimitive(value) {
      return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
    }
    exports.isBoxedPrimitive = isBoxedPrimitive;
    function isAnyArrayBuffer(value) {
      return typeof Uint8Array !== "undefined" && (isArrayBuffer2(value) || isSharedArrayBuffer(value));
    }
    exports.isAnyArrayBuffer = isAnyArrayBuffer;
    ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function(method) {
      Object.defineProperty(exports, method, {
        enumerable: false,
        value: function() {
          throw new Error(method + " is not supported in userland");
        }
      });
    });
  }
});

// node_modules/.pnpm/util@0.12.5/node_modules/util/support/isBufferBrowser.js
var require_isBufferBrowser = __commonJS({
  "node_modules/.pnpm/util@0.12.5/node_modules/util/support/isBufferBrowser.js"(exports, module) {
    init_shim();
    module.exports = function isBuffer2(arg) {
      return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
    };
  }
});

// node_modules/.pnpm/util@0.12.5/node_modules/util/util.js
var require_util = __commonJS({
  "node_modules/.pnpm/util@0.12.5/node_modules/util/util.js"(exports) {
    init_shim();
    var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(obj) {
      var keys = Object.keys(obj);
      var descriptors2 = {};
      for (var i = 0; i < keys.length; i++) {
        descriptors2[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
      }
      return descriptors2;
    };
    var formatRegExp = /%[sdj%]/g;
    exports.format = function(f2) {
      if (!isString2(f2)) {
        var objects = [];
        for (var i = 0; i < arguments.length; i++) {
          objects.push(inspect(arguments[i]));
        }
        return objects.join(" ");
      }
      var i = 1;
      var args = arguments;
      var len = args.length;
      var str = String(f2).replace(formatRegExp, function(x2) {
        if (x2 === "%%")
          return "%";
        if (i >= len)
          return x2;
        switch (x2) {
          case "%s":
            return String(args[i++]);
          case "%d":
            return Number(args[i++]);
          case "%j":
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return "[Circular]";
            }
          default:
            return x2;
        }
      });
      for (var x = args[i]; i < len; x = args[++i]) {
        if (isNull(x) || !isObject2(x)) {
          str += " " + x;
        } else {
          str += " " + inspect(x);
        }
      }
      return str;
    };
    exports.deprecate = function(fn, msg) {
      if (typeof import_process.default !== "undefined" && import_process.default.noDeprecation === true) {
        return fn;
      }
      if (typeof import_process.default === "undefined") {
        return function() {
          return exports.deprecate(fn, msg).apply(this, arguments);
        };
      }
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (import_process.default.throwDeprecation) {
            throw new Error(msg);
          } else if (import_process.default.traceDeprecation) {
            console.trace(msg);
          } else {
            console.error(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
      return deprecated;
    };
    var debugs = {};
    var debugEnvRegex = /^$/;
    if (import_process.default.env.NODE_DEBUG) {
      debugEnv = import_process.default.env.NODE_DEBUG;
      debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase();
      debugEnvRegex = new RegExp("^" + debugEnv + "$", "i");
    }
    var debugEnv;
    exports.debuglog = function(set) {
      set = set.toUpperCase();
      if (!debugs[set]) {
        if (debugEnvRegex.test(set)) {
          var pid = import_process.default.pid;
          debugs[set] = function() {
            var msg = exports.format.apply(exports, arguments);
            console.error("%s %d: %s", set, pid, msg);
          };
        } else {
          debugs[set] = function() {
          };
        }
      }
      return debugs[set];
    };
    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      if (arguments.length >= 3)
        ctx.depth = arguments[2];
      if (arguments.length >= 4)
        ctx.colors = arguments[3];
      if (isBoolean2(opts)) {
        ctx.showHidden = opts;
      } else if (opts) {
        exports._extend(ctx, opts);
      }
      if (isUndefined2(ctx.showHidden))
        ctx.showHidden = false;
      if (isUndefined2(ctx.depth))
        ctx.depth = 2;
      if (isUndefined2(ctx.colors))
        ctx.colors = false;
      if (isUndefined2(ctx.customInspect))
        ctx.customInspect = true;
      if (ctx.colors)
        ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }
    exports.inspect = inspect;
    inspect.colors = {
      "bold": [1, 22],
      "italic": [3, 23],
      "underline": [4, 24],
      "inverse": [7, 27],
      "white": [37, 39],
      "grey": [90, 39],
      "black": [30, 39],
      "blue": [34, 39],
      "cyan": [36, 39],
      "green": [32, 39],
      "magenta": [35, 39],
      "red": [31, 39],
      "yellow": [33, 39]
    };
    inspect.styles = {
      "special": "cyan",
      "number": "yellow",
      "boolean": "yellow",
      "undefined": "grey",
      "null": "bold",
      "string": "green",
      "date": "magenta",
      "regexp": "red"
    };
    function stylizeWithColor(str, styleType) {
      var style = inspect.styles[styleType];
      if (style) {
        return "\x1B[" + inspect.colors[style][0] + "m" + str + "\x1B[" + inspect.colors[style][1] + "m";
      } else {
        return str;
      }
    }
    function stylizeNoColor(str, styleType) {
      return str;
    }
    function arrayToHash(array) {
      var hash = {};
      array.forEach(function(val, idx) {
        hash[val] = true;
      });
      return hash;
    }
    function formatValue(ctx, value, recurseTimes) {
      if (ctx.customInspect && value && isFunction2(value.inspect) && value.inspect !== exports.inspect && !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString2(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);
      if (ctx.showHidden) {
        keys = Object.getOwnPropertyNames(value);
      }
      if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
        return formatError(value);
      }
      if (keys.length === 0) {
        if (isFunction2(value)) {
          var name = value.name ? ": " + value.name : "";
          return ctx.stylize("[Function" + name + "]", "special");
        }
        if (isRegExp2(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        }
        if (isDate2(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), "date");
        }
        if (isError(value)) {
          return formatError(value);
        }
      }
      var base = "", array = false, braces = ["{", "}"];
      if (isArray2(value)) {
        array = true;
        braces = ["[", "]"];
      }
      if (isFunction2(value)) {
        var n = value.name ? ": " + value.name : "";
        base = " [Function" + n + "]";
      }
      if (isRegExp2(value)) {
        base = " " + RegExp.prototype.toString.call(value);
      }
      if (isDate2(value)) {
        base = " " + Date.prototype.toUTCString.call(value);
      }
      if (isError(value)) {
        base = " " + formatError(value);
      }
      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }
      if (recurseTimes < 0) {
        if (isRegExp2(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        } else {
          return ctx.stylize("[Object]", "special");
        }
      }
      ctx.seen.push(value);
      var output;
      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function(key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }
      ctx.seen.pop();
      return reduceToSingleString(output, base, braces);
    }
    function formatPrimitive(ctx, value) {
      if (isUndefined2(value))
        return ctx.stylize("undefined", "undefined");
      if (isString2(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, "string");
      }
      if (isNumber2(value))
        return ctx.stylize("" + value, "number");
      if (isBoolean2(value))
        return ctx.stylize("" + value, "boolean");
      if (isNull(value))
        return ctx.stylize("null", "null");
    }
    function formatError(value) {
      return "[" + Error.prototype.toString.call(value) + "]";
    }
    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty2(value, String(i))) {
          output.push(formatProperty(
            ctx,
            value,
            recurseTimes,
            visibleKeys,
            String(i),
            true
          ));
        } else {
          output.push("");
        }
      }
      keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(
            ctx,
            value,
            recurseTimes,
            visibleKeys,
            key,
            true
          ));
        }
      });
      return output;
    }
    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize("[Getter/Setter]", "special");
        } else {
          str = ctx.stylize("[Getter]", "special");
        }
      } else {
        if (desc.set) {
          str = ctx.stylize("[Setter]", "special");
        }
      }
      if (!hasOwnProperty2(visibleKeys, key)) {
        name = "[" + key + "]";
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf("\n") > -1) {
            if (array) {
              str = str.split("\n").map(function(line) {
                return "  " + line;
              }).join("\n").slice(2);
            } else {
              str = "\n" + str.split("\n").map(function(line) {
                return "   " + line;
              }).join("\n");
            }
          }
        } else {
          str = ctx.stylize("[Circular]", "special");
        }
      }
      if (isUndefined2(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify("" + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.slice(1, -1);
          name = ctx.stylize(name, "name");
        } else {
          name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, "string");
        }
      }
      return name + ": " + str;
    }
    function reduceToSingleString(output, base, braces) {
      var numLinesEst = 0;
      var length = output.reduce(function(prev, cur) {
        numLinesEst++;
        if (cur.indexOf("\n") >= 0)
          numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
      }, 0);
      if (length > 60) {
        return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
      }
      return braces[0] + base + " " + output.join(", ") + " " + braces[1];
    }
    exports.types = require_types();
    function isArray2(ar) {
      return Array.isArray(ar);
    }
    exports.isArray = isArray2;
    function isBoolean2(arg) {
      return typeof arg === "boolean";
    }
    exports.isBoolean = isBoolean2;
    function isNull(arg) {
      return arg === null;
    }
    exports.isNull = isNull;
    function isNullOrUndefined(arg) {
      return arg == null;
    }
    exports.isNullOrUndefined = isNullOrUndefined;
    function isNumber2(arg) {
      return typeof arg === "number";
    }
    exports.isNumber = isNumber2;
    function isString2(arg) {
      return typeof arg === "string";
    }
    exports.isString = isString2;
    function isSymbol(arg) {
      return typeof arg === "symbol";
    }
    exports.isSymbol = isSymbol;
    function isUndefined2(arg) {
      return arg === void 0;
    }
    exports.isUndefined = isUndefined2;
    function isRegExp2(re) {
      return isObject2(re) && objectToString(re) === "[object RegExp]";
    }
    exports.isRegExp = isRegExp2;
    exports.types.isRegExp = isRegExp2;
    function isObject2(arg) {
      return typeof arg === "object" && arg !== null;
    }
    exports.isObject = isObject2;
    function isDate2(d) {
      return isObject2(d) && objectToString(d) === "[object Date]";
    }
    exports.isDate = isDate2;
    exports.types.isDate = isDate2;
    function isError(e) {
      return isObject2(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
    }
    exports.isError = isError;
    exports.types.isNativeError = isError;
    function isFunction2(arg) {
      return typeof arg === "function";
    }
    exports.isFunction = isFunction2;
    function isPrimitive(arg) {
      return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || typeof arg === "undefined";
    }
    exports.isPrimitive = isPrimitive;
    exports.isBuffer = require_isBufferBrowser();
    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }
    function pad(n) {
      return n < 10 ? "0" + n.toString(10) : n.toString(10);
    }
    var months = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ];
    function timestamp() {
      var d = new Date();
      var time = [
        pad(d.getHours()),
        pad(d.getMinutes()),
        pad(d.getSeconds())
      ].join(":");
      return [d.getDate(), months[d.getMonth()], time].join(" ");
    }
    exports.log = function() {
      console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
    };
    exports.inherits = require_inherits_browser();
    exports._extend = function(origin, add) {
      if (!add || !isObject2(add))
        return origin;
      var keys = Object.keys(add);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add[keys[i]];
      }
      return origin;
    };
    function hasOwnProperty2(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    var kCustomPromisifiedSymbol = typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : void 0;
    exports.promisify = function promisify(original) {
      if (typeof original !== "function")
        throw new TypeError('The "original" argument must be of type Function');
      if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
        var fn = original[kCustomPromisifiedSymbol];
        if (typeof fn !== "function") {
          throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        }
        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
          value: fn,
          enumerable: false,
          writable: false,
          configurable: true
        });
        return fn;
      }
      function fn() {
        var promiseResolve, promiseReject;
        var promise = new Promise(function(resolve, reject) {
          promiseResolve = resolve;
          promiseReject = reject;
        });
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
          args.push(arguments[i]);
        }
        args.push(function(err, value) {
          if (err) {
            promiseReject(err);
          } else {
            promiseResolve(value);
          }
        });
        try {
          original.apply(this, args);
        } catch (err) {
          promiseReject(err);
        }
        return promise;
      }
      Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
      if (kCustomPromisifiedSymbol)
        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
          value: fn,
          enumerable: false,
          writable: false,
          configurable: true
        });
      return Object.defineProperties(
        fn,
        getOwnPropertyDescriptors(original)
      );
    };
    exports.promisify.custom = kCustomPromisifiedSymbol;
    function callbackifyOnRejected(reason, cb) {
      if (!reason) {
        var newReason = new Error("Promise was rejected with a falsy value");
        newReason.reason = reason;
        reason = newReason;
      }
      return cb(reason);
    }
    function callbackify(original) {
      if (typeof original !== "function") {
        throw new TypeError('The "original" argument must be of type Function');
      }
      function callbackified() {
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
          args.push(arguments[i]);
        }
        var maybeCb = args.pop();
        if (typeof maybeCb !== "function") {
          throw new TypeError("The last argument must be of type Function");
        }
        var self2 = this;
        var cb = function() {
          return maybeCb.apply(self2, arguments);
        };
        original.apply(this, args).then(
          function(ret) {
            import_process.default.nextTick(cb.bind(null, null, ret));
          },
          function(rej) {
            import_process.default.nextTick(callbackifyOnRejected.bind(null, rej, cb));
          }
        );
      }
      Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
      Object.defineProperties(
        callbackified,
        getOwnPropertyDescriptors(original)
      );
      return callbackified;
    }
    exports.callbackify = callbackify;
  }
});

// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/buffer_list.js
var require_buffer_list = __commonJS({
  "node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports, module) {
    "use strict";
    init_shim();
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var _require = require_buffer();
    var Buffer2 = _require.Buffer;
    var _require2 = require_util();
    var inspect = _require2.inspect;
    var custom = inspect && inspect.custom || "inspect";
    function copyBuffer(src, target, offset) {
      Buffer2.prototype.copy.call(src, target, offset);
    }
    module.exports = function() {
      function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      _createClass(BufferList, [{
        key: "push",
        value: function push(v) {
          var entry = {
            data: v,
            next: null
          };
          if (this.length > 0)
            this.tail.next = entry;
          else
            this.head = entry;
          this.tail = entry;
          ++this.length;
        }
      }, {
        key: "unshift",
        value: function unshift(v) {
          var entry = {
            data: v,
            next: this.head
          };
          if (this.length === 0)
            this.tail = entry;
          this.head = entry;
          ++this.length;
        }
      }, {
        key: "shift",
        value: function shift() {
          if (this.length === 0)
            return;
          var ret = this.head.data;
          if (this.length === 1)
            this.head = this.tail = null;
          else
            this.head = this.head.next;
          --this.length;
          return ret;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.head = this.tail = null;
          this.length = 0;
        }
      }, {
        key: "join",
        value: function join(s) {
          if (this.length === 0)
            return "";
          var p = this.head;
          var ret = "" + p.data;
          while (p = p.next) {
            ret += s + p.data;
          }
          return ret;
        }
      }, {
        key: "concat",
        value: function concat(n) {
          if (this.length === 0)
            return Buffer2.alloc(0);
          var ret = Buffer2.allocUnsafe(n >>> 0);
          var p = this.head;
          var i = 0;
          while (p) {
            copyBuffer(p.data, ret, i);
            i += p.data.length;
            p = p.next;
          }
          return ret;
        }
      }, {
        key: "consume",
        value: function consume(n, hasStrings) {
          var ret;
          if (n < this.head.data.length) {
            ret = this.head.data.slice(0, n);
            this.head.data = this.head.data.slice(n);
          } else if (n === this.head.data.length) {
            ret = this.shift();
          } else {
            ret = hasStrings ? this._getString(n) : this._getBuffer(n);
          }
          return ret;
        }
      }, {
        key: "first",
        value: function first() {
          return this.head.data;
        }
      }, {
        key: "_getString",
        value: function _getString(n) {
          var p = this.head;
          var c = 1;
          var ret = p.data;
          n -= ret.length;
          while (p = p.next) {
            var str = p.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length)
              ret += str;
            else
              ret += str.slice(0, n);
            n -= nb;
            if (n === 0) {
              if (nb === str.length) {
                ++c;
                if (p.next)
                  this.head = p.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = str.slice(nb);
              }
              break;
            }
            ++c;
          }
          this.length -= c;
          return ret;
        }
      }, {
        key: "_getBuffer",
        value: function _getBuffer(n) {
          var ret = Buffer2.allocUnsafe(n);
          var p = this.head;
          var c = 1;
          p.data.copy(ret);
          n -= p.data.length;
          while (p = p.next) {
            var buf = p.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;
            if (n === 0) {
              if (nb === buf.length) {
                ++c;
                if (p.next)
                  this.head = p.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = buf.slice(nb);
              }
              break;
            }
            ++c;
          }
          this.length -= c;
          return ret;
        }
      }, {
        key: custom,
        value: function value(_, options) {
          return inspect(this, _objectSpread({}, options, {
            depth: 0,
            customInspect: false
          }));
        }
      }]);
      return BufferList;
    }();
  }
});

// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/destroy.js
var require_destroy = __commonJS({
  "node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/destroy.js"(exports, module) {
    "use strict";
    init_shim();
    function destroy(err, cb) {
      var _this = this;
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            import_process.default.nextTick(emitErrorNT, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            import_process.default.nextTick(emitErrorNT, this, err);
          }
        }
        return this;
      }
      if (this._readableState) {
        this._readableState.destroyed = true;
      }
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
      this._destroy(err || null, function(err2) {
        if (!cb && err2) {
          if (!_this._writableState) {
            import_process.default.nextTick(emitErrorAndCloseNT, _this, err2);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            import_process.default.nextTick(emitErrorAndCloseNT, _this, err2);
          } else {
            import_process.default.nextTick(emitCloseNT, _this);
          }
        } else if (cb) {
          import_process.default.nextTick(emitCloseNT, _this);
          cb(err2);
        } else {
          import_process.default.nextTick(emitCloseNT, _this);
        }
      });
      return this;
    }
    function emitErrorAndCloseNT(self2, err) {
      emitErrorNT(self2, err);
      emitCloseNT(self2);
    }
    function emitCloseNT(self2) {
      if (self2._writableState && !self2._writableState.emitClose)
        return;
      if (self2._readableState && !self2._readableState.emitClose)
        return;
      self2.emit("close");
    }
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    function emitErrorNT(self2, err) {
      self2.emit("error", err);
    }
    function errorOrDestroy(stream, err) {
      var rState = stream._readableState;
      var wState = stream._writableState;
      if (rState && rState.autoDestroy || wState && wState.autoDestroy)
        stream.destroy(err);
      else
        stream.emit("error", err);
    }
    module.exports = {
      destroy,
      undestroy,
      errorOrDestroy
    };
  }
});

// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/errors-browser.js
var require_errors_browser = __commonJS({
  "node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/errors-browser.js"(exports, module) {
    "use strict";
    init_shim();
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var codes = {};
    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }
      function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }
      var NodeError = function(_Base) {
        _inheritsLoose(NodeError2, _Base);
        function NodeError2(arg1, arg2, arg3) {
          return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError2;
      }(Base);
      NodeError.prototype.name = Base.name;
      NodeError.prototype.code = code;
      codes[code] = NodeError;
    }
    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
          return String(i);
        });
        if (len > 2) {
          return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        } else if (len === 2) {
          return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        } else {
          return "of ".concat(thing, " ").concat(expected[0]);
        }
      } else {
        return "of ".concat(thing, " ").concat(String(expected));
      }
    }
    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    }
    function endsWith2(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function includes(str, search, start) {
      if (typeof start !== "number") {
        start = 0;
      }
      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }
    createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
      return 'The value "' + value + '" is invalid for option "' + name + '"';
    }, TypeError);
    createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
      var determiner;
      if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
      } else {
        determiner = "must be";
      }
      var msg;
      if (endsWith2(name, " argument")) {
        msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      } else {
        var type = includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      }
      msg += ". Received type ".concat(typeof actual);
      return msg;
    }, TypeError);
    createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
      return "The " + name + " method is not implemented";
    });
    createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    createErrorType("ERR_STREAM_DESTROYED", function(name) {
      return "Cannot call " + name + " after a stream was destroyed";
    });
    createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
    createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
      return "Unknown encoding: " + arg;
    }, TypeError);
    createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    module.exports.codes = codes;
  }
});

// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/state.js
var require_state = __commonJS({
  "node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/state.js"(exports, module) {
    "use strict";
    init_shim();
    var ERR_INVALID_OPT_VALUE = require_errors_browser().codes.ERR_INVALID_OPT_VALUE;
    function highWaterMarkFrom(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }
    function getHighWaterMark(state, options, duplexKey, isDuplex) {
      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
      if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
          var name = isDuplex ? duplexKey : "highWaterMark";
          throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
      }
      return state.objectMode ? 16 : 16 * 1024;
    }
    module.exports = {
      getHighWaterMark
    };
  }
});

// node_modules/.pnpm/util-deprecate@1.0.2/node_modules/util-deprecate/browser.js
var require_browser2 = __commonJS({
  "node_modules/.pnpm/util-deprecate@1.0.2/node_modules/util-deprecate/browser.js"(exports, module) {
    init_shim();
    module.exports = deprecate;
    function deprecate(fn, msg) {
      if (config("noDeprecation")) {
        return fn;
      }
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (config("throwDeprecation")) {
            throw new Error(msg);
          } else if (config("traceDeprecation")) {
            console.trace(msg);
          } else {
            console.warn(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
      return deprecated;
    }
    function config(name) {
      try {
        if (!_global.localStorage)
          return false;
      } catch (_) {
        return false;
      }
      var val = _global.localStorage[name];
      if (null == val)
        return false;
      return String(val).toLowerCase() === "true";
    }
  }
});

// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_writable.js
var require_stream_writable = __commonJS({
  "node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_writable.js"(exports, module) {
    "use strict";
    init_shim();
    module.exports = Writable;
    function CorkedRequest(state) {
      var _this = this;
      this.next = null;
      this.entry = null;
      this.finish = function() {
        onCorkedFinish(_this, state);
      };
    }
    var Duplex;
    Writable.WritableState = WritableState;
    var internalUtil = {
      deprecate: require_browser2()
    };
    var Stream = require_stream_browser();
    var Buffer2 = require_buffer().Buffer;
    var OurUint8Array = _global.Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors_browser().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
    var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;
    var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    require_inherits_browser()(Writable, Stream);
    function nop() {
    }
    function WritableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.writableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
      this.finalCalled = false;
      this.needDrain = false;
      this.ending = false;
      this.ended = false;
      this.finished = false;
      this.destroyed = false;
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.length = 0;
      this.writing = false;
      this.corked = 0;
      this.sync = true;
      this.bufferProcessing = false;
      this.onwrite = function(er) {
        onwrite(stream, er);
      };
      this.writecb = null;
      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null;
      this.pendingcb = 0;
      this.prefinished = false;
      this.errorEmitted = false;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.bufferedRequestCount = 0;
      this.corkedRequestsFree = new CorkedRequest(this);
    }
    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    (function() {
      try {
        Object.defineProperty(WritableState.prototype, "buffer", {
          get: internalUtil.deprecate(function writableStateBufferGetter() {
            return this.getBuffer();
          }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
      } catch (_) {
      }
    })();
    var realHasInstance;
    if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
          if (realHasInstance.call(this, object))
            return true;
          if (this !== Writable)
            return false;
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function realHasInstance2(object) {
        return object instanceof this;
      };
    }
    function Writable(options) {
      Duplex = Duplex || require_stream_duplex();
      var isDuplex = this instanceof Duplex;
      if (!isDuplex && !realHasInstance.call(Writable, this))
        return new Writable(options);
      this._writableState = new WritableState(options, this, isDuplex);
      this.writable = true;
      if (options) {
        if (typeof options.write === "function")
          this._write = options.write;
        if (typeof options.writev === "function")
          this._writev = options.writev;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
        if (typeof options.final === "function")
          this._final = options.final;
      }
      Stream.call(this);
    }
    Writable.prototype.pipe = function() {
      errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
    };
    function writeAfterEnd(stream, cb) {
      var er = new ERR_STREAM_WRITE_AFTER_END();
      errorOrDestroy(stream, er);
      import_process.default.nextTick(cb, er);
    }
    function validChunk(stream, state, chunk, cb) {
      var er;
      if (chunk === null) {
        er = new ERR_STREAM_NULL_VALUES();
      } else if (typeof chunk !== "string" && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
      }
      if (er) {
        errorOrDestroy(stream, er);
        import_process.default.nextTick(cb, er);
        return false;
      }
      return true;
    }
    Writable.prototype.write = function(chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;
      var isBuf = !state.objectMode && _isUint8Array(chunk);
      if (isBuf && !Buffer2.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (isBuf)
        encoding = "buffer";
      else if (!encoding)
        encoding = state.defaultEncoding;
      if (typeof cb !== "function")
        cb = nop;
      if (state.ending)
        writeAfterEnd(this, cb);
      else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
      }
      return ret;
    };
    Writable.prototype.cork = function() {
      this._writableState.corked++;
    };
    Writable.prototype.uncork = function() {
      var state = this._writableState;
      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
          clearBuffer(this, state);
      }
    };
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      if (typeof encoding === "string")
        encoding = encoding.toLowerCase();
      if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
        throw new ERR_UNKNOWN_ENCODING(encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableBuffer", {
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
        chunk = Buffer2.from(chunk, encoding);
      }
      return chunk;
    }
    Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
          isBuf = true;
          encoding = "buffer";
          chunk = newChunk;
        }
      }
      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark;
      if (!ret)
        state.needDrain = true;
      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk,
          encoding,
          isBuf,
          callback: cb,
          next: null
        };
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }
      return ret;
    }
    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (state.destroyed)
        state.onwrite(new ERR_STREAM_DESTROYED("write"));
      else if (writev)
        stream._writev(chunk, state.onwrite);
      else
        stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;
      if (sync) {
        import_process.default.nextTick(cb, er);
        import_process.default.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
      } else {
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
        finishMaybe(stream, state);
      }
    }
    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }
    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      if (typeof cb !== "function")
        throw new ERR_MULTIPLE_CALLBACK();
      onwriteStateUpdate(state);
      if (er)
        onwriteError(stream, state, sync, er, cb);
      else {
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }
        if (sync) {
          import_process.default.nextTick(afterWrite, stream, state, finished, cb);
        } else {
          afterWrite(stream, state, finished, cb);
        }
      }
    }
    function afterWrite(stream, state, finished, cb) {
      if (!finished)
        onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
      }
    }
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;
      if (stream._writev && entry && entry.next) {
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while (entry) {
          buffer[count] = entry;
          if (!entry.isBuf)
            allBuffers = false;
          entry = entry.next;
          count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
        state.bufferedRequestCount = 0;
      } else {
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--;
          if (state.writing) {
            break;
          }
        }
        if (entry === null)
          state.lastBufferedRequest = null;
      }
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }
    Writable.prototype._write = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
    };
    Writable.prototype._writev = null;
    Writable.prototype.end = function(chunk, encoding, cb) {
      var state = this._writableState;
      if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (chunk !== null && chunk !== void 0)
        this.write(chunk, encoding);
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }
      if (!state.ending)
        endWritable(this, state, cb);
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableLength", {
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }
    function callFinal(stream, state) {
      stream._final(function(err) {
        state.pendingcb--;
        if (err) {
          errorOrDestroy(stream, err);
        }
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
      });
    }
    function prefinish(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
          state.pendingcb++;
          state.finalCalled = true;
          import_process.default.nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit("prefinish");
        }
      }
    }
    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit("finish");
          if (state.autoDestroy) {
            var rState = stream._readableState;
            if (!rState || rState.autoDestroy && rState.endEmitted) {
              stream.destroy();
            }
          }
        }
      }
      return need;
    }
    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished)
          import_process.default.nextTick(cb);
        else
          stream.once("finish", cb);
      }
      state.ended = true;
      stream.writable = false;
    }
    function onCorkedFinish(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      state.corkedRequestsFree.next = corkReq;
    }
    Object.defineProperty(Writable.prototype, "destroyed", {
      enumerable: false,
      get: function get() {
        if (this._writableState === void 0) {
          return false;
        }
        return this._writableState.destroyed;
      },
      set: function set(value) {
        if (!this._writableState) {
          return;
        }
        this._writableState.destroyed = value;
      }
    });
    Writable.prototype.destroy = destroyImpl.destroy;
    Writable.prototype._undestroy = destroyImpl.undestroy;
    Writable.prototype._destroy = function(err, cb) {
      cb(err);
    };
  }
});

// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_duplex.js
var require_stream_duplex = __commonJS({
  "node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_duplex.js"(exports, module) {
    "use strict";
    init_shim();
    var objectKeys = Object.keys || function(obj) {
      var keys2 = [];
      for (var key in obj) {
        keys2.push(key);
      }
      return keys2;
    };
    module.exports = Duplex;
    var Readable = require_stream_readable();
    var Writable = require_stream_writable();
    require_inherits_browser()(Duplex, Readable);
    {
      keys = objectKeys(Writable.prototype);
      for (v = 0; v < keys.length; v++) {
        method = keys[v];
        if (!Duplex.prototype[method])
          Duplex.prototype[method] = Writable.prototype[method];
      }
    }
    var keys;
    var method;
    var v;
    function Duplex(options) {
      if (!(this instanceof Duplex))
        return new Duplex(options);
      Readable.call(this, options);
      Writable.call(this, options);
      this.allowHalfOpen = true;
      if (options) {
        if (options.readable === false)
          this.readable = false;
        if (options.writable === false)
          this.writable = false;
        if (options.allowHalfOpen === false) {
          this.allowHalfOpen = false;
          this.once("end", onend);
        }
      }
    }
    Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    Object.defineProperty(Duplex.prototype, "writableBuffer", {
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    Object.defineProperty(Duplex.prototype, "writableLength", {
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function onend() {
      if (this._writableState.ended)
        return;
      import_process.default.nextTick(onEndNT, this);
    }
    function onEndNT(self2) {
      self2.end();
    }
    Object.defineProperty(Duplex.prototype, "destroyed", {
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function set(value) {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return;
        }
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });
  }
});

// node_modules/.pnpm/string_decoder@1.3.0/node_modules/string_decoder/lib/string_decoder.js
var require_string_decoder = __commonJS({
  "node_modules/.pnpm/string_decoder@1.3.0/node_modules/string_decoder/lib/string_decoder.js"(exports) {
    "use strict";
    init_shim();
    var Buffer2 = require_safe_buffer().Buffer;
    var isEncoding = Buffer2.isEncoding || function(encoding) {
      encoding = "" + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
          return true;
        default:
          return false;
      }
    };
    function _normalizeEncoding(enc) {
      if (!enc)
        return "utf8";
      var retried;
      while (true) {
        switch (enc) {
          case "utf8":
          case "utf-8":
            return "utf8";
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return "utf16le";
          case "latin1":
          case "binary":
            return "latin1";
          case "base64":
          case "ascii":
          case "hex":
            return enc;
          default:
            if (retried)
              return;
            enc = ("" + enc).toLowerCase();
            retried = true;
        }
      }
    }
    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);
      if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))
        throw new Error("Unknown encoding: " + enc);
      return nenc || enc;
    }
    exports.StringDecoder = StringDecoder;
    function StringDecoder(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;
      switch (this.encoding) {
        case "utf16le":
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;
        case "utf8":
          this.fillLast = utf8FillLast;
          nb = 4;
          break;
        case "base64":
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;
        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer2.allocUnsafe(nb);
    }
    StringDecoder.prototype.write = function(buf) {
      if (buf.length === 0)
        return "";
      var r;
      var i;
      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === void 0)
          return "";
        i = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i = 0;
      }
      if (i < buf.length)
        return r ? r + this.text(buf, i) : this.text(buf, i);
      return r || "";
    };
    StringDecoder.prototype.end = utf8End;
    StringDecoder.prototype.text = utf8Text;
    StringDecoder.prototype.fillLast = function(buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };
    function utf8CheckByte(byte) {
      if (byte <= 127)
        return 0;
      else if (byte >> 5 === 6)
        return 2;
      else if (byte >> 4 === 14)
        return 3;
      else if (byte >> 3 === 30)
        return 4;
      return byte >> 6 === 2 ? -1 : -2;
    }
    function utf8CheckIncomplete(self2, buf, i) {
      var j = buf.length - 1;
      if (j < i)
        return 0;
      var nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0)
          self2.lastNeed = nb - 1;
        return nb;
      }
      if (--j < i || nb === -2)
        return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0)
          self2.lastNeed = nb - 2;
        return nb;
      }
      if (--j < i || nb === -2)
        return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2)
            nb = 0;
          else
            self2.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }
    function utf8CheckExtraBytes(self2, buf, p) {
      if ((buf[0] & 192) !== 128) {
        self2.lastNeed = 0;
        return "\uFFFD";
      }
      if (self2.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
          self2.lastNeed = 1;
          return "\uFFFD";
        }
        if (self2.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 192) !== 128) {
            self2.lastNeed = 2;
            return "\uFFFD";
          }
        }
      }
    }
    function utf8FillLast(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes(this, buf, p);
      if (r !== void 0)
        return r;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    }
    function utf8Text(buf, i) {
      var total = utf8CheckIncomplete(this, buf, i);
      if (!this.lastNeed)
        return buf.toString("utf8", i);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString("utf8", i, end);
    }
    function utf8End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed)
        return r + "\uFFFD";
      return r;
    }
    function utf16Text(buf, i) {
      if ((buf.length - i) % 2 === 0) {
        var r = buf.toString("utf16le", i);
        if (r) {
          var c = r.charCodeAt(r.length - 1);
          if (c >= 55296 && c <= 56319) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r.slice(0, -1);
          }
        }
        return r;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString("utf16le", i, buf.length - 1);
    }
    function utf16End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
      }
      return r;
    }
    function base64Text(buf, i) {
      var n = (buf.length - i) % 3;
      if (n === 0)
        return buf.toString("base64", i);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString("base64", i, buf.length - n);
    }
    function base64End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed)
        return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
      return r;
    }
    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }
    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : "";
    }
  }
});

// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/end-of-stream.js
var require_end_of_stream = __commonJS({
  "node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports, module) {
    "use strict";
    init_shim();
    var ERR_STREAM_PREMATURE_CLOSE = require_errors_browser().codes.ERR_STREAM_PREMATURE_CLOSE;
    function once(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        callback.apply(this, args);
      };
    }
    function noop2() {
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function eos(stream, opts, callback) {
      if (typeof opts === "function")
        return eos(stream, null, opts);
      if (!opts)
        opts = {};
      callback = once(callback || noop2);
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;
      var onlegacyfinish = function onlegacyfinish2() {
        if (!stream.writable)
          onfinish();
      };
      var writableEnded = stream._writableState && stream._writableState.finished;
      var onfinish = function onfinish2() {
        writable = false;
        writableEnded = true;
        if (!readable)
          callback.call(stream);
      };
      var readableEnded = stream._readableState && stream._readableState.endEmitted;
      var onend = function onend2() {
        readable = false;
        readableEnded = true;
        if (!writable)
          callback.call(stream);
      };
      var onerror = function onerror2(err) {
        callback.call(stream, err);
      };
      var onclose = function onclose2() {
        var err;
        if (readable && !readableEnded) {
          if (!stream._readableState || !stream._readableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
          if (!stream._writableState || !stream._writableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
      };
      var onrequest = function onrequest2() {
        stream.req.on("finish", onfinish);
      };
      if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req)
          onrequest();
        else
          stream.on("request", onrequest);
      } else if (writable && !stream._writableState) {
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
      }
      stream.on("end", onend);
      stream.on("finish", onfinish);
      if (opts.error !== false)
        stream.on("error", onerror);
      stream.on("close", onclose);
      return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req)
          stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
      };
    }
    module.exports = eos;
  }
});

// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/async_iterator.js
var require_async_iterator = __commonJS({
  "node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/async_iterator.js"(exports, module) {
    "use strict";
    init_shim();
    var _Object$setPrototypeO;
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var finished = require_end_of_stream();
    var kLastResolve = Symbol("lastResolve");
    var kLastReject = Symbol("lastReject");
    var kError = Symbol("error");
    var kEnded = Symbol("ended");
    var kLastPromise = Symbol("lastPromise");
    var kHandlePromise = Symbol("handlePromise");
    var kStream = Symbol("stream");
    function createIterResult(value, done) {
      return {
        value,
        done
      };
    }
    function readAndResolve(iter) {
      var resolve = iter[kLastResolve];
      if (resolve !== null) {
        var data = iter[kStream].read();
        if (data !== null) {
          iter[kLastPromise] = null;
          iter[kLastResolve] = null;
          iter[kLastReject] = null;
          resolve(createIterResult(data, false));
        }
      }
    }
    function onReadable(iter) {
      import_process.default.nextTick(readAndResolve, iter);
    }
    function wrapForNext(lastPromise, iter) {
      return function(resolve, reject) {
        lastPromise.then(function() {
          if (iter[kEnded]) {
            resolve(createIterResult(void 0, true));
            return;
          }
          iter[kHandlePromise](resolve, reject);
        }, reject);
      };
    }
    var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
    });
    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
      get stream() {
        return this[kStream];
      },
      next: function next() {
        var _this = this;
        var error = this[kError];
        if (error !== null) {
          return Promise.reject(error);
        }
        if (this[kEnded]) {
          return Promise.resolve(createIterResult(void 0, true));
        }
        if (this[kStream].destroyed) {
          return new Promise(function(resolve, reject) {
            import_process.default.nextTick(function() {
              if (_this[kError]) {
                reject(_this[kError]);
              } else {
                resolve(createIterResult(void 0, true));
              }
            });
          });
        }
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) {
          promise = new Promise(wrapForNext(lastPromise, this));
        } else {
          var data = this[kStream].read();
          if (data !== null) {
            return Promise.resolve(createIterResult(data, false));
          }
          promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
      }
    }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
      return this;
    }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
      var _this2 = this;
      return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
          if (err) {
            reject(err);
            return;
          }
          resolve(createIterResult(void 0, true));
        });
      });
    }), _Object$setPrototypeO), AsyncIteratorPrototype);
    var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
      var _Object$create;
      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
      }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
      }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
          var data = iterator[kStream].read();
          if (data) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(data, false));
          } else {
            iterator[kLastResolve] = resolve;
            iterator[kLastReject] = reject;
          }
        },
        writable: true
      }), _Object$create));
      iterator[kLastPromise] = null;
      finished(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
          var reject = iterator[kLastReject];
          if (reject !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            reject(err);
          }
          iterator[kError] = err;
          return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve(createIterResult(void 0, true));
        }
        iterator[kEnded] = true;
      });
      stream.on("readable", onReadable.bind(null, iterator));
      return iterator;
    };
    module.exports = createReadableStreamAsyncIterator;
  }
});

// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/from-browser.js
var require_from_browser = __commonJS({
  "node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/from-browser.js"(exports, module) {
    init_shim();
    module.exports = function() {
      throw new Error("Readable.from is not available in the browser");
    };
  }
});

// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_readable.js
var require_stream_readable = __commonJS({
  "node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_readable.js"(exports, module) {
    "use strict";
    init_shim();
    module.exports = Readable;
    var Duplex;
    Readable.ReadableState = ReadableState;
    var EE = require_events().EventEmitter;
    var EElistenerCount = function EElistenerCount2(emitter, type) {
      return emitter.listeners(type).length;
    };
    var Stream = require_stream_browser();
    var Buffer2 = require_buffer().Buffer;
    var OurUint8Array = _global.Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var debugUtil = require_util();
    var debug;
    if (debugUtil && debugUtil.debuglog) {
      debug = debugUtil.debuglog("stream");
    } else {
      debug = function debug2() {
      };
    }
    var BufferList = require_buffer_list();
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors_browser().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
    var StringDecoder;
    var createReadableStreamAsyncIterator;
    var from;
    require_inherits_browser()(Readable, Stream);
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
    function prependListener(emitter, event, fn) {
      if (typeof emitter.prependListener === "function")
        return emitter.prependListener(event, fn);
      if (!emitter._events || !emitter._events[event])
        emitter.on(event, fn);
      else if (Array.isArray(emitter._events[event]))
        emitter._events[event].unshift(fn);
      else
        emitter._events[event] = [fn, emitter._events[event]];
    }
    function ReadableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.readableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;
      this.sync = true;
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.paused = true;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.destroyed = false;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.awaitDrain = 0;
      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder)
          StringDecoder = require_string_decoder().StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {
      Duplex = Duplex || require_stream_duplex();
      if (!(this instanceof Readable))
        return new Readable(options);
      var isDuplex = this instanceof Duplex;
      this._readableState = new ReadableState(options, this, isDuplex);
      this.readable = true;
      if (options) {
        if (typeof options.read === "function")
          this._read = options.read;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
      }
      Stream.call(this);
    }
    Object.defineProperty(Readable.prototype, "destroyed", {
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0) {
          return false;
        }
        return this._readableState.destroyed;
      },
      set: function set(value) {
        if (!this._readableState) {
          return;
        }
        this._readableState.destroyed = value;
      }
    });
    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;
    Readable.prototype._destroy = function(err, cb) {
      cb(err);
    };
    Readable.prototype.push = function(chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;
      if (!state.objectMode) {
        if (typeof chunk === "string") {
          encoding = encoding || state.defaultEncoding;
          if (encoding !== state.encoding) {
            chunk = Buffer2.from(chunk, encoding);
            encoding = "";
          }
          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }
      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    };
    Readable.prototype.unshift = function(chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };
    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
      debug("readableAddChunk", chunk);
      var state = stream._readableState;
      if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else {
        var er;
        if (!skipChunkCheck)
          er = chunkInvalid(state, chunk);
        if (er) {
          errorOrDestroy(stream, er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }
          if (addToFront) {
            if (state.endEmitted)
              errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
            else
              addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
          } else if (state.destroyed) {
            return false;
          } else {
            state.reading = false;
            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0)
                addChunk(stream, state, chunk, false);
              else
                maybeReadMore(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
          maybeReadMore(stream, state);
        }
      }
      return !state.ended && (state.length < state.highWaterMark || state.length === 0);
    }
    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
      } else {
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);
        if (state.needReadable)
          emitReadable(stream);
      }
      maybeReadMore(stream, state);
    }
    function chunkInvalid(state, chunk) {
      var er;
      if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
      }
      return er;
    }
    Readable.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Readable.prototype.setEncoding = function(enc) {
      if (!StringDecoder)
        StringDecoder = require_string_decoder().StringDecoder;
      var decoder = new StringDecoder(enc);
      this._readableState.decoder = decoder;
      this._readableState.encoding = this._readableState.decoder.encoding;
      var p = this._readableState.buffer.head;
      var content = "";
      while (p !== null) {
        content += decoder.write(p.data);
        p = p.next;
      }
      this._readableState.buffer.clear();
      if (content !== "")
        this._readableState.buffer.push(content);
      this._readableState.length = content.length;
      return this;
    };
    var MAX_HWM = 1073741824;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended)
        return 0;
      if (state.objectMode)
        return 1;
      if (n !== n) {
        if (state.flowing && state.length)
          return state.buffer.head.data.length;
        else
          return state.length;
      }
      if (n > state.highWaterMark)
        state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length)
        return n;
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }
    Readable.prototype.read = function(n) {
      debug("read", n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;
      if (n !== 0)
        state.emittedReadable = false;
      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended)
          endReadable(this);
        else
          emitReadable(this);
        return null;
      }
      n = howMuchToRead(n, state);
      if (n === 0 && state.ended) {
        if (state.length === 0)
          endReadable(this);
        return null;
      }
      var doRead = state.needReadable;
      debug("need readable", doRead);
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
      }
      if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
      } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true;
        if (state.length === 0)
          state.needReadable = true;
        this._read(state.highWaterMark);
        state.sync = false;
        if (!state.reading)
          n = howMuchToRead(nOrig, state);
      }
      var ret;
      if (n > 0)
        ret = fromList(n, state);
      else
        ret = null;
      if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
      } else {
        state.length -= n;
        state.awaitDrain = 0;
      }
      if (state.length === 0) {
        if (!state.ended)
          state.needReadable = true;
        if (nOrig !== n && state.ended)
          endReadable(this);
      }
      if (ret !== null)
        this.emit("data", ret);
      return ret;
    };
    function onEofChunk(stream, state) {
      debug("onEofChunk");
      if (state.ended)
        return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;
      if (state.sync) {
        emitReadable(stream);
      } else {
        state.needReadable = false;
        if (!state.emittedReadable) {
          state.emittedReadable = true;
          emitReadable_(stream);
        }
      }
    }
    function emitReadable(stream) {
      var state = stream._readableState;
      debug("emitReadable", state.needReadable, state.emittedReadable);
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        import_process.default.nextTick(emitReadable_, stream);
      }
    }
    function emitReadable_(stream) {
      var state = stream._readableState;
      debug("emitReadable_", state.destroyed, state.length, state.ended);
      if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
      }
      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
      flow(stream);
    }
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        import_process.default.nextTick(maybeReadMore_, stream, state);
      }
    }
    function maybeReadMore_(stream, state) {
      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
        var len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length)
          break;
      }
      state.readingMore = false;
    }
    Readable.prototype._read = function(n) {
      errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
    };
    Readable.prototype.pipe = function(dest, pipeOpts) {
      var src = this;
      var state = this._readableState;
      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== import_process.default.stdout && dest !== import_process.default.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted)
        import_process.default.nextTick(endFn);
      else
        src.once("end", endFn);
      dest.on("unpipe", onunpipe);
      function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
      function onend() {
        debug("onend");
        dest.end();
      }
      var ondrain = pipeOnDrain(src);
      dest.on("drain", ondrain);
      var cleanedUp = false;
      function cleanup() {
        debug("cleanup");
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
          ondrain();
      }
      src.on("data", ondata);
      function ondata(chunk) {
        debug("ondata");
        var ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug("false write response, pause", state.awaitDrain);
            state.awaitDrain++;
          }
          src.pause();
        }
      }
      function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0)
          errorOrDestroy(dest, er);
      }
      prependListener(dest, "error", onerror);
      function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
      }
      dest.once("close", onclose);
      function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
      }
      dest.once("finish", onfinish);
      function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
      }
      dest.emit("pipe", src);
      if (!state.flowing) {
        debug("pipe resume");
        src.resume();
      }
      return dest;
    };
    function pipeOnDrain(src) {
      return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain)
          state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
          state.flowing = true;
          flow(src);
        }
      };
    }
    Readable.prototype.unpipe = function(dest) {
      var state = this._readableState;
      var unpipeInfo = {
        hasUnpiped: false
      };
      if (state.pipesCount === 0)
        return this;
      if (state.pipesCount === 1) {
        if (dest && dest !== state.pipes)
          return this;
        if (!dest)
          dest = state.pipes;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest)
          dest.emit("unpipe", this, unpipeInfo);
        return this;
      }
      if (!dest) {
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for (var i = 0; i < len; i++) {
          dests[i].emit("unpipe", this, {
            hasUnpiped: false
          });
        }
        return this;
      }
      var index = indexOf(state.pipes, dest);
      if (index === -1)
        return this;
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1)
        state.pipes = state.pipes[0];
      dest.emit("unpipe", this, unpipeInfo);
      return this;
    };
    Readable.prototype.on = function(ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);
      var state = this._readableState;
      if (ev === "data") {
        state.readableListening = this.listenerCount("readable") > 0;
        if (state.flowing !== false)
          this.resume();
      } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.flowing = false;
          state.emittedReadable = false;
          debug("on readable", state.length, state.reading);
          if (state.length) {
            emitReadable(this);
          } else if (!state.reading) {
            import_process.default.nextTick(nReadingNextTick, this);
          }
        }
      }
      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;
    Readable.prototype.removeListener = function(ev, fn) {
      var res = Stream.prototype.removeListener.call(this, ev, fn);
      if (ev === "readable") {
        import_process.default.nextTick(updateReadableListening, this);
      }
      return res;
    };
    Readable.prototype.removeAllListeners = function(ev) {
      var res = Stream.prototype.removeAllListeners.apply(this, arguments);
      if (ev === "readable" || ev === void 0) {
        import_process.default.nextTick(updateReadableListening, this);
      }
      return res;
    };
    function updateReadableListening(self2) {
      var state = self2._readableState;
      state.readableListening = self2.listenerCount("readable") > 0;
      if (state.resumeScheduled && !state.paused) {
        state.flowing = true;
      } else if (self2.listenerCount("data") > 0) {
        self2.resume();
      }
    }
    function nReadingNextTick(self2) {
      debug("readable nexttick read 0");
      self2.read(0);
    }
    Readable.prototype.resume = function() {
      var state = this._readableState;
      if (!state.flowing) {
        debug("resume");
        state.flowing = !state.readableListening;
        resume(this, state);
      }
      state.paused = false;
      return this;
    };
    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        import_process.default.nextTick(resume_, stream, state);
      }
    }
    function resume_(stream, state) {
      debug("resume", state.reading);
      if (!state.reading) {
        stream.read(0);
      }
      state.resumeScheduled = false;
      stream.emit("resume");
      flow(stream);
      if (state.flowing && !state.reading)
        stream.read(0);
    }
    Readable.prototype.pause = function() {
      debug("call pause flowing=%j", this._readableState.flowing);
      if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
      }
      this._readableState.paused = true;
      return this;
    };
    function flow(stream) {
      var state = stream._readableState;
      debug("flow", state.flowing);
      while (state.flowing && stream.read() !== null) {
        ;
      }
    }
    Readable.prototype.wrap = function(stream) {
      var _this = this;
      var state = this._readableState;
      var paused = false;
      stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length)
            _this.push(chunk);
        }
        _this.push(null);
      });
      stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder)
          chunk = state.decoder.write(chunk);
        if (state.objectMode && (chunk === null || chunk === void 0))
          return;
        else if (!state.objectMode && (!chunk || !chunk.length))
          return;
        var ret = _this.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });
      for (var i in stream) {
        if (this[i] === void 0 && typeof stream[i] === "function") {
          this[i] = function methodWrap(method) {
            return function methodWrapReturnFunction() {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      }
      for (var n = 0; n < kProxyEvents.length; n++) {
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      }
      this._read = function(n2) {
        debug("wrapped _read", n2);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };
      return this;
    };
    if (typeof Symbol === "function") {
      Readable.prototype[Symbol.asyncIterator] = function() {
        if (createReadableStreamAsyncIterator === void 0) {
          createReadableStreamAsyncIterator = require_async_iterator();
        }
        return createReadableStreamAsyncIterator(this);
      };
    }
    Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
      enumerable: false,
      get: function get() {
        return this._readableState.highWaterMark;
      }
    });
    Object.defineProperty(Readable.prototype, "readableBuffer", {
      enumerable: false,
      get: function get() {
        return this._readableState && this._readableState.buffer;
      }
    });
    Object.defineProperty(Readable.prototype, "readableFlowing", {
      enumerable: false,
      get: function get() {
        return this._readableState.flowing;
      },
      set: function set(state) {
        if (this._readableState) {
          this._readableState.flowing = state;
        }
      }
    });
    Readable._fromList = fromList;
    Object.defineProperty(Readable.prototype, "readableLength", {
      enumerable: false,
      get: function get() {
        return this._readableState.length;
      }
    });
    function fromList(n, state) {
      if (state.length === 0)
        return null;
      var ret;
      if (state.objectMode)
        ret = state.buffer.shift();
      else if (!n || n >= state.length) {
        if (state.decoder)
          ret = state.buffer.join("");
        else if (state.buffer.length === 1)
          ret = state.buffer.first();
        else
          ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        ret = state.buffer.consume(n, state.decoder);
      }
      return ret;
    }
    function endReadable(stream) {
      var state = stream._readableState;
      debug("endReadable", state.endEmitted);
      if (!state.endEmitted) {
        state.ended = true;
        import_process.default.nextTick(endReadableNT, state, stream);
      }
    }
    function endReadableNT(state, stream) {
      debug("endReadableNT", state.endEmitted, state.length);
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
          var wState = stream._writableState;
          if (!wState || wState.autoDestroy && wState.finished) {
            stream.destroy();
          }
        }
      }
    }
    if (typeof Symbol === "function") {
      Readable.from = function(iterable, opts) {
        if (from === void 0) {
          from = require_from_browser();
        }
        return from(Readable, iterable, opts);
      };
    }
    function indexOf(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x)
          return i;
      }
      return -1;
    }
  }
});

// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_transform.js
var require_stream_transform = __commonJS({
  "node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_transform.js"(exports, module) {
    "use strict";
    init_shim();
    module.exports = Transform;
    var _require$codes = require_errors_browser().codes;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;
    var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
    var Duplex = require_stream_duplex();
    require_inherits_browser()(Transform, Duplex);
    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;
      if (cb === null) {
        return this.emit("error", new ERR_MULTIPLE_CALLBACK());
      }
      ts.writechunk = null;
      ts.writecb = null;
      if (data != null)
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform))
        return new Transform(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };
      this._readableState.needReadable = true;
      this._readableState.sync = false;
      if (options) {
        if (typeof options.transform === "function")
          this._transform = options.transform;
        if (typeof options.flush === "function")
          this._flush = options.flush;
      }
      this.on("prefinish", prefinish);
    }
    function prefinish() {
      var _this = this;
      if (typeof this._flush === "function" && !this._readableState.destroyed) {
        this._flush(function(er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }
    Transform.prototype.push = function(chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };
    Transform.prototype._transform = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
    };
    Transform.prototype._write = function(chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
          this._read(rs.highWaterMark);
      }
    };
    Transform.prototype._read = function(n) {
      var ts = this._transformState;
      if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        ts.needTransform = true;
      }
    };
    Transform.prototype._destroy = function(err, cb) {
      Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
      });
    };
    function done(stream, er, data) {
      if (er)
        return stream.emit("error", er);
      if (data != null)
        stream.push(data);
      if (stream._writableState.length)
        throw new ERR_TRANSFORM_WITH_LENGTH_0();
      if (stream._transformState.transforming)
        throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
      return stream.push(null);
    }
  }
});

// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_passthrough.js
var require_stream_passthrough = __commonJS({
  "node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_passthrough.js"(exports, module) {
    "use strict";
    init_shim();
    module.exports = PassThrough;
    var Transform = require_stream_transform();
    require_inherits_browser()(PassThrough, Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough))
        return new PassThrough(options);
      Transform.call(this, options);
    }
    PassThrough.prototype._transform = function(chunk, encoding, cb) {
      cb(null, chunk);
    };
  }
});

// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/pipeline.js
var require_pipeline = __commonJS({
  "node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/pipeline.js"(exports, module) {
    "use strict";
    init_shim();
    var eos;
    function once(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        callback.apply(void 0, arguments);
      };
    }
    var _require$codes = require_errors_browser().codes;
    var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    function noop2(err) {
      if (err)
        throw err;
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function destroyer(stream, reading, writing, callback) {
      callback = once(callback);
      var closed = false;
      stream.on("close", function() {
        closed = true;
      });
      if (eos === void 0)
        eos = require_end_of_stream();
      eos(stream, {
        readable: reading,
        writable: writing
      }, function(err) {
        if (err)
          return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function(err) {
        if (closed)
          return;
        if (destroyed)
          return;
        destroyed = true;
        if (isRequest(stream))
          return stream.abort();
        if (typeof stream.destroy === "function")
          return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED("pipe"));
      };
    }
    function call(fn) {
      fn();
    }
    function pipe(from, to) {
      return from.pipe(to);
    }
    function popCallback(streams) {
      if (!streams.length)
        return noop2;
      if (typeof streams[streams.length - 1] !== "function")
        return noop2;
      return streams.pop();
    }
    function pipeline() {
      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
        streams[_key] = arguments[_key];
      }
      var callback = popCallback(streams);
      if (Array.isArray(streams[0]))
        streams = streams[0];
      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS("streams");
      }
      var error;
      var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
          if (!error)
            error = err;
          if (err)
            destroys.forEach(call);
          if (reading)
            return;
          destroys.forEach(call);
          callback(error);
        });
      });
      return streams.reduce(pipe);
    }
    module.exports = pipeline;
  }
});

// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/readable-browser.js
var require_readable_browser = __commonJS({
  "node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/readable-browser.js"(exports, module) {
    init_shim();
    exports = module.exports = require_stream_readable();
    exports.Stream = exports;
    exports.Readable = exports;
    exports.Writable = require_stream_writable();
    exports.Duplex = require_stream_duplex();
    exports.Transform = require_stream_transform();
    exports.PassThrough = require_stream_passthrough();
    exports.finished = require_end_of_stream();
    exports.pipeline = require_pipeline();
  }
});

// node_modules/.pnpm/hash-base@3.1.0/node_modules/hash-base/index.js
var require_hash_base = __commonJS({
  "node_modules/.pnpm/hash-base@3.1.0/node_modules/hash-base/index.js"(exports, module) {
    "use strict";
    init_shim();
    var Buffer2 = require_safe_buffer().Buffer;
    var Transform = require_readable_browser().Transform;
    var inherits2 = require_inherits_browser();
    function throwIfNotStringOrBuffer(val, prefix) {
      if (!Buffer2.isBuffer(val) && typeof val !== "string") {
        throw new TypeError(prefix + " must be a string or a buffer");
      }
    }
    function HashBase(blockSize) {
      Transform.call(this);
      this._block = Buffer2.allocUnsafe(blockSize);
      this._blockSize = blockSize;
      this._blockOffset = 0;
      this._length = [0, 0, 0, 0];
      this._finalized = false;
    }
    inherits2(HashBase, Transform);
    HashBase.prototype._transform = function(chunk, encoding, callback) {
      var error = null;
      try {
        this.update(chunk, encoding);
      } catch (err) {
        error = err;
      }
      callback(error);
    };
    HashBase.prototype._flush = function(callback) {
      var error = null;
      try {
        this.push(this.digest());
      } catch (err) {
        error = err;
      }
      callback(error);
    };
    HashBase.prototype.update = function(data, encoding) {
      throwIfNotStringOrBuffer(data, "Data");
      if (this._finalized)
        throw new Error("Digest already called");
      if (!Buffer2.isBuffer(data))
        data = Buffer2.from(data, encoding);
      var block = this._block;
      var offset = 0;
      while (this._blockOffset + data.length - offset >= this._blockSize) {
        for (var i = this._blockOffset; i < this._blockSize; )
          block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
      }
      while (offset < data.length)
        block[this._blockOffset++] = data[offset++];
      for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
        this._length[j] += carry;
        carry = this._length[j] / 4294967296 | 0;
        if (carry > 0)
          this._length[j] -= 4294967296 * carry;
      }
      return this;
    };
    HashBase.prototype._update = function() {
      throw new Error("_update is not implemented");
    };
    HashBase.prototype.digest = function(encoding) {
      if (this._finalized)
        throw new Error("Digest already called");
      this._finalized = true;
      var digest = this._digest();
      if (encoding !== void 0)
        digest = digest.toString(encoding);
      this._block.fill(0);
      this._blockOffset = 0;
      for (var i = 0; i < 4; ++i)
        this._length[i] = 0;
      return digest;
    };
    HashBase.prototype._digest = function() {
      throw new Error("_digest is not implemented");
    };
    module.exports = HashBase;
  }
});

// node_modules/.pnpm/md5.js@1.3.5/node_modules/md5.js/index.js
var require_md5 = __commonJS({
  "node_modules/.pnpm/md5.js@1.3.5/node_modules/md5.js/index.js"(exports, module) {
    "use strict";
    init_shim();
    var inherits2 = require_inherits_browser();
    var HashBase = require_hash_base();
    var Buffer2 = require_safe_buffer().Buffer;
    var ARRAY16 = new Array(16);
    function MD5() {
      HashBase.call(this, 64);
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
    }
    inherits2(MD5, HashBase);
    MD5.prototype._update = function() {
      var M = ARRAY16;
      for (var i = 0; i < 16; ++i)
        M[i] = this._block.readInt32LE(i * 4);
      var a = this._a;
      var b = this._b;
      var c = this._c;
      var d = this._d;
      a = fnF(a, b, c, d, M[0], 3614090360, 7);
      d = fnF(d, a, b, c, M[1], 3905402710, 12);
      c = fnF(c, d, a, b, M[2], 606105819, 17);
      b = fnF(b, c, d, a, M[3], 3250441966, 22);
      a = fnF(a, b, c, d, M[4], 4118548399, 7);
      d = fnF(d, a, b, c, M[5], 1200080426, 12);
      c = fnF(c, d, a, b, M[6], 2821735955, 17);
      b = fnF(b, c, d, a, M[7], 4249261313, 22);
      a = fnF(a, b, c, d, M[8], 1770035416, 7);
      d = fnF(d, a, b, c, M[9], 2336552879, 12);
      c = fnF(c, d, a, b, M[10], 4294925233, 17);
      b = fnF(b, c, d, a, M[11], 2304563134, 22);
      a = fnF(a, b, c, d, M[12], 1804603682, 7);
      d = fnF(d, a, b, c, M[13], 4254626195, 12);
      c = fnF(c, d, a, b, M[14], 2792965006, 17);
      b = fnF(b, c, d, a, M[15], 1236535329, 22);
      a = fnG(a, b, c, d, M[1], 4129170786, 5);
      d = fnG(d, a, b, c, M[6], 3225465664, 9);
      c = fnG(c, d, a, b, M[11], 643717713, 14);
      b = fnG(b, c, d, a, M[0], 3921069994, 20);
      a = fnG(a, b, c, d, M[5], 3593408605, 5);
      d = fnG(d, a, b, c, M[10], 38016083, 9);
      c = fnG(c, d, a, b, M[15], 3634488961, 14);
      b = fnG(b, c, d, a, M[4], 3889429448, 20);
      a = fnG(a, b, c, d, M[9], 568446438, 5);
      d = fnG(d, a, b, c, M[14], 3275163606, 9);
      c = fnG(c, d, a, b, M[3], 4107603335, 14);
      b = fnG(b, c, d, a, M[8], 1163531501, 20);
      a = fnG(a, b, c, d, M[13], 2850285829, 5);
      d = fnG(d, a, b, c, M[2], 4243563512, 9);
      c = fnG(c, d, a, b, M[7], 1735328473, 14);
      b = fnG(b, c, d, a, M[12], 2368359562, 20);
      a = fnH(a, b, c, d, M[5], 4294588738, 4);
      d = fnH(d, a, b, c, M[8], 2272392833, 11);
      c = fnH(c, d, a, b, M[11], 1839030562, 16);
      b = fnH(b, c, d, a, M[14], 4259657740, 23);
      a = fnH(a, b, c, d, M[1], 2763975236, 4);
      d = fnH(d, a, b, c, M[4], 1272893353, 11);
      c = fnH(c, d, a, b, M[7], 4139469664, 16);
      b = fnH(b, c, d, a, M[10], 3200236656, 23);
      a = fnH(a, b, c, d, M[13], 681279174, 4);
      d = fnH(d, a, b, c, M[0], 3936430074, 11);
      c = fnH(c, d, a, b, M[3], 3572445317, 16);
      b = fnH(b, c, d, a, M[6], 76029189, 23);
      a = fnH(a, b, c, d, M[9], 3654602809, 4);
      d = fnH(d, a, b, c, M[12], 3873151461, 11);
      c = fnH(c, d, a, b, M[15], 530742520, 16);
      b = fnH(b, c, d, a, M[2], 3299628645, 23);
      a = fnI(a, b, c, d, M[0], 4096336452, 6);
      d = fnI(d, a, b, c, M[7], 1126891415, 10);
      c = fnI(c, d, a, b, M[14], 2878612391, 15);
      b = fnI(b, c, d, a, M[5], 4237533241, 21);
      a = fnI(a, b, c, d, M[12], 1700485571, 6);
      d = fnI(d, a, b, c, M[3], 2399980690, 10);
      c = fnI(c, d, a, b, M[10], 4293915773, 15);
      b = fnI(b, c, d, a, M[1], 2240044497, 21);
      a = fnI(a, b, c, d, M[8], 1873313359, 6);
      d = fnI(d, a, b, c, M[15], 4264355552, 10);
      c = fnI(c, d, a, b, M[6], 2734768916, 15);
      b = fnI(b, c, d, a, M[13], 1309151649, 21);
      a = fnI(a, b, c, d, M[4], 4149444226, 6);
      d = fnI(d, a, b, c, M[11], 3174756917, 10);
      c = fnI(c, d, a, b, M[2], 718787259, 15);
      b = fnI(b, c, d, a, M[9], 3951481745, 21);
      this._a = this._a + a | 0;
      this._b = this._b + b | 0;
      this._c = this._c + c | 0;
      this._d = this._d + d | 0;
    };
    MD5.prototype._digest = function() {
      this._block[this._blockOffset++] = 128;
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
      }
      this._block.fill(0, this._blockOffset, 56);
      this._block.writeUInt32LE(this._length[0], 56);
      this._block.writeUInt32LE(this._length[1], 60);
      this._update();
      var buffer = Buffer2.allocUnsafe(16);
      buffer.writeInt32LE(this._a, 0);
      buffer.writeInt32LE(this._b, 4);
      buffer.writeInt32LE(this._c, 8);
      buffer.writeInt32LE(this._d, 12);
      return buffer;
    };
    function rotl(x, n) {
      return x << n | x >>> 32 - n;
    }
    function fnF(a, b, c, d, m, k, s) {
      return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
    }
    function fnG(a, b, c, d, m, k, s) {
      return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
    }
    function fnH(a, b, c, d, m, k, s) {
      return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
    }
    function fnI(a, b, c, d, m, k, s) {
      return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
    }
    module.exports = MD5;
  }
});

// node_modules/.pnpm/ripemd160@2.0.2/node_modules/ripemd160/index.js
var require_ripemd160 = __commonJS({
  "node_modules/.pnpm/ripemd160@2.0.2/node_modules/ripemd160/index.js"(exports, module) {
    "use strict";
    init_shim();
    var Buffer2 = require_buffer().Buffer;
    var inherits2 = require_inherits_browser();
    var HashBase = require_hash_base();
    var ARRAY16 = new Array(16);
    var zl = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      7,
      4,
      13,
      1,
      10,
      6,
      15,
      3,
      12,
      0,
      9,
      5,
      2,
      14,
      11,
      8,
      3,
      10,
      14,
      4,
      9,
      15,
      8,
      1,
      2,
      7,
      0,
      6,
      13,
      11,
      5,
      12,
      1,
      9,
      11,
      10,
      0,
      8,
      12,
      4,
      13,
      3,
      7,
      15,
      14,
      5,
      6,
      2,
      4,
      0,
      5,
      9,
      7,
      12,
      2,
      10,
      14,
      1,
      3,
      8,
      11,
      6,
      15,
      13
    ];
    var zr = [
      5,
      14,
      7,
      0,
      9,
      2,
      11,
      4,
      13,
      6,
      15,
      8,
      1,
      10,
      3,
      12,
      6,
      11,
      3,
      7,
      0,
      13,
      5,
      10,
      14,
      15,
      8,
      12,
      4,
      9,
      1,
      2,
      15,
      5,
      1,
      3,
      7,
      14,
      6,
      9,
      11,
      8,
      12,
      2,
      10,
      0,
      4,
      13,
      8,
      6,
      4,
      1,
      3,
      11,
      15,
      0,
      5,
      12,
      2,
      13,
      9,
      7,
      10,
      14,
      12,
      15,
      10,
      4,
      1,
      5,
      8,
      7,
      6,
      2,
      13,
      14,
      0,
      3,
      9,
      11
    ];
    var sl = [
      11,
      14,
      15,
      12,
      5,
      8,
      7,
      9,
      11,
      13,
      14,
      15,
      6,
      7,
      9,
      8,
      7,
      6,
      8,
      13,
      11,
      9,
      7,
      15,
      7,
      12,
      15,
      9,
      11,
      7,
      13,
      12,
      11,
      13,
      6,
      7,
      14,
      9,
      13,
      15,
      14,
      8,
      13,
      6,
      5,
      12,
      7,
      5,
      11,
      12,
      14,
      15,
      14,
      15,
      9,
      8,
      9,
      14,
      5,
      6,
      8,
      6,
      5,
      12,
      9,
      15,
      5,
      11,
      6,
      8,
      13,
      12,
      5,
      12,
      13,
      14,
      11,
      8,
      5,
      6
    ];
    var sr = [
      8,
      9,
      9,
      11,
      13,
      15,
      15,
      5,
      7,
      7,
      8,
      11,
      14,
      14,
      12,
      6,
      9,
      13,
      15,
      7,
      12,
      8,
      9,
      11,
      7,
      7,
      12,
      7,
      6,
      15,
      13,
      11,
      9,
      7,
      15,
      11,
      8,
      6,
      6,
      14,
      12,
      13,
      5,
      14,
      13,
      13,
      7,
      5,
      15,
      5,
      8,
      11,
      14,
      14,
      6,
      14,
      6,
      9,
      12,
      9,
      12,
      5,
      15,
      8,
      8,
      5,
      12,
      9,
      12,
      5,
      14,
      6,
      8,
      13,
      6,
      5,
      15,
      13,
      11,
      11
    ];
    var hl = [0, 1518500249, 1859775393, 2400959708, 2840853838];
    var hr = [1352829926, 1548603684, 1836072691, 2053994217, 0];
    function RIPEMD160() {
      HashBase.call(this, 64);
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
      this._e = 3285377520;
    }
    inherits2(RIPEMD160, HashBase);
    RIPEMD160.prototype._update = function() {
      var words = ARRAY16;
      for (var j = 0; j < 16; ++j)
        words[j] = this._block.readInt32LE(j * 4);
      var al = this._a | 0;
      var bl = this._b | 0;
      var cl = this._c | 0;
      var dl = this._d | 0;
      var el = this._e | 0;
      var ar = this._a | 0;
      var br = this._b | 0;
      var cr = this._c | 0;
      var dr = this._d | 0;
      var er = this._e | 0;
      for (var i = 0; i < 80; i += 1) {
        var tl;
        var tr;
        if (i < 16) {
          tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
          tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
        } else if (i < 32) {
          tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
          tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
        } else if (i < 48) {
          tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
          tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
        } else if (i < 64) {
          tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
          tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
        } else {
          tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
          tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
        }
        al = el;
        el = dl;
        dl = rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar = er;
        er = dr;
        dr = rotl(cr, 10);
        cr = br;
        br = tr;
      }
      var t = this._b + cl + dr | 0;
      this._b = this._c + dl + er | 0;
      this._c = this._d + el + ar | 0;
      this._d = this._e + al + br | 0;
      this._e = this._a + bl + cr | 0;
      this._a = t;
    };
    RIPEMD160.prototype._digest = function() {
      this._block[this._blockOffset++] = 128;
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
      }
      this._block.fill(0, this._blockOffset, 56);
      this._block.writeUInt32LE(this._length[0], 56);
      this._block.writeUInt32LE(this._length[1], 60);
      this._update();
      var buffer = Buffer2.alloc ? Buffer2.alloc(20) : new Buffer2(20);
      buffer.writeInt32LE(this._a, 0);
      buffer.writeInt32LE(this._b, 4);
      buffer.writeInt32LE(this._c, 8);
      buffer.writeInt32LE(this._d, 12);
      buffer.writeInt32LE(this._e, 16);
      return buffer;
    };
    function rotl(x, n) {
      return x << n | x >>> 32 - n;
    }
    function fn1(a, b, c, d, e, m, k, s) {
      return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
    }
    function fn2(a, b, c, d, e, m, k, s) {
      return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
    }
    function fn3(a, b, c, d, e, m, k, s) {
      return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
    }
    function fn4(a, b, c, d, e, m, k, s) {
      return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
    }
    function fn5(a, b, c, d, e, m, k, s) {
      return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
    }
    module.exports = RIPEMD160;
  }
});

// node_modules/.pnpm/sha.js@2.4.11/node_modules/sha.js/hash.js
var require_hash = __commonJS({
  "node_modules/.pnpm/sha.js@2.4.11/node_modules/sha.js/hash.js"(exports, module) {
    init_shim();
    var Buffer2 = require_safe_buffer().Buffer;
    function Hash(blockSize, finalSize) {
      this._block = Buffer2.alloc(blockSize);
      this._finalSize = finalSize;
      this._blockSize = blockSize;
      this._len = 0;
    }
    Hash.prototype.update = function(data, enc) {
      if (typeof data === "string") {
        enc = enc || "utf8";
        data = Buffer2.from(data, enc);
      }
      var block = this._block;
      var blockSize = this._blockSize;
      var length = data.length;
      var accum = this._len;
      for (var offset = 0; offset < length; ) {
        var assigned = accum % blockSize;
        var remainder = Math.min(length - offset, blockSize - assigned);
        for (var i = 0; i < remainder; i++) {
          block[assigned + i] = data[offset + i];
        }
        accum += remainder;
        offset += remainder;
        if (accum % blockSize === 0) {
          this._update(block);
        }
      }
      this._len += length;
      return this;
    };
    Hash.prototype.digest = function(enc) {
      var rem = this._len % this._blockSize;
      this._block[rem] = 128;
      this._block.fill(0, rem + 1);
      if (rem >= this._finalSize) {
        this._update(this._block);
        this._block.fill(0);
      }
      var bits = this._len * 8;
      if (bits <= 4294967295) {
        this._block.writeUInt32BE(bits, this._blockSize - 4);
      } else {
        var lowBits = (bits & 4294967295) >>> 0;
        var highBits = (bits - lowBits) / 4294967296;
        this._block.writeUInt32BE(highBits, this._blockSize - 8);
        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
      }
      this._update(this._block);
      var hash = this._hash();
      return enc ? hash.toString(enc) : hash;
    };
    Hash.prototype._update = function() {
      throw new Error("_update must be implemented by subclass");
    };
    module.exports = Hash;
  }
});

// node_modules/.pnpm/sha.js@2.4.11/node_modules/sha.js/sha.js
var require_sha = __commonJS({
  "node_modules/.pnpm/sha.js@2.4.11/node_modules/sha.js/sha.js"(exports, module) {
    init_shim();
    var inherits2 = require_inherits_browser();
    var Hash = require_hash();
    var Buffer2 = require_safe_buffer().Buffer;
    var K = [
      1518500249,
      1859775393,
      2400959708 | 0,
      3395469782 | 0
    ];
    var W = new Array(80);
    function Sha() {
      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
    }
    inherits2(Sha, Hash);
    Sha.prototype.init = function() {
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
      this._e = 3285377520;
      return this;
    };
    function rotl5(num) {
      return num << 5 | num >>> 27;
    }
    function rotl30(num) {
      return num << 30 | num >>> 2;
    }
    function ft(s, b, c, d) {
      if (s === 0)
        return b & c | ~b & d;
      if (s === 2)
        return b & c | b & d | c & d;
      return b ^ c ^ d;
    }
    Sha.prototype._update = function(M) {
      var W2 = this._w;
      var a = this._a | 0;
      var b = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;
      for (var i = 0; i < 16; ++i)
        W2[i] = M.readInt32BE(i * 4);
      for (; i < 80; ++i)
        W2[i] = W2[i - 3] ^ W2[i - 8] ^ W2[i - 14] ^ W2[i - 16];
      for (var j = 0; j < 80; ++j) {
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W2[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
      }
      this._a = a + this._a | 0;
      this._b = b + this._b | 0;
      this._c = c + this._c | 0;
      this._d = d + this._d | 0;
      this._e = e + this._e | 0;
    };
    Sha.prototype._hash = function() {
      var H = Buffer2.allocUnsafe(20);
      H.writeInt32BE(this._a | 0, 0);
      H.writeInt32BE(this._b | 0, 4);
      H.writeInt32BE(this._c | 0, 8);
      H.writeInt32BE(this._d | 0, 12);
      H.writeInt32BE(this._e | 0, 16);
      return H;
    };
    module.exports = Sha;
  }
});

// node_modules/.pnpm/sha.js@2.4.11/node_modules/sha.js/sha1.js
var require_sha1 = __commonJS({
  "node_modules/.pnpm/sha.js@2.4.11/node_modules/sha.js/sha1.js"(exports, module) {
    init_shim();
    var inherits2 = require_inherits_browser();
    var Hash = require_hash();
    var Buffer2 = require_safe_buffer().Buffer;
    var K = [
      1518500249,
      1859775393,
      2400959708 | 0,
      3395469782 | 0
    ];
    var W = new Array(80);
    function Sha1() {
      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
    }
    inherits2(Sha1, Hash);
    Sha1.prototype.init = function() {
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
      this._e = 3285377520;
      return this;
    };
    function rotl1(num) {
      return num << 1 | num >>> 31;
    }
    function rotl5(num) {
      return num << 5 | num >>> 27;
    }
    function rotl30(num) {
      return num << 30 | num >>> 2;
    }
    function ft(s, b, c, d) {
      if (s === 0)
        return b & c | ~b & d;
      if (s === 2)
        return b & c | b & d | c & d;
      return b ^ c ^ d;
    }
    Sha1.prototype._update = function(M) {
      var W2 = this._w;
      var a = this._a | 0;
      var b = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;
      for (var i = 0; i < 16; ++i)
        W2[i] = M.readInt32BE(i * 4);
      for (; i < 80; ++i)
        W2[i] = rotl1(W2[i - 3] ^ W2[i - 8] ^ W2[i - 14] ^ W2[i - 16]);
      for (var j = 0; j < 80; ++j) {
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W2[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
      }
      this._a = a + this._a | 0;
      this._b = b + this._b | 0;
      this._c = c + this._c | 0;
      this._d = d + this._d | 0;
      this._e = e + this._e | 0;
    };
    Sha1.prototype._hash = function() {
      var H = Buffer2.allocUnsafe(20);
      H.writeInt32BE(this._a | 0, 0);
      H.writeInt32BE(this._b | 0, 4);
      H.writeInt32BE(this._c | 0, 8);
      H.writeInt32BE(this._d | 0, 12);
      H.writeInt32BE(this._e | 0, 16);
      return H;
    };
    module.exports = Sha1;
  }
});

// node_modules/.pnpm/sha.js@2.4.11/node_modules/sha.js/sha256.js
var require_sha256 = __commonJS({
  "node_modules/.pnpm/sha.js@2.4.11/node_modules/sha.js/sha256.js"(exports, module) {
    init_shim();
    var inherits2 = require_inherits_browser();
    var Hash = require_hash();
    var Buffer2 = require_safe_buffer().Buffer;
    var K = [
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ];
    var W = new Array(64);
    function Sha256() {
      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
    }
    inherits2(Sha256, Hash);
    Sha256.prototype.init = function() {
      this._a = 1779033703;
      this._b = 3144134277;
      this._c = 1013904242;
      this._d = 2773480762;
      this._e = 1359893119;
      this._f = 2600822924;
      this._g = 528734635;
      this._h = 1541459225;
      return this;
    };
    function ch(x, y, z) {
      return z ^ x & (y ^ z);
    }
    function maj(x, y, z) {
      return x & y | z & (x | y);
    }
    function sigma0(x) {
      return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
    }
    function sigma1(x) {
      return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
    }
    function gamma0(x) {
      return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
    }
    function gamma1(x) {
      return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
    }
    Sha256.prototype._update = function(M) {
      var W2 = this._w;
      var a = this._a | 0;
      var b = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;
      var f2 = this._f | 0;
      var g = this._g | 0;
      var h = this._h | 0;
      for (var i = 0; i < 16; ++i)
        W2[i] = M.readInt32BE(i * 4);
      for (; i < 64; ++i)
        W2[i] = gamma1(W2[i - 2]) + W2[i - 7] + gamma0(W2[i - 15]) + W2[i - 16] | 0;
      for (var j = 0; j < 64; ++j) {
        var T1 = h + sigma1(e) + ch(e, f2, g) + K[j] + W2[j] | 0;
        var T2 = sigma0(a) + maj(a, b, c) | 0;
        h = g;
        g = f2;
        f2 = e;
        e = d + T1 | 0;
        d = c;
        c = b;
        b = a;
        a = T1 + T2 | 0;
      }
      this._a = a + this._a | 0;
      this._b = b + this._b | 0;
      this._c = c + this._c | 0;
      this._d = d + this._d | 0;
      this._e = e + this._e | 0;
      this._f = f2 + this._f | 0;
      this._g = g + this._g | 0;
      this._h = h + this._h | 0;
    };
    Sha256.prototype._hash = function() {
      var H = Buffer2.allocUnsafe(32);
      H.writeInt32BE(this._a, 0);
      H.writeInt32BE(this._b, 4);
      H.writeInt32BE(this._c, 8);
      H.writeInt32BE(this._d, 12);
      H.writeInt32BE(this._e, 16);
      H.writeInt32BE(this._f, 20);
      H.writeInt32BE(this._g, 24);
      H.writeInt32BE(this._h, 28);
      return H;
    };
    module.exports = Sha256;
  }
});

// node_modules/.pnpm/sha.js@2.4.11/node_modules/sha.js/sha224.js
var require_sha224 = __commonJS({
  "node_modules/.pnpm/sha.js@2.4.11/node_modules/sha.js/sha224.js"(exports, module) {
    init_shim();
    var inherits2 = require_inherits_browser();
    var Sha256 = require_sha256();
    var Hash = require_hash();
    var Buffer2 = require_safe_buffer().Buffer;
    var W = new Array(64);
    function Sha224() {
      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
    }
    inherits2(Sha224, Sha256);
    Sha224.prototype.init = function() {
      this._a = 3238371032;
      this._b = 914150663;
      this._c = 812702999;
      this._d = 4144912697;
      this._e = 4290775857;
      this._f = 1750603025;
      this._g = 1694076839;
      this._h = 3204075428;
      return this;
    };
    Sha224.prototype._hash = function() {
      var H = Buffer2.allocUnsafe(28);
      H.writeInt32BE(this._a, 0);
      H.writeInt32BE(this._b, 4);
      H.writeInt32BE(this._c, 8);
      H.writeInt32BE(this._d, 12);
      H.writeInt32BE(this._e, 16);
      H.writeInt32BE(this._f, 20);
      H.writeInt32BE(this._g, 24);
      return H;
    };
    module.exports = Sha224;
  }
});

// node_modules/.pnpm/sha.js@2.4.11/node_modules/sha.js/sha512.js
var require_sha512 = __commonJS({
  "node_modules/.pnpm/sha.js@2.4.11/node_modules/sha.js/sha512.js"(exports, module) {
    init_shim();
    var inherits2 = require_inherits_browser();
    var Hash = require_hash();
    var Buffer2 = require_safe_buffer().Buffer;
    var K = [
      1116352408,
      3609767458,
      1899447441,
      602891725,
      3049323471,
      3964484399,
      3921009573,
      2173295548,
      961987163,
      4081628472,
      1508970993,
      3053834265,
      2453635748,
      2937671579,
      2870763221,
      3664609560,
      3624381080,
      2734883394,
      310598401,
      1164996542,
      607225278,
      1323610764,
      1426881987,
      3590304994,
      1925078388,
      4068182383,
      2162078206,
      991336113,
      2614888103,
      633803317,
      3248222580,
      3479774868,
      3835390401,
      2666613458,
      4022224774,
      944711139,
      264347078,
      2341262773,
      604807628,
      2007800933,
      770255983,
      1495990901,
      1249150122,
      1856431235,
      1555081692,
      3175218132,
      1996064986,
      2198950837,
      2554220882,
      3999719339,
      2821834349,
      766784016,
      2952996808,
      2566594879,
      3210313671,
      3203337956,
      3336571891,
      1034457026,
      3584528711,
      2466948901,
      113926993,
      3758326383,
      338241895,
      168717936,
      666307205,
      1188179964,
      773529912,
      1546045734,
      1294757372,
      1522805485,
      1396182291,
      2643833823,
      1695183700,
      2343527390,
      1986661051,
      1014477480,
      2177026350,
      1206759142,
      2456956037,
      344077627,
      2730485921,
      1290863460,
      2820302411,
      3158454273,
      3259730800,
      3505952657,
      3345764771,
      106217008,
      3516065817,
      3606008344,
      3600352804,
      1432725776,
      4094571909,
      1467031594,
      275423344,
      851169720,
      430227734,
      3100823752,
      506948616,
      1363258195,
      659060556,
      3750685593,
      883997877,
      3785050280,
      958139571,
      3318307427,
      1322822218,
      3812723403,
      1537002063,
      2003034995,
      1747873779,
      3602036899,
      1955562222,
      1575990012,
      2024104815,
      1125592928,
      2227730452,
      2716904306,
      2361852424,
      442776044,
      2428436474,
      593698344,
      2756734187,
      3733110249,
      3204031479,
      2999351573,
      3329325298,
      3815920427,
      3391569614,
      3928383900,
      3515267271,
      566280711,
      3940187606,
      3454069534,
      4118630271,
      4000239992,
      116418474,
      1914138554,
      174292421,
      2731055270,
      289380356,
      3203993006,
      460393269,
      320620315,
      685471733,
      587496836,
      852142971,
      1086792851,
      1017036298,
      365543100,
      1126000580,
      2618297676,
      1288033470,
      3409855158,
      1501505948,
      4234509866,
      1607167915,
      987167468,
      1816402316,
      1246189591
    ];
    var W = new Array(160);
    function Sha512() {
      this.init();
      this._w = W;
      Hash.call(this, 128, 112);
    }
    inherits2(Sha512, Hash);
    Sha512.prototype.init = function() {
      this._ah = 1779033703;
      this._bh = 3144134277;
      this._ch = 1013904242;
      this._dh = 2773480762;
      this._eh = 1359893119;
      this._fh = 2600822924;
      this._gh = 528734635;
      this._hh = 1541459225;
      this._al = 4089235720;
      this._bl = 2227873595;
      this._cl = 4271175723;
      this._dl = 1595750129;
      this._el = 2917565137;
      this._fl = 725511199;
      this._gl = 4215389547;
      this._hl = 327033209;
      return this;
    };
    function Ch(x, y, z) {
      return z ^ x & (y ^ z);
    }
    function maj(x, y, z) {
      return x & y | z & (x | y);
    }
    function sigma0(x, xl) {
      return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
    }
    function sigma1(x, xl) {
      return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
    }
    function Gamma0(x, xl) {
      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
    }
    function Gamma0l(x, xl) {
      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
    }
    function Gamma1(x, xl) {
      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
    }
    function Gamma1l(x, xl) {
      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
    }
    function getCarry(a, b) {
      return a >>> 0 < b >>> 0 ? 1 : 0;
    }
    Sha512.prototype._update = function(M) {
      var W2 = this._w;
      var ah = this._ah | 0;
      var bh = this._bh | 0;
      var ch = this._ch | 0;
      var dh = this._dh | 0;
      var eh = this._eh | 0;
      var fh = this._fh | 0;
      var gh = this._gh | 0;
      var hh = this._hh | 0;
      var al = this._al | 0;
      var bl = this._bl | 0;
      var cl = this._cl | 0;
      var dl = this._dl | 0;
      var el = this._el | 0;
      var fl = this._fl | 0;
      var gl = this._gl | 0;
      var hl = this._hl | 0;
      for (var i = 0; i < 32; i += 2) {
        W2[i] = M.readInt32BE(i * 4);
        W2[i + 1] = M.readInt32BE(i * 4 + 4);
      }
      for (; i < 160; i += 2) {
        var xh = W2[i - 15 * 2];
        var xl = W2[i - 15 * 2 + 1];
        var gamma0 = Gamma0(xh, xl);
        var gamma0l = Gamma0l(xl, xh);
        xh = W2[i - 2 * 2];
        xl = W2[i - 2 * 2 + 1];
        var gamma1 = Gamma1(xh, xl);
        var gamma1l = Gamma1l(xl, xh);
        var Wi7h = W2[i - 7 * 2];
        var Wi7l = W2[i - 7 * 2 + 1];
        var Wi16h = W2[i - 16 * 2];
        var Wi16l = W2[i - 16 * 2 + 1];
        var Wil = gamma0l + Wi7l | 0;
        var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
        Wil = Wil + gamma1l | 0;
        Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
        Wil = Wil + Wi16l | 0;
        Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
        W2[i] = Wih;
        W2[i + 1] = Wil;
      }
      for (var j = 0; j < 160; j += 2) {
        Wih = W2[j];
        Wil = W2[j + 1];
        var majh = maj(ah, bh, ch);
        var majl = maj(al, bl, cl);
        var sigma0h = sigma0(ah, al);
        var sigma0l = sigma0(al, ah);
        var sigma1h = sigma1(eh, el);
        var sigma1l = sigma1(el, eh);
        var Kih = K[j];
        var Kil = K[j + 1];
        var chh = Ch(eh, fh, gh);
        var chl = Ch(el, fl, gl);
        var t1l = hl + sigma1l | 0;
        var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
        t1l = t1l + chl | 0;
        t1h = t1h + chh + getCarry(t1l, chl) | 0;
        t1l = t1l + Kil | 0;
        t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
        t1l = t1l + Wil | 0;
        t1h = t1h + Wih + getCarry(t1l, Wil) | 0;
        var t2l = sigma0l + majl | 0;
        var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        el = dl + t1l | 0;
        eh = dh + t1h + getCarry(el, dl) | 0;
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        al = t1l + t2l | 0;
        ah = t1h + t2h + getCarry(al, t1l) | 0;
      }
      this._al = this._al + al | 0;
      this._bl = this._bl + bl | 0;
      this._cl = this._cl + cl | 0;
      this._dl = this._dl + dl | 0;
      this._el = this._el + el | 0;
      this._fl = this._fl + fl | 0;
      this._gl = this._gl + gl | 0;
      this._hl = this._hl + hl | 0;
      this._ah = this._ah + ah + getCarry(this._al, al) | 0;
      this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
      this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
      this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
      this._eh = this._eh + eh + getCarry(this._el, el) | 0;
      this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
      this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
      this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
    };
    Sha512.prototype._hash = function() {
      var H = Buffer2.allocUnsafe(64);
      function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
      }
      writeInt64BE(this._ah, this._al, 0);
      writeInt64BE(this._bh, this._bl, 8);
      writeInt64BE(this._ch, this._cl, 16);
      writeInt64BE(this._dh, this._dl, 24);
      writeInt64BE(this._eh, this._el, 32);
      writeInt64BE(this._fh, this._fl, 40);
      writeInt64BE(this._gh, this._gl, 48);
      writeInt64BE(this._hh, this._hl, 56);
      return H;
    };
    module.exports = Sha512;
  }
});

// node_modules/.pnpm/sha.js@2.4.11/node_modules/sha.js/sha384.js
var require_sha384 = __commonJS({
  "node_modules/.pnpm/sha.js@2.4.11/node_modules/sha.js/sha384.js"(exports, module) {
    init_shim();
    var inherits2 = require_inherits_browser();
    var SHA512 = require_sha512();
    var Hash = require_hash();
    var Buffer2 = require_safe_buffer().Buffer;
    var W = new Array(160);
    function Sha384() {
      this.init();
      this._w = W;
      Hash.call(this, 128, 112);
    }
    inherits2(Sha384, SHA512);
    Sha384.prototype.init = function() {
      this._ah = 3418070365;
      this._bh = 1654270250;
      this._ch = 2438529370;
      this._dh = 355462360;
      this._eh = 1731405415;
      this._fh = 2394180231;
      this._gh = 3675008525;
      this._hh = 1203062813;
      this._al = 3238371032;
      this._bl = 914150663;
      this._cl = 812702999;
      this._dl = 4144912697;
      this._el = 4290775857;
      this._fl = 1750603025;
      this._gl = 1694076839;
      this._hl = 3204075428;
      return this;
    };
    Sha384.prototype._hash = function() {
      var H = Buffer2.allocUnsafe(48);
      function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
      }
      writeInt64BE(this._ah, this._al, 0);
      writeInt64BE(this._bh, this._bl, 8);
      writeInt64BE(this._ch, this._cl, 16);
      writeInt64BE(this._dh, this._dl, 24);
      writeInt64BE(this._eh, this._el, 32);
      writeInt64BE(this._fh, this._fl, 40);
      return H;
    };
    module.exports = Sha384;
  }
});

// node_modules/.pnpm/sha.js@2.4.11/node_modules/sha.js/index.js
var require_sha2 = __commonJS({
  "node_modules/.pnpm/sha.js@2.4.11/node_modules/sha.js/index.js"(exports, module) {
    init_shim();
    var exports = module.exports = function SHA(algorithm) {
      algorithm = algorithm.toLowerCase();
      var Algorithm = exports[algorithm];
      if (!Algorithm)
        throw new Error(algorithm + " is not supported (we accept pull requests)");
      return new Algorithm();
    };
    exports.sha = require_sha();
    exports.sha1 = require_sha1();
    exports.sha224 = require_sha224();
    exports.sha256 = require_sha256();
    exports.sha384 = require_sha384();
    exports.sha512 = require_sha512();
  }
});

// node_modules/.pnpm/stream-browserify@3.0.0/node_modules/stream-browserify/index.js
var require_stream_browserify = __commonJS({
  "node_modules/.pnpm/stream-browserify@3.0.0/node_modules/stream-browserify/index.js"(exports, module) {
    init_shim();
    module.exports = Stream;
    var EE = require_events().EventEmitter;
    var inherits2 = require_inherits_browser();
    inherits2(Stream, EE);
    Stream.Readable = require_stream_readable();
    Stream.Writable = require_stream_writable();
    Stream.Duplex = require_stream_duplex();
    Stream.Transform = require_stream_transform();
    Stream.PassThrough = require_stream_passthrough();
    Stream.finished = require_end_of_stream();
    Stream.pipeline = require_pipeline();
    Stream.Stream = Stream;
    function Stream() {
      EE.call(this);
    }
    Stream.prototype.pipe = function(dest, options) {
      var source = this;
      function ondata(chunk) {
        if (dest.writable) {
          if (false === dest.write(chunk) && source.pause) {
            source.pause();
          }
        }
      }
      source.on("data", ondata);
      function ondrain() {
        if (source.readable && source.resume) {
          source.resume();
        }
      }
      dest.on("drain", ondrain);
      if (!dest._isStdio && (!options || options.end !== false)) {
        source.on("end", onend);
        source.on("close", onclose);
      }
      var didOnEnd = false;
      function onend() {
        if (didOnEnd)
          return;
        didOnEnd = true;
        dest.end();
      }
      function onclose() {
        if (didOnEnd)
          return;
        didOnEnd = true;
        if (typeof dest.destroy === "function")
          dest.destroy();
      }
      function onerror(er) {
        cleanup();
        if (EE.listenerCount(this, "error") === 0) {
          throw er;
        }
      }
      source.on("error", onerror);
      dest.on("error", onerror);
      function cleanup() {
        source.removeListener("data", ondata);
        dest.removeListener("drain", ondrain);
        source.removeListener("end", onend);
        source.removeListener("close", onclose);
        source.removeListener("error", onerror);
        dest.removeListener("error", onerror);
        source.removeListener("end", cleanup);
        source.removeListener("close", cleanup);
        dest.removeListener("close", cleanup);
      }
      source.on("end", cleanup);
      source.on("close", cleanup);
      dest.on("close", cleanup);
      dest.emit("pipe", source);
      return dest;
    };
  }
});

// node_modules/.pnpm/cipher-base@1.0.4/node_modules/cipher-base/index.js
var require_cipher_base = __commonJS({
  "node_modules/.pnpm/cipher-base@1.0.4/node_modules/cipher-base/index.js"(exports, module) {
    init_shim();
    var Buffer2 = require_safe_buffer().Buffer;
    var Transform = require_stream_browserify().Transform;
    var StringDecoder = require_string_decoder().StringDecoder;
    var inherits2 = require_inherits_browser();
    function CipherBase(hashMode) {
      Transform.call(this);
      this.hashMode = typeof hashMode === "string";
      if (this.hashMode) {
        this[hashMode] = this._finalOrDigest;
      } else {
        this.final = this._finalOrDigest;
      }
      if (this._final) {
        this.__final = this._final;
        this._final = null;
      }
      this._decoder = null;
      this._encoding = null;
    }
    inherits2(CipherBase, Transform);
    CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
      if (typeof data === "string") {
        data = Buffer2.from(data, inputEnc);
      }
      var outData = this._update(data);
      if (this.hashMode)
        return this;
      if (outputEnc) {
        outData = this._toString(outData, outputEnc);
      }
      return outData;
    };
    CipherBase.prototype.setAutoPadding = function() {
    };
    CipherBase.prototype.getAuthTag = function() {
      throw new Error("trying to get auth tag in unsupported state");
    };
    CipherBase.prototype.setAuthTag = function() {
      throw new Error("trying to set auth tag in unsupported state");
    };
    CipherBase.prototype.setAAD = function() {
      throw new Error("trying to set aad in unsupported state");
    };
    CipherBase.prototype._transform = function(data, _, next) {
      var err;
      try {
        if (this.hashMode) {
          this._update(data);
        } else {
          this.push(this._update(data));
        }
      } catch (e) {
        err = e;
      } finally {
        next(err);
      }
    };
    CipherBase.prototype._flush = function(done) {
      var err;
      try {
        this.push(this.__final());
      } catch (e) {
        err = e;
      }
      done(err);
    };
    CipherBase.prototype._finalOrDigest = function(outputEnc) {
      var outData = this.__final() || Buffer2.alloc(0);
      if (outputEnc) {
        outData = this._toString(outData, outputEnc, true);
      }
      return outData;
    };
    CipherBase.prototype._toString = function(value, enc, fin) {
      if (!this._decoder) {
        this._decoder = new StringDecoder(enc);
        this._encoding = enc;
      }
      if (this._encoding !== enc)
        throw new Error("can't switch encodings");
      var out = this._decoder.write(value);
      if (fin) {
        out += this._decoder.end();
      }
      return out;
    };
    module.exports = CipherBase;
  }
});

// node_modules/.pnpm/create-hash@1.2.0/node_modules/create-hash/browser.js
var require_browser3 = __commonJS({
  "node_modules/.pnpm/create-hash@1.2.0/node_modules/create-hash/browser.js"(exports, module) {
    "use strict";
    init_shim();
    var inherits2 = require_inherits_browser();
    var MD5 = require_md5();
    var RIPEMD160 = require_ripemd160();
    var sha = require_sha2();
    var Base = require_cipher_base();
    function Hash(hash) {
      Base.call(this, "digest");
      this._hash = hash;
    }
    inherits2(Hash, Base);
    Hash.prototype._update = function(data) {
      this._hash.update(data);
    };
    Hash.prototype._final = function() {
      return this._hash.digest();
    };
    module.exports = function createHash(alg) {
      alg = alg.toLowerCase();
      if (alg === "md5")
        return new MD5();
      if (alg === "rmd160" || alg === "ripemd160")
        return new RIPEMD160();
      return new Hash(sha(alg));
    };
  }
});

// node_modules/.pnpm/create-hmac@1.1.7/node_modules/create-hmac/legacy.js
var require_legacy = __commonJS({
  "node_modules/.pnpm/create-hmac@1.1.7/node_modules/create-hmac/legacy.js"(exports, module) {
    "use strict";
    init_shim();
    var inherits2 = require_inherits_browser();
    var Buffer2 = require_safe_buffer().Buffer;
    var Base = require_cipher_base();
    var ZEROS = Buffer2.alloc(128);
    var blocksize = 64;
    function Hmac(alg, key) {
      Base.call(this, "digest");
      if (typeof key === "string") {
        key = Buffer2.from(key);
      }
      this._alg = alg;
      this._key = key;
      if (key.length > blocksize) {
        key = alg(key);
      } else if (key.length < blocksize) {
        key = Buffer2.concat([key, ZEROS], blocksize);
      }
      var ipad = this._ipad = Buffer2.allocUnsafe(blocksize);
      var opad = this._opad = Buffer2.allocUnsafe(blocksize);
      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 54;
        opad[i] = key[i] ^ 92;
      }
      this._hash = [ipad];
    }
    inherits2(Hmac, Base);
    Hmac.prototype._update = function(data) {
      this._hash.push(data);
    };
    Hmac.prototype._final = function() {
      var h = this._alg(Buffer2.concat(this._hash));
      return this._alg(Buffer2.concat([this._opad, h]));
    };
    module.exports = Hmac;
  }
});

// node_modules/.pnpm/create-hash@1.2.0/node_modules/create-hash/md5.js
var require_md52 = __commonJS({
  "node_modules/.pnpm/create-hash@1.2.0/node_modules/create-hash/md5.js"(exports, module) {
    init_shim();
    var MD5 = require_md5();
    module.exports = function(buffer) {
      return new MD5().update(buffer).digest();
    };
  }
});

// node_modules/.pnpm/create-hmac@1.1.7/node_modules/create-hmac/browser.js
var require_browser4 = __commonJS({
  "node_modules/.pnpm/create-hmac@1.1.7/node_modules/create-hmac/browser.js"(exports, module) {
    "use strict";
    init_shim();
    var inherits2 = require_inherits_browser();
    var Legacy = require_legacy();
    var Base = require_cipher_base();
    var Buffer2 = require_safe_buffer().Buffer;
    var md52 = require_md52();
    var RIPEMD160 = require_ripemd160();
    var sha = require_sha2();
    var ZEROS = Buffer2.alloc(128);
    function Hmac(alg, key) {
      Base.call(this, "digest");
      if (typeof key === "string") {
        key = Buffer2.from(key);
      }
      var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
      this._alg = alg;
      this._key = key;
      if (key.length > blocksize) {
        var hash = alg === "rmd160" ? new RIPEMD160() : sha(alg);
        key = hash.update(key).digest();
      } else if (key.length < blocksize) {
        key = Buffer2.concat([key, ZEROS], blocksize);
      }
      var ipad = this._ipad = Buffer2.allocUnsafe(blocksize);
      var opad = this._opad = Buffer2.allocUnsafe(blocksize);
      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 54;
        opad[i] = key[i] ^ 92;
      }
      this._hash = alg === "rmd160" ? new RIPEMD160() : sha(alg);
      this._hash.update(ipad);
    }
    inherits2(Hmac, Base);
    Hmac.prototype._update = function(data) {
      this._hash.update(data);
    };
    Hmac.prototype._final = function() {
      var h = this._hash.digest();
      var hash = this._alg === "rmd160" ? new RIPEMD160() : sha(this._alg);
      return hash.update(this._opad).update(h).digest();
    };
    module.exports = function createHmac(alg, key) {
      alg = alg.toLowerCase();
      if (alg === "rmd160" || alg === "ripemd160") {
        return new Hmac("rmd160", key);
      }
      if (alg === "md5") {
        return new Legacy(md52, key);
      }
      return new Hmac(alg, key);
    };
  }
});

// node_modules/.pnpm/browserify-sign@4.2.1/node_modules/browserify-sign/browser/algorithms.json
var require_algorithms = __commonJS({
  "node_modules/.pnpm/browserify-sign@4.2.1/node_modules/browserify-sign/browser/algorithms.json"(exports, module) {
    module.exports = {
      sha224WithRSAEncryption: {
        sign: "rsa",
        hash: "sha224",
        id: "302d300d06096086480165030402040500041c"
      },
      "RSA-SHA224": {
        sign: "ecdsa/rsa",
        hash: "sha224",
        id: "302d300d06096086480165030402040500041c"
      },
      sha256WithRSAEncryption: {
        sign: "rsa",
        hash: "sha256",
        id: "3031300d060960864801650304020105000420"
      },
      "RSA-SHA256": {
        sign: "ecdsa/rsa",
        hash: "sha256",
        id: "3031300d060960864801650304020105000420"
      },
      sha384WithRSAEncryption: {
        sign: "rsa",
        hash: "sha384",
        id: "3041300d060960864801650304020205000430"
      },
      "RSA-SHA384": {
        sign: "ecdsa/rsa",
        hash: "sha384",
        id: "3041300d060960864801650304020205000430"
      },
      sha512WithRSAEncryption: {
        sign: "rsa",
        hash: "sha512",
        id: "3051300d060960864801650304020305000440"
      },
      "RSA-SHA512": {
        sign: "ecdsa/rsa",
        hash: "sha512",
        id: "3051300d060960864801650304020305000440"
      },
      "RSA-SHA1": {
        sign: "rsa",
        hash: "sha1",
        id: "3021300906052b0e03021a05000414"
      },
      "ecdsa-with-SHA1": {
        sign: "ecdsa",
        hash: "sha1",
        id: ""
      },
      sha256: {
        sign: "ecdsa",
        hash: "sha256",
        id: ""
      },
      sha224: {
        sign: "ecdsa",
        hash: "sha224",
        id: ""
      },
      sha384: {
        sign: "ecdsa",
        hash: "sha384",
        id: ""
      },
      sha512: {
        sign: "ecdsa",
        hash: "sha512",
        id: ""
      },
      "DSA-SHA": {
        sign: "dsa",
        hash: "sha1",
        id: ""
      },
      "DSA-SHA1": {
        sign: "dsa",
        hash: "sha1",
        id: ""
      },
      DSA: {
        sign: "dsa",
        hash: "sha1",
        id: ""
      },
      "DSA-WITH-SHA224": {
        sign: "dsa",
        hash: "sha224",
        id: ""
      },
      "DSA-SHA224": {
        sign: "dsa",
        hash: "sha224",
        id: ""
      },
      "DSA-WITH-SHA256": {
        sign: "dsa",
        hash: "sha256",
        id: ""
      },
      "DSA-SHA256": {
        sign: "dsa",
        hash: "sha256",
        id: ""
      },
      "DSA-WITH-SHA384": {
        sign: "dsa",
        hash: "sha384",
        id: ""
      },
      "DSA-SHA384": {
        sign: "dsa",
        hash: "sha384",
        id: ""
      },
      "DSA-WITH-SHA512": {
        sign: "dsa",
        hash: "sha512",
        id: ""
      },
      "DSA-SHA512": {
        sign: "dsa",
        hash: "sha512",
        id: ""
      },
      "DSA-RIPEMD160": {
        sign: "dsa",
        hash: "rmd160",
        id: ""
      },
      ripemd160WithRSA: {
        sign: "rsa",
        hash: "rmd160",
        id: "3021300906052b2403020105000414"
      },
      "RSA-RIPEMD160": {
        sign: "rsa",
        hash: "rmd160",
        id: "3021300906052b2403020105000414"
      },
      md5WithRSAEncryption: {
        sign: "rsa",
        hash: "md5",
        id: "3020300c06082a864886f70d020505000410"
      },
      "RSA-MD5": {
        sign: "rsa",
        hash: "md5",
        id: "3020300c06082a864886f70d020505000410"
      }
    };
  }
});

// node_modules/.pnpm/browserify-sign@4.2.1/node_modules/browserify-sign/algos.js
var require_algos = __commonJS({
  "node_modules/.pnpm/browserify-sign@4.2.1/node_modules/browserify-sign/algos.js"(exports, module) {
    init_shim();
    module.exports = require_algorithms();
  }
});

// node_modules/.pnpm/pbkdf2@3.1.2/node_modules/pbkdf2/lib/precondition.js
var require_precondition = __commonJS({
  "node_modules/.pnpm/pbkdf2@3.1.2/node_modules/pbkdf2/lib/precondition.js"(exports, module) {
    init_shim();
    var MAX_ALLOC = Math.pow(2, 30) - 1;
    module.exports = function(iterations, keylen) {
      if (typeof iterations !== "number") {
        throw new TypeError("Iterations not a number");
      }
      if (iterations < 0) {
        throw new TypeError("Bad iterations");
      }
      if (typeof keylen !== "number") {
        throw new TypeError("Key length not a number");
      }
      if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
        throw new TypeError("Bad key length");
      }
    };
  }
});

// node_modules/.pnpm/pbkdf2@3.1.2/node_modules/pbkdf2/lib/default-encoding.js
var require_default_encoding = __commonJS({
  "node_modules/.pnpm/pbkdf2@3.1.2/node_modules/pbkdf2/lib/default-encoding.js"(exports, module) {
    init_shim();
    var defaultEncoding;
    if (_global.process && _global.process.browser) {
      defaultEncoding = "utf-8";
    } else if (_global.process && _global.process.version) {
      pVersionMajor = parseInt(import_process.default.version.split(".")[0].slice(1), 10);
      defaultEncoding = pVersionMajor >= 6 ? "utf-8" : "binary";
    } else {
      defaultEncoding = "utf-8";
    }
    var pVersionMajor;
    module.exports = defaultEncoding;
  }
});

// node_modules/.pnpm/pbkdf2@3.1.2/node_modules/pbkdf2/lib/to-buffer.js
var require_to_buffer = __commonJS({
  "node_modules/.pnpm/pbkdf2@3.1.2/node_modules/pbkdf2/lib/to-buffer.js"(exports, module) {
    init_shim();
    var Buffer2 = require_safe_buffer().Buffer;
    module.exports = function(thing, encoding, name) {
      if (Buffer2.isBuffer(thing)) {
        return thing;
      } else if (typeof thing === "string") {
        return Buffer2.from(thing, encoding);
      } else if (ArrayBuffer.isView(thing)) {
        return Buffer2.from(thing.buffer);
      } else {
        throw new TypeError(name + " must be a string, a Buffer, a typed array or a DataView");
      }
    };
  }
});

// node_modules/.pnpm/pbkdf2@3.1.2/node_modules/pbkdf2/lib/sync-browser.js
var require_sync_browser = __commonJS({
  "node_modules/.pnpm/pbkdf2@3.1.2/node_modules/pbkdf2/lib/sync-browser.js"(exports, module) {
    init_shim();
    var md52 = require_md52();
    var RIPEMD160 = require_ripemd160();
    var sha = require_sha2();
    var Buffer2 = require_safe_buffer().Buffer;
    var checkParameters = require_precondition();
    var defaultEncoding = require_default_encoding();
    var toBuffer = require_to_buffer();
    var ZEROS = Buffer2.alloc(128);
    var sizes = {
      md5: 16,
      sha1: 20,
      sha224: 28,
      sha256: 32,
      sha384: 48,
      sha512: 64,
      rmd160: 20,
      ripemd160: 20
    };
    function Hmac(alg, key, saltLen) {
      var hash = getDigest(alg);
      var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
      if (key.length > blocksize) {
        key = hash(key);
      } else if (key.length < blocksize) {
        key = Buffer2.concat([key, ZEROS], blocksize);
      }
      var ipad = Buffer2.allocUnsafe(blocksize + sizes[alg]);
      var opad = Buffer2.allocUnsafe(blocksize + sizes[alg]);
      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 54;
        opad[i] = key[i] ^ 92;
      }
      var ipad1 = Buffer2.allocUnsafe(blocksize + saltLen + 4);
      ipad.copy(ipad1, 0, 0, blocksize);
      this.ipad1 = ipad1;
      this.ipad2 = ipad;
      this.opad = opad;
      this.alg = alg;
      this.blocksize = blocksize;
      this.hash = hash;
      this.size = sizes[alg];
    }
    Hmac.prototype.run = function(data, ipad) {
      data.copy(ipad, this.blocksize);
      var h = this.hash(ipad);
      h.copy(this.opad, this.blocksize);
      return this.hash(this.opad);
    };
    function getDigest(alg) {
      function shaFunc(data) {
        return sha(alg).update(data).digest();
      }
      function rmd160Func(data) {
        return new RIPEMD160().update(data).digest();
      }
      if (alg === "rmd160" || alg === "ripemd160")
        return rmd160Func;
      if (alg === "md5")
        return md52;
      return shaFunc;
    }
    function pbkdf2(password, salt, iterations, keylen, digest) {
      checkParameters(iterations, keylen);
      password = toBuffer(password, defaultEncoding, "Password");
      salt = toBuffer(salt, defaultEncoding, "Salt");
      digest = digest || "sha1";
      var hmac = new Hmac(digest, password, salt.length);
      var DK = Buffer2.allocUnsafe(keylen);
      var block1 = Buffer2.allocUnsafe(salt.length + 4);
      salt.copy(block1, 0, 0, salt.length);
      var destPos = 0;
      var hLen = sizes[digest];
      var l = Math.ceil(keylen / hLen);
      for (var i = 1; i <= l; i++) {
        block1.writeUInt32BE(i, salt.length);
        var T = hmac.run(block1, hmac.ipad1);
        var U = T;
        for (var j = 1; j < iterations; j++) {
          U = hmac.run(U, hmac.ipad2);
          for (var k = 0; k < hLen; k++)
            T[k] ^= U[k];
        }
        T.copy(DK, destPos);
        destPos += hLen;
      }
      return DK;
    }
    module.exports = pbkdf2;
  }
});

// node_modules/.pnpm/pbkdf2@3.1.2/node_modules/pbkdf2/lib/async.js
var require_async = __commonJS({
  "node_modules/.pnpm/pbkdf2@3.1.2/node_modules/pbkdf2/lib/async.js"(exports, module) {
    init_shim();
    var Buffer2 = require_safe_buffer().Buffer;
    var checkParameters = require_precondition();
    var defaultEncoding = require_default_encoding();
    var sync = require_sync_browser();
    var toBuffer = require_to_buffer();
    var ZERO_BUF;
    var subtle = _global.crypto && _global.crypto.subtle;
    var toBrowser = {
      sha: "SHA-1",
      "sha-1": "SHA-1",
      sha1: "SHA-1",
      sha256: "SHA-256",
      "sha-256": "SHA-256",
      sha384: "SHA-384",
      "sha-384": "SHA-384",
      "sha-512": "SHA-512",
      sha512: "SHA-512"
    };
    var checks = [];
    function checkNative(algo) {
      if (_global.process && !_global.process.browser) {
        return Promise.resolve(false);
      }
      if (!subtle || !subtle.importKey || !subtle.deriveBits) {
        return Promise.resolve(false);
      }
      if (checks[algo] !== void 0) {
        return checks[algo];
      }
      ZERO_BUF = ZERO_BUF || Buffer2.alloc(8);
      var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function() {
        return true;
      }).catch(function() {
        return false;
      });
      checks[algo] = prom;
      return prom;
    }
    var nextTick;
    function getNextTick() {
      if (nextTick) {
        return nextTick;
      }
      if (_global.process && _global.process.nextTick) {
        nextTick = _global.process.nextTick;
      } else if (_global.queueMicrotask) {
        nextTick = _global.queueMicrotask;
      } else if (_global.setImmediate) {
        nextTick = _global.setImmediate;
      } else {
        nextTick = _global.setTimeout;
      }
      return nextTick;
    }
    function browserPbkdf2(password, salt, iterations, length, algo) {
      return subtle.importKey(
        "raw",
        password,
        { name: "PBKDF2" },
        false,
        ["deriveBits"]
      ).then(function(key) {
        return subtle.deriveBits({
          name: "PBKDF2",
          salt,
          iterations,
          hash: {
            name: algo
          }
        }, key, length << 3);
      }).then(function(res) {
        return Buffer2.from(res);
      });
    }
    function resolvePromise(promise, callback) {
      promise.then(function(out) {
        getNextTick()(function() {
          callback(null, out);
        });
      }, function(e) {
        getNextTick()(function() {
          callback(e);
        });
      });
    }
    module.exports = function(password, salt, iterations, keylen, digest, callback) {
      if (typeof digest === "function") {
        callback = digest;
        digest = void 0;
      }
      digest = digest || "sha1";
      var algo = toBrowser[digest.toLowerCase()];
      if (!algo || typeof _global.Promise !== "function") {
        getNextTick()(function() {
          var out;
          try {
            out = sync(password, salt, iterations, keylen, digest);
          } catch (e) {
            return callback(e);
          }
          callback(null, out);
        });
        return;
      }
      checkParameters(iterations, keylen);
      password = toBuffer(password, defaultEncoding, "Password");
      salt = toBuffer(salt, defaultEncoding, "Salt");
      if (typeof callback !== "function")
        throw new Error("No callback provided to pbkdf2");
      resolvePromise(checkNative(algo).then(function(resp) {
        if (resp)
          return browserPbkdf2(password, salt, iterations, keylen, algo);
        return sync(password, salt, iterations, keylen, digest);
      }), callback);
    };
  }
});

// node_modules/.pnpm/pbkdf2@3.1.2/node_modules/pbkdf2/browser.js
var require_browser5 = __commonJS({
  "node_modules/.pnpm/pbkdf2@3.1.2/node_modules/pbkdf2/browser.js"(exports) {
    init_shim();
    exports.pbkdf2 = require_async();
    exports.pbkdf2Sync = require_sync_browser();
  }
});

// node_modules/.pnpm/des.js@1.0.1/node_modules/des.js/lib/des/utils.js
var require_utils = __commonJS({
  "node_modules/.pnpm/des.js@1.0.1/node_modules/des.js/lib/des/utils.js"(exports) {
    "use strict";
    init_shim();
    exports.readUInt32BE = function readUInt32BE(bytes, off) {
      var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
      return res >>> 0;
    };
    exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
      bytes[0 + off] = value >>> 24;
      bytes[1 + off] = value >>> 16 & 255;
      bytes[2 + off] = value >>> 8 & 255;
      bytes[3 + off] = value & 255;
    };
    exports.ip = function ip(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
      for (var i = 6; i >= 0; i -= 2) {
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inR >>> j + i & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inL >>> j + i & 1;
        }
      }
      for (var i = 6; i >= 0; i -= 2) {
        for (var j = 1; j <= 25; j += 8) {
          outR <<= 1;
          outR |= inR >>> j + i & 1;
        }
        for (var j = 1; j <= 25; j += 8) {
          outR <<= 1;
          outR |= inL >>> j + i & 1;
        }
      }
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    exports.rip = function rip(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
      for (var i = 0; i < 4; i++) {
        for (var j = 24; j >= 0; j -= 8) {
          outL <<= 1;
          outL |= inR >>> j + i & 1;
          outL <<= 1;
          outL |= inL >>> j + i & 1;
        }
      }
      for (var i = 4; i < 8; i++) {
        for (var j = 24; j >= 0; j -= 8) {
          outR <<= 1;
          outR |= inR >>> j + i & 1;
          outR <<= 1;
          outR |= inL >>> j + i & 1;
        }
      }
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    exports.pc1 = function pc1(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
      for (var i = 7; i >= 5; i--) {
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inR >> j + i & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inL >> j + i & 1;
        }
      }
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= inR >> j + i & 1;
      }
      for (var i = 1; i <= 3; i++) {
        for (var j = 0; j <= 24; j += 8) {
          outR <<= 1;
          outR |= inR >> j + i & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outR <<= 1;
          outR |= inL >> j + i & 1;
        }
      }
      for (var j = 0; j <= 24; j += 8) {
        outR <<= 1;
        outR |= inL >> j + i & 1;
      }
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    exports.r28shl = function r28shl(num, shift) {
      return num << shift & 268435455 | num >>> 28 - shift;
    };
    var pc2table = [
      14,
      11,
      17,
      4,
      27,
      23,
      25,
      0,
      13,
      22,
      7,
      18,
      5,
      9,
      16,
      24,
      2,
      20,
      12,
      21,
      1,
      8,
      15,
      26,
      15,
      4,
      25,
      19,
      9,
      1,
      26,
      16,
      5,
      11,
      23,
      8,
      12,
      7,
      17,
      0,
      22,
      3,
      10,
      14,
      6,
      20,
      27,
      24
    ];
    exports.pc2 = function pc2(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
      var len = pc2table.length >>> 1;
      for (var i = 0; i < len; i++) {
        outL <<= 1;
        outL |= inL >>> pc2table[i] & 1;
      }
      for (var i = len; i < pc2table.length; i++) {
        outR <<= 1;
        outR |= inR >>> pc2table[i] & 1;
      }
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    exports.expand = function expand(r, out, off) {
      var outL = 0;
      var outR = 0;
      outL = (r & 1) << 5 | r >>> 27;
      for (var i = 23; i >= 15; i -= 4) {
        outL <<= 6;
        outL |= r >>> i & 63;
      }
      for (var i = 11; i >= 3; i -= 4) {
        outR |= r >>> i & 63;
        outR <<= 6;
      }
      outR |= (r & 31) << 1 | r >>> 31;
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    var sTable = [
      14,
      0,
      4,
      15,
      13,
      7,
      1,
      4,
      2,
      14,
      15,
      2,
      11,
      13,
      8,
      1,
      3,
      10,
      10,
      6,
      6,
      12,
      12,
      11,
      5,
      9,
      9,
      5,
      0,
      3,
      7,
      8,
      4,
      15,
      1,
      12,
      14,
      8,
      8,
      2,
      13,
      4,
      6,
      9,
      2,
      1,
      11,
      7,
      15,
      5,
      12,
      11,
      9,
      3,
      7,
      14,
      3,
      10,
      10,
      0,
      5,
      6,
      0,
      13,
      15,
      3,
      1,
      13,
      8,
      4,
      14,
      7,
      6,
      15,
      11,
      2,
      3,
      8,
      4,
      14,
      9,
      12,
      7,
      0,
      2,
      1,
      13,
      10,
      12,
      6,
      0,
      9,
      5,
      11,
      10,
      5,
      0,
      13,
      14,
      8,
      7,
      10,
      11,
      1,
      10,
      3,
      4,
      15,
      13,
      4,
      1,
      2,
      5,
      11,
      8,
      6,
      12,
      7,
      6,
      12,
      9,
      0,
      3,
      5,
      2,
      14,
      15,
      9,
      10,
      13,
      0,
      7,
      9,
      0,
      14,
      9,
      6,
      3,
      3,
      4,
      15,
      6,
      5,
      10,
      1,
      2,
      13,
      8,
      12,
      5,
      7,
      14,
      11,
      12,
      4,
      11,
      2,
      15,
      8,
      1,
      13,
      1,
      6,
      10,
      4,
      13,
      9,
      0,
      8,
      6,
      15,
      9,
      3,
      8,
      0,
      7,
      11,
      4,
      1,
      15,
      2,
      14,
      12,
      3,
      5,
      11,
      10,
      5,
      14,
      2,
      7,
      12,
      7,
      13,
      13,
      8,
      14,
      11,
      3,
      5,
      0,
      6,
      6,
      15,
      9,
      0,
      10,
      3,
      1,
      4,
      2,
      7,
      8,
      2,
      5,
      12,
      11,
      1,
      12,
      10,
      4,
      14,
      15,
      9,
      10,
      3,
      6,
      15,
      9,
      0,
      0,
      6,
      12,
      10,
      11,
      1,
      7,
      13,
      13,
      8,
      15,
      9,
      1,
      4,
      3,
      5,
      14,
      11,
      5,
      12,
      2,
      7,
      8,
      2,
      4,
      14,
      2,
      14,
      12,
      11,
      4,
      2,
      1,
      12,
      7,
      4,
      10,
      7,
      11,
      13,
      6,
      1,
      8,
      5,
      5,
      0,
      3,
      15,
      15,
      10,
      13,
      3,
      0,
      9,
      14,
      8,
      9,
      6,
      4,
      11,
      2,
      8,
      1,
      12,
      11,
      7,
      10,
      1,
      13,
      14,
      7,
      2,
      8,
      13,
      15,
      6,
      9,
      15,
      12,
      0,
      5,
      9,
      6,
      10,
      3,
      4,
      0,
      5,
      14,
      3,
      12,
      10,
      1,
      15,
      10,
      4,
      15,
      2,
      9,
      7,
      2,
      12,
      6,
      9,
      8,
      5,
      0,
      6,
      13,
      1,
      3,
      13,
      4,
      14,
      14,
      0,
      7,
      11,
      5,
      3,
      11,
      8,
      9,
      4,
      14,
      3,
      15,
      2,
      5,
      12,
      2,
      9,
      8,
      5,
      12,
      15,
      3,
      10,
      7,
      11,
      0,
      14,
      4,
      1,
      10,
      7,
      1,
      6,
      13,
      0,
      11,
      8,
      6,
      13,
      4,
      13,
      11,
      0,
      2,
      11,
      14,
      7,
      15,
      4,
      0,
      9,
      8,
      1,
      13,
      10,
      3,
      14,
      12,
      3,
      9,
      5,
      7,
      12,
      5,
      2,
      10,
      15,
      6,
      8,
      1,
      6,
      1,
      6,
      4,
      11,
      11,
      13,
      13,
      8,
      12,
      1,
      3,
      4,
      7,
      10,
      14,
      7,
      10,
      9,
      15,
      5,
      6,
      0,
      8,
      15,
      0,
      14,
      5,
      2,
      9,
      3,
      2,
      12,
      13,
      1,
      2,
      15,
      8,
      13,
      4,
      8,
      6,
      10,
      15,
      3,
      11,
      7,
      1,
      4,
      10,
      12,
      9,
      5,
      3,
      6,
      14,
      11,
      5,
      0,
      0,
      14,
      12,
      9,
      7,
      2,
      7,
      2,
      11,
      1,
      4,
      14,
      1,
      7,
      9,
      4,
      12,
      10,
      14,
      8,
      2,
      13,
      0,
      15,
      6,
      12,
      10,
      9,
      13,
      0,
      15,
      3,
      3,
      5,
      5,
      6,
      8,
      11
    ];
    exports.substitute = function substitute(inL, inR) {
      var out = 0;
      for (var i = 0; i < 4; i++) {
        var b = inL >>> 18 - i * 6 & 63;
        var sb = sTable[i * 64 + b];
        out <<= 4;
        out |= sb;
      }
      for (var i = 0; i < 4; i++) {
        var b = inR >>> 18 - i * 6 & 63;
        var sb = sTable[4 * 64 + i * 64 + b];
        out <<= 4;
        out |= sb;
      }
      return out >>> 0;
    };
    var permuteTable = [
      16,
      25,
      12,
      11,
      3,
      20,
      4,
      15,
      31,
      17,
      9,
      6,
      27,
      14,
      1,
      22,
      30,
      24,
      8,
      18,
      0,
      5,
      29,
      23,
      13,
      19,
      2,
      26,
      10,
      21,
      28,
      7
    ];
    exports.permute = function permute(num) {
      var out = 0;
      for (var i = 0; i < permuteTable.length; i++) {
        out <<= 1;
        out |= num >>> permuteTable[i] & 1;
      }
      return out >>> 0;
    };
    exports.padSplit = function padSplit(num, size, group) {
      var str = num.toString(2);
      while (str.length < size)
        str = "0" + str;
      var out = [];
      for (var i = 0; i < size; i += group)
        out.push(str.slice(i, i + group));
      return out.join(" ");
    };
  }
});

// node_modules/.pnpm/minimalistic-assert@1.0.1/node_modules/minimalistic-assert/index.js
var require_minimalistic_assert = __commonJS({
  "node_modules/.pnpm/minimalistic-assert@1.0.1/node_modules/minimalistic-assert/index.js"(exports, module) {
    init_shim();
    module.exports = assert;
    function assert(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    assert.equal = function assertEqual(l, r, msg) {
      if (l != r)
        throw new Error(msg || "Assertion failed: " + l + " != " + r);
    };
  }
});

// node_modules/.pnpm/des.js@1.0.1/node_modules/des.js/lib/des/cipher.js
var require_cipher = __commonJS({
  "node_modules/.pnpm/des.js@1.0.1/node_modules/des.js/lib/des/cipher.js"(exports, module) {
    "use strict";
    init_shim();
    var assert = require_minimalistic_assert();
    function Cipher(options) {
      this.options = options;
      this.type = this.options.type;
      this.blockSize = 8;
      this._init();
      this.buffer = new Array(this.blockSize);
      this.bufferOff = 0;
    }
    module.exports = Cipher;
    Cipher.prototype._init = function _init() {
    };
    Cipher.prototype.update = function update(data) {
      if (data.length === 0)
        return [];
      if (this.type === "decrypt")
        return this._updateDecrypt(data);
      else
        return this._updateEncrypt(data);
    };
    Cipher.prototype._buffer = function _buffer(data, off) {
      var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
      for (var i = 0; i < min; i++)
        this.buffer[this.bufferOff + i] = data[off + i];
      this.bufferOff += min;
      return min;
    };
    Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
      this._update(this.buffer, 0, out, off);
      this.bufferOff = 0;
      return this.blockSize;
    };
    Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
      var inputOff = 0;
      var outputOff = 0;
      var count = (this.bufferOff + data.length) / this.blockSize | 0;
      var out = new Array(count * this.blockSize);
      if (this.bufferOff !== 0) {
        inputOff += this._buffer(data, inputOff);
        if (this.bufferOff === this.buffer.length)
          outputOff += this._flushBuffer(out, outputOff);
      }
      var max = data.length - (data.length - inputOff) % this.blockSize;
      for (; inputOff < max; inputOff += this.blockSize) {
        this._update(data, inputOff, out, outputOff);
        outputOff += this.blockSize;
      }
      for (; inputOff < data.length; inputOff++, this.bufferOff++)
        this.buffer[this.bufferOff] = data[inputOff];
      return out;
    };
    Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
      var inputOff = 0;
      var outputOff = 0;
      var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
      var out = new Array(count * this.blockSize);
      for (; count > 0; count--) {
        inputOff += this._buffer(data, inputOff);
        outputOff += this._flushBuffer(out, outputOff);
      }
      inputOff += this._buffer(data, inputOff);
      return out;
    };
    Cipher.prototype.final = function final(buffer) {
      var first;
      if (buffer)
        first = this.update(buffer);
      var last;
      if (this.type === "encrypt")
        last = this._finalEncrypt();
      else
        last = this._finalDecrypt();
      if (first)
        return first.concat(last);
      else
        return last;
    };
    Cipher.prototype._pad = function _pad(buffer, off) {
      if (off === 0)
        return false;
      while (off < buffer.length)
        buffer[off++] = 0;
      return true;
    };
    Cipher.prototype._finalEncrypt = function _finalEncrypt() {
      if (!this._pad(this.buffer, this.bufferOff))
        return [];
      var out = new Array(this.blockSize);
      this._update(this.buffer, 0, out, 0);
      return out;
    };
    Cipher.prototype._unpad = function _unpad(buffer) {
      return buffer;
    };
    Cipher.prototype._finalDecrypt = function _finalDecrypt() {
      assert.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
      var out = new Array(this.blockSize);
      this._flushBuffer(out, 0);
      return this._unpad(out);
    };
  }
});

// node_modules/.pnpm/des.js@1.0.1/node_modules/des.js/lib/des/des.js
var require_des = __commonJS({
  "node_modules/.pnpm/des.js@1.0.1/node_modules/des.js/lib/des/des.js"(exports, module) {
    "use strict";
    init_shim();
    var assert = require_minimalistic_assert();
    var inherits2 = require_inherits_browser();
    var utils = require_utils();
    var Cipher = require_cipher();
    function DESState() {
      this.tmp = new Array(2);
      this.keys = null;
    }
    function DES(options) {
      Cipher.call(this, options);
      var state = new DESState();
      this._desState = state;
      this.deriveKeys(state, options.key);
    }
    inherits2(DES, Cipher);
    module.exports = DES;
    DES.create = function create(options) {
      return new DES(options);
    };
    var shiftTable = [
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      1
    ];
    DES.prototype.deriveKeys = function deriveKeys(state, key) {
      state.keys = new Array(16 * 2);
      assert.equal(key.length, this.blockSize, "Invalid key length");
      var kL = utils.readUInt32BE(key, 0);
      var kR = utils.readUInt32BE(key, 4);
      utils.pc1(kL, kR, state.tmp, 0);
      kL = state.tmp[0];
      kR = state.tmp[1];
      for (var i = 0; i < state.keys.length; i += 2) {
        var shift = shiftTable[i >>> 1];
        kL = utils.r28shl(kL, shift);
        kR = utils.r28shl(kR, shift);
        utils.pc2(kL, kR, state.keys, i);
      }
    };
    DES.prototype._update = function _update(inp, inOff, out, outOff) {
      var state = this._desState;
      var l = utils.readUInt32BE(inp, inOff);
      var r = utils.readUInt32BE(inp, inOff + 4);
      utils.ip(l, r, state.tmp, 0);
      l = state.tmp[0];
      r = state.tmp[1];
      if (this.type === "encrypt")
        this._encrypt(state, l, r, state.tmp, 0);
      else
        this._decrypt(state, l, r, state.tmp, 0);
      l = state.tmp[0];
      r = state.tmp[1];
      utils.writeUInt32BE(out, l, outOff);
      utils.writeUInt32BE(out, r, outOff + 4);
    };
    DES.prototype._pad = function _pad(buffer, off) {
      var value = buffer.length - off;
      for (var i = off; i < buffer.length; i++)
        buffer[i] = value;
      return true;
    };
    DES.prototype._unpad = function _unpad(buffer) {
      var pad = buffer[buffer.length - 1];
      for (var i = buffer.length - pad; i < buffer.length; i++)
        assert.equal(buffer[i], pad);
      return buffer.slice(0, buffer.length - pad);
    };
    DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
      var l = lStart;
      var r = rStart;
      for (var i = 0; i < state.keys.length; i += 2) {
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        utils.expand(r, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f2 = utils.permute(s);
        var t = r;
        r = (l ^ f2) >>> 0;
        l = t;
      }
      utils.rip(r, l, out, off);
    };
    DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
      var l = rStart;
      var r = lStart;
      for (var i = state.keys.length - 2; i >= 0; i -= 2) {
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        utils.expand(l, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f2 = utils.permute(s);
        var t = l;
        l = (r ^ f2) >>> 0;
        r = t;
      }
      utils.rip(l, r, out, off);
    };
  }
});

// node_modules/.pnpm/des.js@1.0.1/node_modules/des.js/lib/des/cbc.js
var require_cbc = __commonJS({
  "node_modules/.pnpm/des.js@1.0.1/node_modules/des.js/lib/des/cbc.js"(exports) {
    "use strict";
    init_shim();
    var assert = require_minimalistic_assert();
    var inherits2 = require_inherits_browser();
    var proto = {};
    function CBCState(iv) {
      assert.equal(iv.length, 8, "Invalid IV length");
      this.iv = new Array(8);
      for (var i = 0; i < this.iv.length; i++)
        this.iv[i] = iv[i];
    }
    function instantiate(Base) {
      function CBC(options) {
        Base.call(this, options);
        this._cbcInit();
      }
      inherits2(CBC, Base);
      var keys = Object.keys(proto);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        CBC.prototype[key] = proto[key];
      }
      CBC.create = function create(options) {
        return new CBC(options);
      };
      return CBC;
    }
    exports.instantiate = instantiate;
    proto._cbcInit = function _cbcInit() {
      var state = new CBCState(this.options.iv);
      this._cbcState = state;
    };
    proto._update = function _update(inp, inOff, out, outOff) {
      var state = this._cbcState;
      var superProto = this.constructor.super_.prototype;
      var iv = state.iv;
      if (this.type === "encrypt") {
        for (var i = 0; i < this.blockSize; i++)
          iv[i] ^= inp[inOff + i];
        superProto._update.call(this, iv, 0, out, outOff);
        for (var i = 0; i < this.blockSize; i++)
          iv[i] = out[outOff + i];
      } else {
        superProto._update.call(this, inp, inOff, out, outOff);
        for (var i = 0; i < this.blockSize; i++)
          out[outOff + i] ^= iv[i];
        for (var i = 0; i < this.blockSize; i++)
          iv[i] = inp[inOff + i];
      }
    };
  }
});

// node_modules/.pnpm/des.js@1.0.1/node_modules/des.js/lib/des/ede.js
var require_ede = __commonJS({
  "node_modules/.pnpm/des.js@1.0.1/node_modules/des.js/lib/des/ede.js"(exports, module) {
    "use strict";
    init_shim();
    var assert = require_minimalistic_assert();
    var inherits2 = require_inherits_browser();
    var Cipher = require_cipher();
    var DES = require_des();
    function EDEState(type, key) {
      assert.equal(key.length, 24, "Invalid key length");
      var k1 = key.slice(0, 8);
      var k2 = key.slice(8, 16);
      var k3 = key.slice(16, 24);
      if (type === "encrypt") {
        this.ciphers = [
          DES.create({ type: "encrypt", key: k1 }),
          DES.create({ type: "decrypt", key: k2 }),
          DES.create({ type: "encrypt", key: k3 })
        ];
      } else {
        this.ciphers = [
          DES.create({ type: "decrypt", key: k3 }),
          DES.create({ type: "encrypt", key: k2 }),
          DES.create({ type: "decrypt", key: k1 })
        ];
      }
    }
    function EDE(options) {
      Cipher.call(this, options);
      var state = new EDEState(this.type, this.options.key);
      this._edeState = state;
    }
    inherits2(EDE, Cipher);
    module.exports = EDE;
    EDE.create = function create(options) {
      return new EDE(options);
    };
    EDE.prototype._update = function _update(inp, inOff, out, outOff) {
      var state = this._edeState;
      state.ciphers[0]._update(inp, inOff, out, outOff);
      state.ciphers[1]._update(out, outOff, out, outOff);
      state.ciphers[2]._update(out, outOff, out, outOff);
    };
    EDE.prototype._pad = DES.prototype._pad;
    EDE.prototype._unpad = DES.prototype._unpad;
  }
});

// node_modules/.pnpm/des.js@1.0.1/node_modules/des.js/lib/des.js
var require_des2 = __commonJS({
  "node_modules/.pnpm/des.js@1.0.1/node_modules/des.js/lib/des.js"(exports) {
    "use strict";
    init_shim();
    exports.utils = require_utils();
    exports.Cipher = require_cipher();
    exports.DES = require_des();
    exports.CBC = require_cbc();
    exports.EDE = require_ede();
  }
});

// node_modules/.pnpm/browserify-des@1.0.2/node_modules/browserify-des/index.js
var require_browserify_des = __commonJS({
  "node_modules/.pnpm/browserify-des@1.0.2/node_modules/browserify-des/index.js"(exports, module) {
    init_shim();
    var CipherBase = require_cipher_base();
    var des = require_des2();
    var inherits2 = require_inherits_browser();
    var Buffer2 = require_safe_buffer().Buffer;
    var modes = {
      "des-ede3-cbc": des.CBC.instantiate(des.EDE),
      "des-ede3": des.EDE,
      "des-ede-cbc": des.CBC.instantiate(des.EDE),
      "des-ede": des.EDE,
      "des-cbc": des.CBC.instantiate(des.DES),
      "des-ecb": des.DES
    };
    modes.des = modes["des-cbc"];
    modes.des3 = modes["des-ede3-cbc"];
    module.exports = DES;
    inherits2(DES, CipherBase);
    function DES(opts) {
      CipherBase.call(this);
      var modeName = opts.mode.toLowerCase();
      var mode = modes[modeName];
      var type;
      if (opts.decrypt) {
        type = "decrypt";
      } else {
        type = "encrypt";
      }
      var key = opts.key;
      if (!Buffer2.isBuffer(key)) {
        key = Buffer2.from(key);
      }
      if (modeName === "des-ede" || modeName === "des-ede-cbc") {
        key = Buffer2.concat([key, key.slice(0, 8)]);
      }
      var iv = opts.iv;
      if (!Buffer2.isBuffer(iv)) {
        iv = Buffer2.from(iv);
      }
      this._des = mode.create({
        key,
        iv,
        type
      });
    }
    DES.prototype._update = function(data) {
      return Buffer2.from(this._des.update(data));
    };
    DES.prototype._final = function() {
      return Buffer2.from(this._des.final());
    };
  }
});

// node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/modes/ecb.js
var require_ecb = __commonJS({
  "node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/modes/ecb.js"(exports) {
    init_shim();
    exports.encrypt = function(self2, block) {
      return self2._cipher.encryptBlock(block);
    };
    exports.decrypt = function(self2, block) {
      return self2._cipher.decryptBlock(block);
    };
  }
});

// node_modules/.pnpm/buffer-xor@1.0.3/node_modules/buffer-xor/index.js
var require_buffer_xor = __commonJS({
  "node_modules/.pnpm/buffer-xor@1.0.3/node_modules/buffer-xor/index.js"(exports, module) {
    init_shim();
    module.exports = function xor(a, b) {
      var length = Math.min(a.length, b.length);
      var buffer = new import_buffer.Buffer(length);
      for (var i = 0; i < length; ++i) {
        buffer[i] = a[i] ^ b[i];
      }
      return buffer;
    };
  }
});

// node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/modes/cbc.js
var require_cbc2 = __commonJS({
  "node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/modes/cbc.js"(exports) {
    init_shim();
    var xor = require_buffer_xor();
    exports.encrypt = function(self2, block) {
      var data = xor(block, self2._prev);
      self2._prev = self2._cipher.encryptBlock(data);
      return self2._prev;
    };
    exports.decrypt = function(self2, block) {
      var pad = self2._prev;
      self2._prev = block;
      var out = self2._cipher.decryptBlock(block);
      return xor(out, pad);
    };
  }
});

// node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/modes/cfb.js
var require_cfb = __commonJS({
  "node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/modes/cfb.js"(exports) {
    init_shim();
    var Buffer2 = require_safe_buffer().Buffer;
    var xor = require_buffer_xor();
    function encryptStart(self2, data, decrypt) {
      var len = data.length;
      var out = xor(data, self2._cache);
      self2._cache = self2._cache.slice(len);
      self2._prev = Buffer2.concat([self2._prev, decrypt ? data : out]);
      return out;
    }
    exports.encrypt = function(self2, data, decrypt) {
      var out = Buffer2.allocUnsafe(0);
      var len;
      while (data.length) {
        if (self2._cache.length === 0) {
          self2._cache = self2._cipher.encryptBlock(self2._prev);
          self2._prev = Buffer2.allocUnsafe(0);
        }
        if (self2._cache.length <= data.length) {
          len = self2._cache.length;
          out = Buffer2.concat([out, encryptStart(self2, data.slice(0, len), decrypt)]);
          data = data.slice(len);
        } else {
          out = Buffer2.concat([out, encryptStart(self2, data, decrypt)]);
          break;
        }
      }
      return out;
    };
  }
});

// node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/modes/cfb8.js
var require_cfb8 = __commonJS({
  "node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/modes/cfb8.js"(exports) {
    init_shim();
    var Buffer2 = require_safe_buffer().Buffer;
    function encryptByte(self2, byteParam, decrypt) {
      var pad = self2._cipher.encryptBlock(self2._prev);
      var out = pad[0] ^ byteParam;
      self2._prev = Buffer2.concat([
        self2._prev.slice(1),
        Buffer2.from([decrypt ? byteParam : out])
      ]);
      return out;
    }
    exports.encrypt = function(self2, chunk, decrypt) {
      var len = chunk.length;
      var out = Buffer2.allocUnsafe(len);
      var i = -1;
      while (++i < len) {
        out[i] = encryptByte(self2, chunk[i], decrypt);
      }
      return out;
    };
  }
});

// node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/modes/cfb1.js
var require_cfb1 = __commonJS({
  "node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/modes/cfb1.js"(exports) {
    init_shim();
    var Buffer2 = require_safe_buffer().Buffer;
    function encryptByte(self2, byteParam, decrypt) {
      var pad;
      var i = -1;
      var len = 8;
      var out = 0;
      var bit, value;
      while (++i < len) {
        pad = self2._cipher.encryptBlock(self2._prev);
        bit = byteParam & 1 << 7 - i ? 128 : 0;
        value = pad[0] ^ bit;
        out += (value & 128) >> i % 8;
        self2._prev = shiftIn(self2._prev, decrypt ? bit : value);
      }
      return out;
    }
    function shiftIn(buffer, value) {
      var len = buffer.length;
      var i = -1;
      var out = Buffer2.allocUnsafe(buffer.length);
      buffer = Buffer2.concat([buffer, Buffer2.from([value])]);
      while (++i < len) {
        out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
      }
      return out;
    }
    exports.encrypt = function(self2, chunk, decrypt) {
      var len = chunk.length;
      var out = Buffer2.allocUnsafe(len);
      var i = -1;
      while (++i < len) {
        out[i] = encryptByte(self2, chunk[i], decrypt);
      }
      return out;
    };
  }
});

// node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/modes/ofb.js
var require_ofb = __commonJS({
  "node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/modes/ofb.js"(exports) {
    init_shim();
    var xor = require_buffer_xor();
    function getBlock(self2) {
      self2._prev = self2._cipher.encryptBlock(self2._prev);
      return self2._prev;
    }
    exports.encrypt = function(self2, chunk) {
      while (self2._cache.length < chunk.length) {
        self2._cache = import_buffer.Buffer.concat([self2._cache, getBlock(self2)]);
      }
      var pad = self2._cache.slice(0, chunk.length);
      self2._cache = self2._cache.slice(chunk.length);
      return xor(chunk, pad);
    };
  }
});

// node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/incr32.js
var require_incr32 = __commonJS({
  "node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/incr32.js"(exports, module) {
    init_shim();
    function incr32(iv) {
      var len = iv.length;
      var item;
      while (len--) {
        item = iv.readUInt8(len);
        if (item === 255) {
          iv.writeUInt8(0, len);
        } else {
          item++;
          iv.writeUInt8(item, len);
          break;
        }
      }
    }
    module.exports = incr32;
  }
});

// node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/modes/ctr.js
var require_ctr = __commonJS({
  "node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/modes/ctr.js"(exports) {
    init_shim();
    var xor = require_buffer_xor();
    var Buffer2 = require_safe_buffer().Buffer;
    var incr32 = require_incr32();
    function getBlock(self2) {
      var out = self2._cipher.encryptBlockRaw(self2._prev);
      incr32(self2._prev);
      return out;
    }
    var blockSize = 16;
    exports.encrypt = function(self2, chunk) {
      var chunkNum = Math.ceil(chunk.length / blockSize);
      var start = self2._cache.length;
      self2._cache = Buffer2.concat([
        self2._cache,
        Buffer2.allocUnsafe(chunkNum * blockSize)
      ]);
      for (var i = 0; i < chunkNum; i++) {
        var out = getBlock(self2);
        var offset = start + i * blockSize;
        self2._cache.writeUInt32BE(out[0], offset + 0);
        self2._cache.writeUInt32BE(out[1], offset + 4);
        self2._cache.writeUInt32BE(out[2], offset + 8);
        self2._cache.writeUInt32BE(out[3], offset + 12);
      }
      var pad = self2._cache.slice(0, chunk.length);
      self2._cache = self2._cache.slice(chunk.length);
      return xor(chunk, pad);
    };
  }
});

// node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/modes/list.json
var require_list = __commonJS({
  "node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/modes/list.json"(exports, module) {
    module.exports = {
      "aes-128-ecb": {
        cipher: "AES",
        key: 128,
        iv: 0,
        mode: "ECB",
        type: "block"
      },
      "aes-192-ecb": {
        cipher: "AES",
        key: 192,
        iv: 0,
        mode: "ECB",
        type: "block"
      },
      "aes-256-ecb": {
        cipher: "AES",
        key: 256,
        iv: 0,
        mode: "ECB",
        type: "block"
      },
      "aes-128-cbc": {
        cipher: "AES",
        key: 128,
        iv: 16,
        mode: "CBC",
        type: "block"
      },
      "aes-192-cbc": {
        cipher: "AES",
        key: 192,
        iv: 16,
        mode: "CBC",
        type: "block"
      },
      "aes-256-cbc": {
        cipher: "AES",
        key: 256,
        iv: 16,
        mode: "CBC",
        type: "block"
      },
      aes128: {
        cipher: "AES",
        key: 128,
        iv: 16,
        mode: "CBC",
        type: "block"
      },
      aes192: {
        cipher: "AES",
        key: 192,
        iv: 16,
        mode: "CBC",
        type: "block"
      },
      aes256: {
        cipher: "AES",
        key: 256,
        iv: 16,
        mode: "CBC",
        type: "block"
      },
      "aes-128-cfb": {
        cipher: "AES",
        key: 128,
        iv: 16,
        mode: "CFB",
        type: "stream"
      },
      "aes-192-cfb": {
        cipher: "AES",
        key: 192,
        iv: 16,
        mode: "CFB",
        type: "stream"
      },
      "aes-256-cfb": {
        cipher: "AES",
        key: 256,
        iv: 16,
        mode: "CFB",
        type: "stream"
      },
      "aes-128-cfb8": {
        cipher: "AES",
        key: 128,
        iv: 16,
        mode: "CFB8",
        type: "stream"
      },
      "aes-192-cfb8": {
        cipher: "AES",
        key: 192,
        iv: 16,
        mode: "CFB8",
        type: "stream"
      },
      "aes-256-cfb8": {
        cipher: "AES",
        key: 256,
        iv: 16,
        mode: "CFB8",
        type: "stream"
      },
      "aes-128-cfb1": {
        cipher: "AES",
        key: 128,
        iv: 16,
        mode: "CFB1",
        type: "stream"
      },
      "aes-192-cfb1": {
        cipher: "AES",
        key: 192,
        iv: 16,
        mode: "CFB1",
        type: "stream"
      },
      "aes-256-cfb1": {
        cipher: "AES",
        key: 256,
        iv: 16,
        mode: "CFB1",
        type: "stream"
      },
      "aes-128-ofb": {
        cipher: "AES",
        key: 128,
        iv: 16,
        mode: "OFB",
        type: "stream"
      },
      "aes-192-ofb": {
        cipher: "AES",
        key: 192,
        iv: 16,
        mode: "OFB",
        type: "stream"
      },
      "aes-256-ofb": {
        cipher: "AES",
        key: 256,
        iv: 16,
        mode: "OFB",
        type: "stream"
      },
      "aes-128-ctr": {
        cipher: "AES",
        key: 128,
        iv: 16,
        mode: "CTR",
        type: "stream"
      },
      "aes-192-ctr": {
        cipher: "AES",
        key: 192,
        iv: 16,
        mode: "CTR",
        type: "stream"
      },
      "aes-256-ctr": {
        cipher: "AES",
        key: 256,
        iv: 16,
        mode: "CTR",
        type: "stream"
      },
      "aes-128-gcm": {
        cipher: "AES",
        key: 128,
        iv: 12,
        mode: "GCM",
        type: "auth"
      },
      "aes-192-gcm": {
        cipher: "AES",
        key: 192,
        iv: 12,
        mode: "GCM",
        type: "auth"
      },
      "aes-256-gcm": {
        cipher: "AES",
        key: 256,
        iv: 12,
        mode: "GCM",
        type: "auth"
      }
    };
  }
});

// node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/modes/index.js
var require_modes = __commonJS({
  "node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/modes/index.js"(exports, module) {
    init_shim();
    var modeModules = {
      ECB: require_ecb(),
      CBC: require_cbc2(),
      CFB: require_cfb(),
      CFB8: require_cfb8(),
      CFB1: require_cfb1(),
      OFB: require_ofb(),
      CTR: require_ctr(),
      GCM: require_ctr()
    };
    var modes = require_list();
    for (key in modes) {
      modes[key].module = modeModules[modes[key].mode];
    }
    var key;
    module.exports = modes;
  }
});

// node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/aes.js
var require_aes = __commonJS({
  "node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/aes.js"(exports, module) {
    init_shim();
    var Buffer2 = require_safe_buffer().Buffer;
    function asUInt32Array(buf) {
      if (!Buffer2.isBuffer(buf))
        buf = Buffer2.from(buf);
      var len = buf.length / 4 | 0;
      var out = new Array(len);
      for (var i = 0; i < len; i++) {
        out[i] = buf.readUInt32BE(i * 4);
      }
      return out;
    }
    function scrubVec(v) {
      for (var i = 0; i < v.length; v++) {
        v[i] = 0;
      }
    }
    function cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
      var SUB_MIX0 = SUB_MIX[0];
      var SUB_MIX1 = SUB_MIX[1];
      var SUB_MIX2 = SUB_MIX[2];
      var SUB_MIX3 = SUB_MIX[3];
      var s0 = M[0] ^ keySchedule[0];
      var s1 = M[1] ^ keySchedule[1];
      var s2 = M[2] ^ keySchedule[2];
      var s3 = M[3] ^ keySchedule[3];
      var t0, t1, t2, t3;
      var ksRow = 4;
      for (var round = 1; round < nRounds; round++) {
        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 255] ^ SUB_MIX2[s2 >>> 8 & 255] ^ SUB_MIX3[s3 & 255] ^ keySchedule[ksRow++];
        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 255] ^ SUB_MIX2[s3 >>> 8 & 255] ^ SUB_MIX3[s0 & 255] ^ keySchedule[ksRow++];
        t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 255] ^ SUB_MIX2[s0 >>> 8 & 255] ^ SUB_MIX3[s1 & 255] ^ keySchedule[ksRow++];
        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 255] ^ SUB_MIX2[s1 >>> 8 & 255] ^ SUB_MIX3[s2 & 255] ^ keySchedule[ksRow++];
        s0 = t0;
        s1 = t1;
        s2 = t2;
        s3 = t3;
      }
      t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 255] << 16 | SBOX[s2 >>> 8 & 255] << 8 | SBOX[s3 & 255]) ^ keySchedule[ksRow++];
      t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 255] << 16 | SBOX[s3 >>> 8 & 255] << 8 | SBOX[s0 & 255]) ^ keySchedule[ksRow++];
      t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 255] << 16 | SBOX[s0 >>> 8 & 255] << 8 | SBOX[s1 & 255]) ^ keySchedule[ksRow++];
      t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 255] << 16 | SBOX[s1 >>> 8 & 255] << 8 | SBOX[s2 & 255]) ^ keySchedule[ksRow++];
      t0 = t0 >>> 0;
      t1 = t1 >>> 0;
      t2 = t2 >>> 0;
      t3 = t3 >>> 0;
      return [t0, t1, t2, t3];
    }
    var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
    var G = function() {
      var d = new Array(256);
      for (var j = 0; j < 256; j++) {
        if (j < 128) {
          d[j] = j << 1;
        } else {
          d[j] = j << 1 ^ 283;
        }
      }
      var SBOX = [];
      var INV_SBOX = [];
      var SUB_MIX = [[], [], [], []];
      var INV_SUB_MIX = [[], [], [], []];
      var x = 0;
      var xi = 0;
      for (var i = 0; i < 256; ++i) {
        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
        sx = sx >>> 8 ^ sx & 255 ^ 99;
        SBOX[x] = sx;
        INV_SBOX[sx] = x;
        var x2 = d[x];
        var x4 = d[x2];
        var x8 = d[x4];
        var t = d[sx] * 257 ^ sx * 16843008;
        SUB_MIX[0][x] = t << 24 | t >>> 8;
        SUB_MIX[1][x] = t << 16 | t >>> 16;
        SUB_MIX[2][x] = t << 8 | t >>> 24;
        SUB_MIX[3][x] = t;
        t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
        INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
        INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
        INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
        INV_SUB_MIX[3][sx] = t;
        if (x === 0) {
          x = xi = 1;
        } else {
          x = x2 ^ d[d[d[x8 ^ x2]]];
          xi ^= d[d[xi]];
        }
      }
      return {
        SBOX,
        INV_SBOX,
        SUB_MIX,
        INV_SUB_MIX
      };
    }();
    function AES(key) {
      this._key = asUInt32Array(key);
      this._reset();
    }
    AES.blockSize = 4 * 4;
    AES.keySize = 256 / 8;
    AES.prototype.blockSize = AES.blockSize;
    AES.prototype.keySize = AES.keySize;
    AES.prototype._reset = function() {
      var keyWords = this._key;
      var keySize = keyWords.length;
      var nRounds = keySize + 6;
      var ksRows = (nRounds + 1) * 4;
      var keySchedule = [];
      for (var k = 0; k < keySize; k++) {
        keySchedule[k] = keyWords[k];
      }
      for (k = keySize; k < ksRows; k++) {
        var t = keySchedule[k - 1];
        if (k % keySize === 0) {
          t = t << 8 | t >>> 24;
          t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 255] << 16 | G.SBOX[t >>> 8 & 255] << 8 | G.SBOX[t & 255];
          t ^= RCON[k / keySize | 0] << 24;
        } else if (keySize > 6 && k % keySize === 4) {
          t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 255] << 16 | G.SBOX[t >>> 8 & 255] << 8 | G.SBOX[t & 255];
        }
        keySchedule[k] = keySchedule[k - keySize] ^ t;
      }
      var invKeySchedule = [];
      for (var ik = 0; ik < ksRows; ik++) {
        var ksR = ksRows - ik;
        var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];
        if (ik < 4 || ksR <= 4) {
          invKeySchedule[ik] = tt;
        } else {
          invKeySchedule[ik] = G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[tt >>> 16 & 255]] ^ G.INV_SUB_MIX[2][G.SBOX[tt >>> 8 & 255]] ^ G.INV_SUB_MIX[3][G.SBOX[tt & 255]];
        }
      }
      this._nRounds = nRounds;
      this._keySchedule = keySchedule;
      this._invKeySchedule = invKeySchedule;
    };
    AES.prototype.encryptBlockRaw = function(M) {
      M = asUInt32Array(M);
      return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds);
    };
    AES.prototype.encryptBlock = function(M) {
      var out = this.encryptBlockRaw(M);
      var buf = Buffer2.allocUnsafe(16);
      buf.writeUInt32BE(out[0], 0);
      buf.writeUInt32BE(out[1], 4);
      buf.writeUInt32BE(out[2], 8);
      buf.writeUInt32BE(out[3], 12);
      return buf;
    };
    AES.prototype.decryptBlock = function(M) {
      M = asUInt32Array(M);
      var m1 = M[1];
      M[1] = M[3];
      M[3] = m1;
      var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);
      var buf = Buffer2.allocUnsafe(16);
      buf.writeUInt32BE(out[0], 0);
      buf.writeUInt32BE(out[3], 4);
      buf.writeUInt32BE(out[2], 8);
      buf.writeUInt32BE(out[1], 12);
      return buf;
    };
    AES.prototype.scrub = function() {
      scrubVec(this._keySchedule);
      scrubVec(this._invKeySchedule);
      scrubVec(this._key);
    };
    module.exports.AES = AES;
  }
});

// node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/ghash.js
var require_ghash = __commonJS({
  "node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/ghash.js"(exports, module) {
    init_shim();
    var Buffer2 = require_safe_buffer().Buffer;
    var ZEROES = Buffer2.alloc(16, 0);
    function toArray2(buf) {
      return [
        buf.readUInt32BE(0),
        buf.readUInt32BE(4),
        buf.readUInt32BE(8),
        buf.readUInt32BE(12)
      ];
    }
    function fromArray(out) {
      var buf = Buffer2.allocUnsafe(16);
      buf.writeUInt32BE(out[0] >>> 0, 0);
      buf.writeUInt32BE(out[1] >>> 0, 4);
      buf.writeUInt32BE(out[2] >>> 0, 8);
      buf.writeUInt32BE(out[3] >>> 0, 12);
      return buf;
    }
    function GHASH(key) {
      this.h = key;
      this.state = Buffer2.alloc(16, 0);
      this.cache = Buffer2.allocUnsafe(0);
    }
    GHASH.prototype.ghash = function(block) {
      var i = -1;
      while (++i < block.length) {
        this.state[i] ^= block[i];
      }
      this._multiply();
    };
    GHASH.prototype._multiply = function() {
      var Vi = toArray2(this.h);
      var Zi = [0, 0, 0, 0];
      var j, xi, lsbVi;
      var i = -1;
      while (++i < 128) {
        xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;
        if (xi) {
          Zi[0] ^= Vi[0];
          Zi[1] ^= Vi[1];
          Zi[2] ^= Vi[2];
          Zi[3] ^= Vi[3];
        }
        lsbVi = (Vi[3] & 1) !== 0;
        for (j = 3; j > 0; j--) {
          Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
        }
        Vi[0] = Vi[0] >>> 1;
        if (lsbVi) {
          Vi[0] = Vi[0] ^ 225 << 24;
        }
      }
      this.state = fromArray(Zi);
    };
    GHASH.prototype.update = function(buf) {
      this.cache = Buffer2.concat([this.cache, buf]);
      var chunk;
      while (this.cache.length >= 16) {
        chunk = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        this.ghash(chunk);
      }
    };
    GHASH.prototype.final = function(abl, bl) {
      if (this.cache.length) {
        this.ghash(Buffer2.concat([this.cache, ZEROES], 16));
      }
      this.ghash(fromArray([0, abl, 0, bl]));
      return this.state;
    };
    module.exports = GHASH;
  }
});

// node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/authCipher.js
var require_authCipher = __commonJS({
  "node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/authCipher.js"(exports, module) {
    init_shim();
    var aes = require_aes();
    var Buffer2 = require_safe_buffer().Buffer;
    var Transform = require_cipher_base();
    var inherits2 = require_inherits_browser();
    var GHASH = require_ghash();
    var xor = require_buffer_xor();
    var incr32 = require_incr32();
    function xorTest(a, b) {
      var out = 0;
      if (a.length !== b.length)
        out++;
      var len = Math.min(a.length, b.length);
      for (var i = 0; i < len; ++i) {
        out += a[i] ^ b[i];
      }
      return out;
    }
    function calcIv(self2, iv, ck) {
      if (iv.length === 12) {
        self2._finID = Buffer2.concat([iv, Buffer2.from([0, 0, 0, 1])]);
        return Buffer2.concat([iv, Buffer2.from([0, 0, 0, 2])]);
      }
      var ghash = new GHASH(ck);
      var len = iv.length;
      var toPad = len % 16;
      ghash.update(iv);
      if (toPad) {
        toPad = 16 - toPad;
        ghash.update(Buffer2.alloc(toPad, 0));
      }
      ghash.update(Buffer2.alloc(8, 0));
      var ivBits = len * 8;
      var tail = Buffer2.alloc(8);
      tail.writeUIntBE(ivBits, 0, 8);
      ghash.update(tail);
      self2._finID = ghash.state;
      var out = Buffer2.from(self2._finID);
      incr32(out);
      return out;
    }
    function StreamCipher(mode, key, iv, decrypt) {
      Transform.call(this);
      var h = Buffer2.alloc(4, 0);
      this._cipher = new aes.AES(key);
      var ck = this._cipher.encryptBlock(h);
      this._ghash = new GHASH(ck);
      iv = calcIv(this, iv, ck);
      this._prev = Buffer2.from(iv);
      this._cache = Buffer2.allocUnsafe(0);
      this._secCache = Buffer2.allocUnsafe(0);
      this._decrypt = decrypt;
      this._alen = 0;
      this._len = 0;
      this._mode = mode;
      this._authTag = null;
      this._called = false;
    }
    inherits2(StreamCipher, Transform);
    StreamCipher.prototype._update = function(chunk) {
      if (!this._called && this._alen) {
        var rump = 16 - this._alen % 16;
        if (rump < 16) {
          rump = Buffer2.alloc(rump, 0);
          this._ghash.update(rump);
        }
      }
      this._called = true;
      var out = this._mode.encrypt(this, chunk);
      if (this._decrypt) {
        this._ghash.update(chunk);
      } else {
        this._ghash.update(out);
      }
      this._len += chunk.length;
      return out;
    };
    StreamCipher.prototype._final = function() {
      if (this._decrypt && !this._authTag)
        throw new Error("Unsupported state or unable to authenticate data");
      var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
      if (this._decrypt && xorTest(tag, this._authTag))
        throw new Error("Unsupported state or unable to authenticate data");
      this._authTag = tag;
      this._cipher.scrub();
    };
    StreamCipher.prototype.getAuthTag = function getAuthTag() {
      if (this._decrypt || !Buffer2.isBuffer(this._authTag))
        throw new Error("Attempting to get auth tag in unsupported state");
      return this._authTag;
    };
    StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
      if (!this._decrypt)
        throw new Error("Attempting to set auth tag in unsupported state");
      this._authTag = tag;
    };
    StreamCipher.prototype.setAAD = function setAAD(buf) {
      if (this._called)
        throw new Error("Attempting to set AAD in unsupported state");
      this._ghash.update(buf);
      this._alen += buf.length;
    };
    module.exports = StreamCipher;
  }
});

// node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/streamCipher.js
var require_streamCipher = __commonJS({
  "node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/streamCipher.js"(exports, module) {
    init_shim();
    var aes = require_aes();
    var Buffer2 = require_safe_buffer().Buffer;
    var Transform = require_cipher_base();
    var inherits2 = require_inherits_browser();
    function StreamCipher(mode, key, iv, decrypt) {
      Transform.call(this);
      this._cipher = new aes.AES(key);
      this._prev = Buffer2.from(iv);
      this._cache = Buffer2.allocUnsafe(0);
      this._secCache = Buffer2.allocUnsafe(0);
      this._decrypt = decrypt;
      this._mode = mode;
    }
    inherits2(StreamCipher, Transform);
    StreamCipher.prototype._update = function(chunk) {
      return this._mode.encrypt(this, chunk, this._decrypt);
    };
    StreamCipher.prototype._final = function() {
      this._cipher.scrub();
    };
    module.exports = StreamCipher;
  }
});

// node_modules/.pnpm/evp_bytestokey@1.0.3/node_modules/evp_bytestokey/index.js
var require_evp_bytestokey = __commonJS({
  "node_modules/.pnpm/evp_bytestokey@1.0.3/node_modules/evp_bytestokey/index.js"(exports, module) {
    init_shim();
    var Buffer2 = require_safe_buffer().Buffer;
    var MD5 = require_md5();
    function EVP_BytesToKey(password, salt, keyBits, ivLen) {
      if (!Buffer2.isBuffer(password))
        password = Buffer2.from(password, "binary");
      if (salt) {
        if (!Buffer2.isBuffer(salt))
          salt = Buffer2.from(salt, "binary");
        if (salt.length !== 8)
          throw new RangeError("salt should be Buffer with 8 byte length");
      }
      var keyLen = keyBits / 8;
      var key = Buffer2.alloc(keyLen);
      var iv = Buffer2.alloc(ivLen || 0);
      var tmp = Buffer2.alloc(0);
      while (keyLen > 0 || ivLen > 0) {
        var hash = new MD5();
        hash.update(tmp);
        hash.update(password);
        if (salt)
          hash.update(salt);
        tmp = hash.digest();
        var used = 0;
        if (keyLen > 0) {
          var keyStart = key.length - keyLen;
          used = Math.min(keyLen, tmp.length);
          tmp.copy(key, keyStart, 0, used);
          keyLen -= used;
        }
        if (used < tmp.length && ivLen > 0) {
          var ivStart = iv.length - ivLen;
          var length = Math.min(ivLen, tmp.length - used);
          tmp.copy(iv, ivStart, used, used + length);
          ivLen -= length;
        }
      }
      tmp.fill(0);
      return { key, iv };
    }
    module.exports = EVP_BytesToKey;
  }
});

// node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/encrypter.js
var require_encrypter = __commonJS({
  "node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/encrypter.js"(exports) {
    init_shim();
    var MODES = require_modes();
    var AuthCipher = require_authCipher();
    var Buffer2 = require_safe_buffer().Buffer;
    var StreamCipher = require_streamCipher();
    var Transform = require_cipher_base();
    var aes = require_aes();
    var ebtk = require_evp_bytestokey();
    var inherits2 = require_inherits_browser();
    function Cipher(mode, key, iv) {
      Transform.call(this);
      this._cache = new Splitter();
      this._cipher = new aes.AES(key);
      this._prev = Buffer2.from(iv);
      this._mode = mode;
      this._autopadding = true;
    }
    inherits2(Cipher, Transform);
    Cipher.prototype._update = function(data) {
      this._cache.add(data);
      var chunk;
      var thing;
      var out = [];
      while (chunk = this._cache.get()) {
        thing = this._mode.encrypt(this, chunk);
        out.push(thing);
      }
      return Buffer2.concat(out);
    };
    var PADDING = Buffer2.alloc(16, 16);
    Cipher.prototype._final = function() {
      var chunk = this._cache.flush();
      if (this._autopadding) {
        chunk = this._mode.encrypt(this, chunk);
        this._cipher.scrub();
        return chunk;
      }
      if (!chunk.equals(PADDING)) {
        this._cipher.scrub();
        throw new Error("data not multiple of block length");
      }
    };
    Cipher.prototype.setAutoPadding = function(setTo) {
      this._autopadding = !!setTo;
      return this;
    };
    function Splitter() {
      this.cache = Buffer2.allocUnsafe(0);
    }
    Splitter.prototype.add = function(data) {
      this.cache = Buffer2.concat([this.cache, data]);
    };
    Splitter.prototype.get = function() {
      if (this.cache.length > 15) {
        var out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
      }
      return null;
    };
    Splitter.prototype.flush = function() {
      var len = 16 - this.cache.length;
      var padBuff = Buffer2.allocUnsafe(len);
      var i = -1;
      while (++i < len) {
        padBuff.writeUInt8(len, i);
      }
      return Buffer2.concat([this.cache, padBuff]);
    };
    function createCipheriv(suite, password, iv) {
      var config = MODES[suite.toLowerCase()];
      if (!config)
        throw new TypeError("invalid suite type");
      if (typeof password === "string")
        password = Buffer2.from(password);
      if (password.length !== config.key / 8)
        throw new TypeError("invalid key length " + password.length);
      if (typeof iv === "string")
        iv = Buffer2.from(iv);
      if (config.mode !== "GCM" && iv.length !== config.iv)
        throw new TypeError("invalid iv length " + iv.length);
      if (config.type === "stream") {
        return new StreamCipher(config.module, password, iv);
      } else if (config.type === "auth") {
        return new AuthCipher(config.module, password, iv);
      }
      return new Cipher(config.module, password, iv);
    }
    function createCipher(suite, password) {
      var config = MODES[suite.toLowerCase()];
      if (!config)
        throw new TypeError("invalid suite type");
      var keys = ebtk(password, false, config.key, config.iv);
      return createCipheriv(suite, keys.key, keys.iv);
    }
    exports.createCipheriv = createCipheriv;
    exports.createCipher = createCipher;
  }
});

// node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/decrypter.js
var require_decrypter = __commonJS({
  "node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/decrypter.js"(exports) {
    init_shim();
    var AuthCipher = require_authCipher();
    var Buffer2 = require_safe_buffer().Buffer;
    var MODES = require_modes();
    var StreamCipher = require_streamCipher();
    var Transform = require_cipher_base();
    var aes = require_aes();
    var ebtk = require_evp_bytestokey();
    var inherits2 = require_inherits_browser();
    function Decipher(mode, key, iv) {
      Transform.call(this);
      this._cache = new Splitter();
      this._last = void 0;
      this._cipher = new aes.AES(key);
      this._prev = Buffer2.from(iv);
      this._mode = mode;
      this._autopadding = true;
    }
    inherits2(Decipher, Transform);
    Decipher.prototype._update = function(data) {
      this._cache.add(data);
      var chunk;
      var thing;
      var out = [];
      while (chunk = this._cache.get(this._autopadding)) {
        thing = this._mode.decrypt(this, chunk);
        out.push(thing);
      }
      return Buffer2.concat(out);
    };
    Decipher.prototype._final = function() {
      var chunk = this._cache.flush();
      if (this._autopadding) {
        return unpad(this._mode.decrypt(this, chunk));
      } else if (chunk) {
        throw new Error("data not multiple of block length");
      }
    };
    Decipher.prototype.setAutoPadding = function(setTo) {
      this._autopadding = !!setTo;
      return this;
    };
    function Splitter() {
      this.cache = Buffer2.allocUnsafe(0);
    }
    Splitter.prototype.add = function(data) {
      this.cache = Buffer2.concat([this.cache, data]);
    };
    Splitter.prototype.get = function(autoPadding) {
      var out;
      if (autoPadding) {
        if (this.cache.length > 16) {
          out = this.cache.slice(0, 16);
          this.cache = this.cache.slice(16);
          return out;
        }
      } else {
        if (this.cache.length >= 16) {
          out = this.cache.slice(0, 16);
          this.cache = this.cache.slice(16);
          return out;
        }
      }
      return null;
    };
    Splitter.prototype.flush = function() {
      if (this.cache.length)
        return this.cache;
    };
    function unpad(last) {
      var padded = last[15];
      if (padded < 1 || padded > 16) {
        throw new Error("unable to decrypt data");
      }
      var i = -1;
      while (++i < padded) {
        if (last[i + (16 - padded)] !== padded) {
          throw new Error("unable to decrypt data");
        }
      }
      if (padded === 16)
        return;
      return last.slice(0, 16 - padded);
    }
    function createDecipheriv(suite, password, iv) {
      var config = MODES[suite.toLowerCase()];
      if (!config)
        throw new TypeError("invalid suite type");
      if (typeof iv === "string")
        iv = Buffer2.from(iv);
      if (config.mode !== "GCM" && iv.length !== config.iv)
        throw new TypeError("invalid iv length " + iv.length);
      if (typeof password === "string")
        password = Buffer2.from(password);
      if (password.length !== config.key / 8)
        throw new TypeError("invalid key length " + password.length);
      if (config.type === "stream") {
        return new StreamCipher(config.module, password, iv, true);
      } else if (config.type === "auth") {
        return new AuthCipher(config.module, password, iv, true);
      }
      return new Decipher(config.module, password, iv);
    }
    function createDecipher(suite, password) {
      var config = MODES[suite.toLowerCase()];
      if (!config)
        throw new TypeError("invalid suite type");
      var keys = ebtk(password, false, config.key, config.iv);
      return createDecipheriv(suite, keys.key, keys.iv);
    }
    exports.createDecipher = createDecipher;
    exports.createDecipheriv = createDecipheriv;
  }
});

// node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/browser.js
var require_browser6 = __commonJS({
  "node_modules/.pnpm/browserify-aes@1.2.0/node_modules/browserify-aes/browser.js"(exports) {
    init_shim();
    var ciphers = require_encrypter();
    var deciphers = require_decrypter();
    var modes = require_list();
    function getCiphers() {
      return Object.keys(modes);
    }
    exports.createCipher = exports.Cipher = ciphers.createCipher;
    exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv;
    exports.createDecipher = exports.Decipher = deciphers.createDecipher;
    exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv;
    exports.listCiphers = exports.getCiphers = getCiphers;
  }
});

// node_modules/.pnpm/browserify-des@1.0.2/node_modules/browserify-des/modes.js
var require_modes2 = __commonJS({
  "node_modules/.pnpm/browserify-des@1.0.2/node_modules/browserify-des/modes.js"(exports) {
    init_shim();
    exports["des-ecb"] = {
      key: 8,
      iv: 0
    };
    exports["des-cbc"] = exports.des = {
      key: 8,
      iv: 8
    };
    exports["des-ede3-cbc"] = exports.des3 = {
      key: 24,
      iv: 8
    };
    exports["des-ede3"] = {
      key: 24,
      iv: 0
    };
    exports["des-ede-cbc"] = {
      key: 16,
      iv: 8
    };
    exports["des-ede"] = {
      key: 16,
      iv: 0
    };
  }
});

// node_modules/.pnpm/browserify-cipher@1.0.1/node_modules/browserify-cipher/browser.js
var require_browser7 = __commonJS({
  "node_modules/.pnpm/browserify-cipher@1.0.1/node_modules/browserify-cipher/browser.js"(exports) {
    init_shim();
    var DES = require_browserify_des();
    var aes = require_browser6();
    var aesModes = require_modes();
    var desModes = require_modes2();
    var ebtk = require_evp_bytestokey();
    function createCipher(suite, password) {
      suite = suite.toLowerCase();
      var keyLen, ivLen;
      if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
      } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
      } else {
        throw new TypeError("invalid suite type");
      }
      var keys = ebtk(password, false, keyLen, ivLen);
      return createCipheriv(suite, keys.key, keys.iv);
    }
    function createDecipher(suite, password) {
      suite = suite.toLowerCase();
      var keyLen, ivLen;
      if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
      } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
      } else {
        throw new TypeError("invalid suite type");
      }
      var keys = ebtk(password, false, keyLen, ivLen);
      return createDecipheriv(suite, keys.key, keys.iv);
    }
    function createCipheriv(suite, key, iv) {
      suite = suite.toLowerCase();
      if (aesModes[suite])
        return aes.createCipheriv(suite, key, iv);
      if (desModes[suite])
        return new DES({ key, iv, mode: suite });
      throw new TypeError("invalid suite type");
    }
    function createDecipheriv(suite, key, iv) {
      suite = suite.toLowerCase();
      if (aesModes[suite])
        return aes.createDecipheriv(suite, key, iv);
      if (desModes[suite])
        return new DES({ key, iv, mode: suite, decrypt: true });
      throw new TypeError("invalid suite type");
    }
    function getCiphers() {
      return Object.keys(desModes).concat(aes.getCiphers());
    }
    exports.createCipher = exports.Cipher = createCipher;
    exports.createCipheriv = exports.Cipheriv = createCipheriv;
    exports.createDecipher = exports.Decipher = createDecipher;
    exports.createDecipheriv = exports.Decipheriv = createDecipheriv;
    exports.listCiphers = exports.getCiphers = getCiphers;
  }
});

// node_modules/.pnpm/bn.js@4.12.0/node_modules/bn.js/lib/bn.js
var require_bn = __commonJS({
  "node_modules/.pnpm/bn.js@4.12.0/node_modules/bn.js/lib/bn.js"(exports, module) {
    init_shim();
    (function(module2, exports2) {
      "use strict";
      function assert(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits2(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN;
      } else {
        exports2.BN = BN;
      }
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require_buffer().Buffer;
        }
      } catch (e) {
      }
      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initArray = function _initArray(number, base, endian) {
        assert(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          return c - 48 & 15;
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
      BN.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this.strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            r += c - 49 + 10;
          } else if (c >= 17) {
            r += c - 17 + 10;
          } else {
            r += c;
          }
        }
        return r;
      }
      BN.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this.strip();
      };
      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };
      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN.prototype.toString = function toString3(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON2() {
        return this.toString(16);
      };
      BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i] = b;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this.strip();
      };
      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this.strip();
      };
      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
          return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert(carry === 0);
        assert((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this.strip();
      };
      BN.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this.strip();
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return acc;
      };
      BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN(1);
        var B = new BN(0);
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN.red = function red(num) {
        return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits2(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits2(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits2(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits2(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN._prime = function prime(name) {
        if (primes[name])
          return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits2(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
          return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/.pnpm/brorand@1.1.0/node_modules/brorand/index.js
var require_brorand = __commonJS({
  "node_modules/.pnpm/brorand@1.1.0/node_modules/brorand/index.js"(exports, module) {
    init_shim();
    var r;
    module.exports = function rand(len) {
      if (!r)
        r = new Rand(null);
      return r.generate(len);
    };
    function Rand(rand) {
      this.rand = rand;
    }
    module.exports.Rand = Rand;
    Rand.prototype.generate = function generate(len) {
      return this._rand(len);
    };
    Rand.prototype._rand = function _rand(n) {
      if (this.rand.getBytes)
        return this.rand.getBytes(n);
      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++)
        res[i] = this.rand.getByte();
      return res;
    };
    if (typeof self === "object") {
      if (self.crypto && self.crypto.getRandomValues) {
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.crypto.getRandomValues(arr);
          return arr;
        };
      } else if (self.msCrypto && self.msCrypto.getRandomValues) {
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.msCrypto.getRandomValues(arr);
          return arr;
        };
      } else if (typeof window === "object") {
        Rand.prototype._rand = function() {
          throw new Error("Not implemented yet");
        };
      }
    } else {
      try {
        crypto2 = require_crypto_browserify();
        if (typeof crypto2.randomBytes !== "function")
          throw new Error("Not supported");
        Rand.prototype._rand = function _rand(n) {
          return crypto2.randomBytes(n);
        };
      } catch (e) {
      }
    }
    var crypto2;
  }
});

// node_modules/.pnpm/miller-rabin@4.0.1/node_modules/miller-rabin/lib/mr.js
var require_mr = __commonJS({
  "node_modules/.pnpm/miller-rabin@4.0.1/node_modules/miller-rabin/lib/mr.js"(exports, module) {
    init_shim();
    var bn = require_bn();
    var brorand = require_brorand();
    function MillerRabin(rand) {
      this.rand = rand || new brorand.Rand();
    }
    module.exports = MillerRabin;
    MillerRabin.create = function create(rand) {
      return new MillerRabin(rand);
    };
    MillerRabin.prototype._randbelow = function _randbelow(n) {
      var len = n.bitLength();
      var min_bytes = Math.ceil(len / 8);
      do
        var a = new bn(this.rand.generate(min_bytes));
      while (a.cmp(n) >= 0);
      return a;
    };
    MillerRabin.prototype._randrange = function _randrange(start, stop) {
      var size = stop.sub(start);
      return start.add(this._randbelow(size));
    };
    MillerRabin.prototype.test = function test(n, k, cb) {
      var len = n.bitLength();
      var red = bn.mont(n);
      var rone = new bn(1).toRed(red);
      if (!k)
        k = Math.max(1, len / 48 | 0);
      var n1 = n.subn(1);
      for (var s = 0; !n1.testn(s); s++) {
      }
      var d = n.shrn(s);
      var rn1 = n1.toRed(red);
      var prime = true;
      for (; k > 0; k--) {
        var a = this._randrange(new bn(2), n1);
        if (cb)
          cb(a);
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
          continue;
        for (var i = 1; i < s; i++) {
          x = x.redSqr();
          if (x.cmp(rone) === 0)
            return false;
          if (x.cmp(rn1) === 0)
            break;
        }
        if (i === s)
          return false;
      }
      return prime;
    };
    MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
      var len = n.bitLength();
      var red = bn.mont(n);
      var rone = new bn(1).toRed(red);
      if (!k)
        k = Math.max(1, len / 48 | 0);
      var n1 = n.subn(1);
      for (var s = 0; !n1.testn(s); s++) {
      }
      var d = n.shrn(s);
      var rn1 = n1.toRed(red);
      for (; k > 0; k--) {
        var a = this._randrange(new bn(2), n1);
        var g = n.gcd(a);
        if (g.cmpn(1) !== 0)
          return g;
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
          continue;
        for (var i = 1; i < s; i++) {
          x = x.redSqr();
          if (x.cmp(rone) === 0)
            return x.fromRed().subn(1).gcd(n);
          if (x.cmp(rn1) === 0)
            break;
        }
        if (i === s) {
          x = x.redSqr();
          return x.fromRed().subn(1).gcd(n);
        }
      }
      return false;
    };
  }
});

// node_modules/.pnpm/diffie-hellman@5.0.3/node_modules/diffie-hellman/lib/generatePrime.js
var require_generatePrime = __commonJS({
  "node_modules/.pnpm/diffie-hellman@5.0.3/node_modules/diffie-hellman/lib/generatePrime.js"(exports, module) {
    init_shim();
    var randomBytes = require_browser();
    module.exports = findPrime;
    findPrime.simpleSieve = simpleSieve;
    findPrime.fermatTest = fermatTest;
    var BN = require_bn();
    var TWENTYFOUR = new BN(24);
    var MillerRabin = require_mr();
    var millerRabin = new MillerRabin();
    var ONE = new BN(1);
    var TWO = new BN(2);
    var FIVE = new BN(5);
    var SIXTEEN = new BN(16);
    var EIGHT = new BN(8);
    var TEN = new BN(10);
    var THREE = new BN(3);
    var SEVEN = new BN(7);
    var ELEVEN = new BN(11);
    var FOUR = new BN(4);
    var TWELVE = new BN(12);
    var primes = null;
    function _getPrimes() {
      if (primes !== null)
        return primes;
      var limit = 1048576;
      var res = [];
      res[0] = 2;
      for (var i = 1, k = 3; k < limit; k += 2) {
        var sqrt = Math.ceil(Math.sqrt(k));
        for (var j = 0; j < i && res[j] <= sqrt; j++)
          if (k % res[j] === 0)
            break;
        if (i !== j && res[j] <= sqrt)
          continue;
        res[i++] = k;
      }
      primes = res;
      return res;
    }
    function simpleSieve(p) {
      var primes2 = _getPrimes();
      for (var i = 0; i < primes2.length; i++)
        if (p.modn(primes2[i]) === 0) {
          if (p.cmpn(primes2[i]) === 0) {
            return true;
          } else {
            return false;
          }
        }
      return true;
    }
    function fermatTest(p) {
      var red = BN.mont(p);
      return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
    }
    function findPrime(bits, gen) {
      if (bits < 16) {
        if (gen === 2 || gen === 5) {
          return new BN([140, 123]);
        } else {
          return new BN([140, 39]);
        }
      }
      gen = new BN(gen);
      var num, n2;
      while (true) {
        num = new BN(randomBytes(Math.ceil(bits / 8)));
        while (num.bitLength() > bits) {
          num.ishrn(1);
        }
        if (num.isEven()) {
          num.iadd(ONE);
        }
        if (!num.testn(1)) {
          num.iadd(TWO);
        }
        if (!gen.cmp(TWO)) {
          while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
            num.iadd(FOUR);
          }
        } else if (!gen.cmp(FIVE)) {
          while (num.mod(TEN).cmp(THREE)) {
            num.iadd(FOUR);
          }
        }
        n2 = num.shrn(1);
        if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) {
          return num;
        }
      }
    }
  }
});

// node_modules/.pnpm/diffie-hellman@5.0.3/node_modules/diffie-hellman/lib/primes.json
var require_primes = __commonJS({
  "node_modules/.pnpm/diffie-hellman@5.0.3/node_modules/diffie-hellman/lib/primes.json"(exports, module) {
    module.exports = {
      modp1: {
        gen: "02",
        prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
      },
      modp2: {
        gen: "02",
        prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
      },
      modp5: {
        gen: "02",
        prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
      },
      modp14: {
        gen: "02",
        prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
      },
      modp15: {
        gen: "02",
        prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
      },
      modp16: {
        gen: "02",
        prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
      },
      modp17: {
        gen: "02",
        prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
      },
      modp18: {
        gen: "02",
        prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
      }
    };
  }
});

// node_modules/.pnpm/diffie-hellman@5.0.3/node_modules/diffie-hellman/lib/dh.js
var require_dh = __commonJS({
  "node_modules/.pnpm/diffie-hellman@5.0.3/node_modules/diffie-hellman/lib/dh.js"(exports, module) {
    init_shim();
    var BN = require_bn();
    var MillerRabin = require_mr();
    var millerRabin = new MillerRabin();
    var TWENTYFOUR = new BN(24);
    var ELEVEN = new BN(11);
    var TEN = new BN(10);
    var THREE = new BN(3);
    var SEVEN = new BN(7);
    var primes = require_generatePrime();
    var randomBytes = require_browser();
    module.exports = DH;
    function setPublicKey(pub, enc) {
      enc = enc || "utf8";
      if (!import_buffer.Buffer.isBuffer(pub)) {
        pub = new import_buffer.Buffer(pub, enc);
      }
      this._pub = new BN(pub);
      return this;
    }
    function setPrivateKey(priv, enc) {
      enc = enc || "utf8";
      if (!import_buffer.Buffer.isBuffer(priv)) {
        priv = new import_buffer.Buffer(priv, enc);
      }
      this._priv = new BN(priv);
      return this;
    }
    var primeCache = {};
    function checkPrime(prime, generator) {
      var gen = generator.toString("hex");
      var hex = [gen, prime.toString(16)].join("_");
      if (hex in primeCache) {
        return primeCache[hex];
      }
      var error = 0;
      if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {
        error += 1;
        if (gen === "02" || gen === "05") {
          error += 8;
        } else {
          error += 4;
        }
        primeCache[hex] = error;
        return error;
      }
      if (!millerRabin.test(prime.shrn(1))) {
        error += 2;
      }
      var rem;
      switch (gen) {
        case "02":
          if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
            error += 8;
          }
          break;
        case "05":
          rem = prime.mod(TEN);
          if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
            error += 8;
          }
          break;
        default:
          error += 4;
      }
      primeCache[hex] = error;
      return error;
    }
    function DH(prime, generator, malleable) {
      this.setGenerator(generator);
      this.__prime = new BN(prime);
      this._prime = BN.mont(this.__prime);
      this._primeLen = prime.length;
      this._pub = void 0;
      this._priv = void 0;
      this._primeCode = void 0;
      if (malleable) {
        this.setPublicKey = setPublicKey;
        this.setPrivateKey = setPrivateKey;
      } else {
        this._primeCode = 8;
      }
    }
    Object.defineProperty(DH.prototype, "verifyError", {
      enumerable: true,
      get: function() {
        if (typeof this._primeCode !== "number") {
          this._primeCode = checkPrime(this.__prime, this.__gen);
        }
        return this._primeCode;
      }
    });
    DH.prototype.generateKeys = function() {
      if (!this._priv) {
        this._priv = new BN(randomBytes(this._primeLen));
      }
      this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
      return this.getPublicKey();
    };
    DH.prototype.computeSecret = function(other) {
      other = new BN(other);
      other = other.toRed(this._prime);
      var secret = other.redPow(this._priv).fromRed();
      var out = new import_buffer.Buffer(secret.toArray());
      var prime = this.getPrime();
      if (out.length < prime.length) {
        var front = new import_buffer.Buffer(prime.length - out.length);
        front.fill(0);
        out = import_buffer.Buffer.concat([front, out]);
      }
      return out;
    };
    DH.prototype.getPublicKey = function getPublicKey(enc) {
      return formatReturnValue(this._pub, enc);
    };
    DH.prototype.getPrivateKey = function getPrivateKey(enc) {
      return formatReturnValue(this._priv, enc);
    };
    DH.prototype.getPrime = function(enc) {
      return formatReturnValue(this.__prime, enc);
    };
    DH.prototype.getGenerator = function(enc) {
      return formatReturnValue(this._gen, enc);
    };
    DH.prototype.setGenerator = function(gen, enc) {
      enc = enc || "utf8";
      if (!import_buffer.Buffer.isBuffer(gen)) {
        gen = new import_buffer.Buffer(gen, enc);
      }
      this.__gen = gen;
      this._gen = new BN(gen);
      return this;
    };
    function formatReturnValue(bn, enc) {
      var buf = new import_buffer.Buffer(bn.toArray());
      if (!enc) {
        return buf;
      } else {
        return buf.toString(enc);
      }
    }
  }
});

// node_modules/.pnpm/diffie-hellman@5.0.3/node_modules/diffie-hellman/browser.js
var require_browser8 = __commonJS({
  "node_modules/.pnpm/diffie-hellman@5.0.3/node_modules/diffie-hellman/browser.js"(exports) {
    init_shim();
    var generatePrime = require_generatePrime();
    var primes = require_primes();
    var DH = require_dh();
    function getDiffieHellman(mod) {
      var prime = new import_buffer.Buffer(primes[mod].prime, "hex");
      var gen = new import_buffer.Buffer(primes[mod].gen, "hex");
      return new DH(prime, gen);
    }
    var ENCODINGS = {
      "binary": true,
      "hex": true,
      "base64": true
    };
    function createDiffieHellman(prime, enc, generator, genc) {
      if (import_buffer.Buffer.isBuffer(enc) || ENCODINGS[enc] === void 0) {
        return createDiffieHellman(prime, "binary", enc, generator);
      }
      enc = enc || "binary";
      genc = genc || "binary";
      generator = generator || new import_buffer.Buffer([2]);
      if (!import_buffer.Buffer.isBuffer(generator)) {
        generator = new import_buffer.Buffer(generator, genc);
      }
      if (typeof prime === "number") {
        return new DH(generatePrime(prime, generator), generator, true);
      }
      if (!import_buffer.Buffer.isBuffer(prime)) {
        prime = new import_buffer.Buffer(prime, enc);
      }
      return new DH(prime, generator, true);
    }
    exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
    exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;
  }
});

// node_modules/.pnpm/bn.js@5.2.1/node_modules/bn.js/lib/bn.js
var require_bn2 = __commonJS({
  "node_modules/.pnpm/bn.js@5.2.1/node_modules/bn.js/lib/bn.js"(exports, module) {
    init_shim();
    (function(module2, exports2) {
      "use strict";
      function assert(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits2(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN;
      } else {
        exports2.BN = BN;
      }
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require_buffer().Buffer;
        }
      } catch (e) {
      }
      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initArray = function _initArray(number, base, endian) {
        assert(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert(false, "Invalid character in " + string);
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
      BN.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert(c >= 0 && b < mul, "Invalid character");
          r += b;
        }
        return r;
      }
      BN.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };
      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
        } catch (e) {
          BN.prototype.inspect = inspect;
        }
      } else {
        BN.prototype.inspect = inspect;
      }
      function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN.prototype.toString = function toString3(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON2() {
        return this.toString(16, 2);
      };
      if (Buffer2) {
        BN.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer2, endian, length);
        };
      }
      BN.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this._strip();
      };
      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this._strip();
      };
      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
          return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert(carry === 0);
        assert((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this._strip();
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN(1);
        var B = new BN(0);
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN.red = function red(num) {
        return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits2(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits2(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits2(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits2(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN._prime = function prime(name) {
        if (primes[name])
          return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits2(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
          return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/.pnpm/browserify-rsa@4.1.0/node_modules/browserify-rsa/index.js
var require_browserify_rsa = __commonJS({
  "node_modules/.pnpm/browserify-rsa@4.1.0/node_modules/browserify-rsa/index.js"(exports, module) {
    init_shim();
    var BN = require_bn2();
    var randomBytes = require_browser();
    function blind(priv) {
      var r = getr(priv);
      var blinder = r.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed();
      return { blinder, unblinder: r.invm(priv.modulus) };
    }
    function getr(priv) {
      var len = priv.modulus.byteLength();
      var r;
      do {
        r = new BN(randomBytes(len));
      } while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2));
      return r;
    }
    function crt(msg, priv) {
      var blinds = blind(priv);
      var len = priv.modulus.byteLength();
      var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus);
      var c1 = blinded.toRed(BN.mont(priv.prime1));
      var c2 = blinded.toRed(BN.mont(priv.prime2));
      var qinv = priv.coefficient;
      var p = priv.prime1;
      var q = priv.prime2;
      var m1 = c1.redPow(priv.exponent1).fromRed();
      var m2 = c2.redPow(priv.exponent2).fromRed();
      var h = m1.isub(m2).imul(qinv).umod(p).imul(q);
      return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(import_buffer.Buffer, "be", len);
    }
    crt.getr = getr;
    module.exports = crt;
  }
});

// node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/package.json
var require_package = __commonJS({
  "node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/package.json"(exports, module) {
    module.exports = {
      name: "elliptic",
      version: "6.5.4",
      description: "EC cryptography",
      main: "lib/elliptic.js",
      files: [
        "lib"
      ],
      scripts: {
        lint: "eslint lib test",
        "lint:fix": "npm run lint -- --fix",
        unit: "istanbul test _mocha --reporter=spec test/index.js",
        test: "npm run lint && npm run unit",
        version: "grunt dist && git add dist/"
      },
      repository: {
        type: "git",
        url: "git@github.com:indutny/elliptic"
      },
      keywords: [
        "EC",
        "Elliptic",
        "curve",
        "Cryptography"
      ],
      author: "Fedor Indutny <fedor@indutny.com>",
      license: "MIT",
      bugs: {
        url: "https://github.com/indutny/elliptic/issues"
      },
      homepage: "https://github.com/indutny/elliptic",
      devDependencies: {
        brfs: "^2.0.2",
        coveralls: "^3.1.0",
        eslint: "^7.6.0",
        grunt: "^1.2.1",
        "grunt-browserify": "^5.3.0",
        "grunt-cli": "^1.3.2",
        "grunt-contrib-connect": "^3.0.0",
        "grunt-contrib-copy": "^1.0.0",
        "grunt-contrib-uglify": "^5.0.0",
        "grunt-mocha-istanbul": "^5.0.2",
        "grunt-saucelabs": "^9.0.1",
        istanbul: "^0.4.5",
        mocha: "^8.0.1"
      },
      dependencies: {
        "bn.js": "^4.11.9",
        brorand: "^1.1.0",
        "hash.js": "^1.0.0",
        "hmac-drbg": "^1.0.1",
        inherits: "^2.0.4",
        "minimalistic-assert": "^1.0.1",
        "minimalistic-crypto-utils": "^1.0.1"
      }
    };
  }
});

// node_modules/.pnpm/minimalistic-crypto-utils@1.0.1/node_modules/minimalistic-crypto-utils/lib/utils.js
var require_utils2 = __commonJS({
  "node_modules/.pnpm/minimalistic-crypto-utils@1.0.1/node_modules/minimalistic-crypto-utils/lib/utils.js"(exports) {
    "use strict";
    init_shim();
    var utils = exports;
    function toArray2(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg !== "string") {
        for (var i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
        return res;
      }
      if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (var i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      } else {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 255;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      }
      return res;
    }
    utils.toArray = toArray2;
    function zero2(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    utils.zero2 = zero2;
    function toHex(msg) {
      var res = "";
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    utils.toHex = toHex;
    utils.encode = function encode3(arr, enc) {
      if (enc === "hex")
        return toHex(arr);
      else
        return arr;
    };
  }
});

// node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/utils.js
var require_utils3 = __commonJS({
  "node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/utils.js"(exports) {
    "use strict";
    init_shim();
    var utils = exports;
    var BN = require_bn();
    var minAssert = require_minimalistic_assert();
    var minUtils = require_utils2();
    utils.assert = minAssert;
    utils.toArray = minUtils.toArray;
    utils.zero2 = minUtils.zero2;
    utils.toHex = minUtils.toHex;
    utils.encode = minUtils.encode;
    function getNAF(num, w, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      naf.fill(0);
      var ws = 1 << w + 1;
      var k = num.clone();
      for (var i = 0; i < naf.length; i++) {
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
          if (mod > (ws >> 1) - 1)
            z = (ws >> 1) - mod;
          else
            z = mod;
          k.isubn(z);
        } else {
          z = 0;
        }
        naf[i] = z;
        k.iushrn(1);
      }
      return naf;
    }
    utils.getNAF = getNAF;
    function getJSF(k1, k2) {
      var jsf = [
        [],
        []
      ];
      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = k1.andln(7) + d1 & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          m8 = k2.andln(7) + d2 & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u2 = -m24;
          else
            u2 = m24;
        }
        jsf[1].push(u2);
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
          d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }
      return jsf;
    }
    utils.getJSF = getJSF;
    function cachedProperty(obj, name, computer) {
      var key = "_" + name;
      obj.prototype[name] = function cachedProperty2() {
        return this[key] !== void 0 ? this[key] : this[key] = computer.call(this);
      };
    }
    utils.cachedProperty = cachedProperty;
    function parseBytes(bytes) {
      return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
    }
    utils.parseBytes = parseBytes;
    function intFromLE(bytes) {
      return new BN(bytes, "hex", "le");
    }
    utils.intFromLE = intFromLE;
  }
});

// node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/base.js
var require_base = __commonJS({
  "node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/base.js"(exports, module) {
    "use strict";
    init_shim();
    var BN = require_bn();
    var utils = require_utils3();
    var getNAF = utils.getNAF;
    var getJSF = utils.getJSF;
    var assert = utils.assert;
    function BaseCurve(type, conf) {
      this.type = type;
      this.p = new BN(conf.p, 16);
      this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
      this.zero = new BN(0).toRed(this.red);
      this.one = new BN(1).toRed(this.red);
      this.two = new BN(2).toRed(this.red);
      this.n = conf.n && new BN(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);
      this._bitLength = this.n ? this.n.bitLength() : 0;
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    module.exports = BaseCurve;
    BaseCurve.prototype.point = function point() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype.validate = function validate2() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
      assert(p.precomputed);
      var doubles = p._getDoubles();
      var naf = getNAF(k, 1, this._bitLength);
      var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;
      var repr = [];
      var j;
      var nafW;
      for (j = 0; j < naf.length; j += doubles.step) {
        nafW = 0;
        for (var l = j + doubles.step - 1; l >= j; l--)
          nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
      }
      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i = I; i > 0; i--) {
        for (j = 0; j < repr.length; j++) {
          nafW = repr[j];
          if (nafW === i)
            b = b.mixedAdd(doubles.points[j]);
          else if (nafW === -i)
            b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
      }
      return a.toP();
    };
    BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
      var w = 4;
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;
      var naf = getNAF(k, w, this._bitLength);
      var acc = this.jpoint(null, null, null);
      for (var i = naf.length - 1; i >= 0; i--) {
        for (var l = 0; i >= 0 && naf[i] === 0; i--)
          l++;
        if (i >= 0)
          l++;
        acc = acc.dblp(l);
        if (i < 0)
          break;
        var z = naf[i];
        assert(z !== 0);
        if (p.type === "affine") {
          if (z > 0)
            acc = acc.mixedAdd(wnd[z - 1 >> 1]);
          else
            acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else {
          if (z > 0)
            acc = acc.add(wnd[z - 1 >> 1]);
          else
            acc = acc.add(wnd[-z - 1 >> 1].neg());
        }
      }
      return p.type === "affine" ? acc.toP() : acc;
    };
    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;
      var max = 0;
      var i;
      var j;
      var p;
      for (i = 0; i < len; i++) {
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
      }
      for (i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
          naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
          naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
          max = Math.max(naf[a].length, max);
          max = Math.max(naf[b].length, max);
          continue;
        }
        var comb = [
          points[a],
          null,
          null,
          points[b]
        ];
        if (points[a].y.cmp(points[b].y) === 0) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
          -3,
          -1,
          -5,
          -7,
          0,
          7,
          5,
          1,
          3
        ];
        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (j = 0; j < max; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;
          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }
      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i = max; i >= 0; i--) {
        var k = 0;
        while (i >= 0) {
          var zero = true;
          for (j = 0; j < len; j++) {
            tmp[j] = naf[j][i] | 0;
            if (tmp[j] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k++;
          i--;
        }
        if (i >= 0)
          k++;
        acc = acc.dblp(k);
        if (i < 0)
          break;
        for (j = 0; j < len; j++) {
          var z = tmp[j];
          p;
          if (z === 0)
            continue;
          else if (z > 0)
            p = wnd[j][z - 1 >> 1];
          else if (z < 0)
            p = wnd[j][-z - 1 >> 1].neg();
          if (p.type === "affine")
            acc = acc.mixedAdd(p);
          else
            acc = acc.add(p);
        }
      }
      for (i = 0; i < len; i++)
        wnd[i] = null;
      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };
    function BasePoint(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
    }
    BaseCurve.BasePoint = BasePoint;
    BasePoint.prototype.eq = function eq() {
      throw new Error("Not implemented");
    };
    BasePoint.prototype.validate = function validate2() {
      return this.curve.validate(this);
    };
    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils.toArray(bytes, enc);
      var len = this.p.byteLength();
      if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 6)
          assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 7)
          assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(
          bytes.slice(1, 1 + len),
          bytes.slice(1 + len, 1 + 2 * len)
        );
        return res;
      } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
      }
      throw new Error("Unknown point format");
    };
    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };
    BasePoint.prototype._encode = function _encode(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray("be", len);
      if (compact)
        return [this.getY().isEven() ? 2 : 3].concat(x);
      return [4].concat(x, this.getY().toArray("be", len));
    };
    BasePoint.prototype.encode = function encode3(enc, compact) {
      return utils.encode(this._encode(compact), enc);
    };
    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed)
        return this;
      var precomputed = {
        doubles: null,
        naf: null,
        beta: null
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;
      return this;
    };
    BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
      if (!this.precomputed)
        return false;
      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;
      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
    };
    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;
      var doubles = [this];
      var acc = this;
      for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step,
        points: doubles
      };
    };
    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;
      var res = [this];
      var max = (1 << wnd) - 1;
      var dbl = max === 1 ? null : this.dbl();
      for (var i = 1; i < max; i++)
        res[i] = res[i - 1].add(dbl);
      return {
        wnd,
        points: res
      };
    };
    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };
    BasePoint.prototype.dblp = function dblp(k) {
      var r = this;
      for (var i = 0; i < k; i++)
        r = r.dbl();
      return r;
    };
  }
});

// node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/short.js
var require_short = __commonJS({
  "node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/short.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils3();
    var BN = require_bn();
    var inherits2 = require_inherits_browser();
    var Base = require_base();
    var assert = utils.assert;
    function ShortCurve(conf) {
      Base.call(this, "short", conf);
      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();
      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits2(ShortCurve, Base);
    module.exports = ShortCurve;
    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new BN(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new BN(conf.lambda, 16);
      } else {
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new BN(vec.a, 16),
            b: new BN(vec.b, 16)
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }
      return {
        beta,
        lambda,
        basis
      };
    };
    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      var red = num === this.p ? this.red : BN.mont(num);
      var tinv = new BN(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();
      var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [l1, l2];
    };
    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
      var u = lambda;
      var v = this.n.clone();
      var x1 = new BN(1);
      var y1 = new BN(0);
      var x2 = new BN(0);
      var y2 = new BN(1);
      var a0;
      var b0;
      var a1;
      var b1;
      var a2;
      var b2;
      var prevR;
      var i = 0;
      var r;
      var x;
      while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r.neg();
          b1 = x;
        } else if (a1 && ++i === 2) {
          break;
        }
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }
      a2 = r.neg();
      b2 = x;
      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }
      return [
        { a: a1, b: b1 },
        { a: a2, b: b2 }
      ];
    };
    ShortCurve.prototype._endoSplit = function _endoSplit(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];
      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);
      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return { k1, k2 };
    };
    ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN(x, 16);
      if (!x.red)
        x = x.toRed(this.red);
      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();
      return this.point(x, y);
    };
    ShortCurve.prototype.validate = function validate2(point) {
      if (point.inf)
        return true;
      var x = point.x;
      var y = point.y;
      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y.redSqr().redISub(rhs).cmpn(0) === 0;
    };
    ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };
    function Point(curve, x, y, isRed) {
      Base.BasePoint.call(this, curve, "affine");
      if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }
    inherits2(Point, Base.BasePoint);
    ShortCurve.prototype.point = function point(x, y, isRed) {
      return new Point(this, x, y, isRed);
    };
    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point.fromJSON(this, obj, red);
    };
    Point.prototype._getBeta = function _getBeta() {
      if (!this.curve.endo)
        return;
      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;
      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
          return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul)
          }
        };
      }
      return beta;
    };
    Point.prototype.toJSON = function toJSON2() {
      if (!this.precomputed)
        return [this.x, this.y];
      return [this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1)
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1)
        }
      }];
    };
    Point.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === "string")
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;
      function obj2point(obj2) {
        return curve.point(obj2[0], obj2[1], red);
      }
      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [res].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [res].concat(pre.naf.points.map(obj2point))
        }
      };
      return res;
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };
    Point.prototype.add = function add(p) {
      if (this.inf)
        return p;
      if (p.inf)
        return this;
      if (this.eq(p))
        return this.dbl();
      if (this.neg().eq(p))
        return this.curve.point(null, null);
      if (this.x.cmp(p.x) === 0)
        return this.curve.point(null, null);
      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0)
        c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.dbl = function dbl() {
      if (this.inf)
        return this;
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);
      var a = this.curve.a;
      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.getX = function getX() {
      return this.x.fromRed();
    };
    Point.prototype.getY = function getY() {
      return this.y.fromRed();
    };
    Point.prototype.mul = function mul(k) {
      k = new BN(k, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([this], [k]);
      else
        return this.curve._wnafMul(this, k);
    };
    Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };
    Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };
    Point.prototype.eq = function eq(p) {
      return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
    };
    Point.prototype.neg = function neg(_precompute) {
      if (this.inf)
        return this;
      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
          return p.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate)
          }
        };
      }
      return res;
    };
    Point.prototype.toJ = function toJ() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);
      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };
    function JPoint(curve, x, y, z) {
      Base.BasePoint.call(this, curve, "jacobian");
      if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN(0);
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = new BN(z, 16);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;
    }
    inherits2(JPoint, Base.BasePoint);
    ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
      return new JPoint(this, x, y, z);
    };
    JPoint.prototype.toP = function toP() {
      if (this.isInfinity())
        return this.curve.point(null, null);
      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);
      return this.curve.point(ax, ay);
    };
    JPoint.prototype.neg = function neg() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };
    JPoint.prototype.add = function add(p) {
      if (this.isInfinity())
        return p;
      if (p.isInfinity())
        return this;
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));
      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mixedAdd = function mixedAdd(p) {
      if (this.isInfinity())
        return p.toJ();
      if (p.isInfinity())
        return this;
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);
      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.dblp = function dblp(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();
      var i;
      if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for (i = 0; i < pow; i++)
          r = r.dbl();
        return r;
      }
      var a = this.curve.a;
      var tinv = this.curve.tinv;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jyd = jy.redAdd(jy);
      for (i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow)
          jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
      }
      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };
    JPoint.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;
      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };
    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m = xx.redAdd(xx).redIAdd(xx);
        var t = m.redSqr().redISub(s).redISub(s);
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        nx = t;
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var a = this.x.redSqr();
        var b = this.y.redSqr();
        var c = b.redSqr();
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        var e = a.redAdd(a).redIAdd(a);
        var f2 = e.redSqr();
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        nx = f2.redISub(d).redISub(d);
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        var t = m.redSqr().redISub(s).redISub(s);
        nx = t;
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var delta = this.z.redSqr();
        var gamma = this.y.redSqr();
        var beta = this.x.redMul(gamma);
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._dbl = function _dbl() {
      var a = this.curve.a;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var zz = this.z.redSqr();
      var yyyy = yy.redSqr();
      var m = xx.redAdd(xx).redIAdd(xx);
      var mm = m.redSqr();
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      var ee = e.redSqr();
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mul = function mul(k, kbase) {
      k = new BN(k, kbase);
      return this.curve._wnafMul(this, k);
    };
    JPoint.prototype.eq = function eq(p) {
      if (p.type === "affine")
        return this.eq(p.toJ());
      if (this === p)
        return true;
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
        return false;
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
    };
    JPoint.prototype.eqXToP = function eqXToP(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0)
        return true;
      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    JPoint.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC JPoint Infinity>";
      return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
    };
    JPoint.prototype.isInfinity = function isInfinity() {
      return this.z.cmpn(0) === 0;
    };
  }
});

// node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/mont.js
var require_mont = __commonJS({
  "node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/mont.js"(exports, module) {
    "use strict";
    init_shim();
    var BN = require_bn();
    var inherits2 = require_inherits_browser();
    var Base = require_base();
    var utils = require_utils3();
    function MontCurve(conf) {
      Base.call(this, "mont", conf);
      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.i4 = new BN(4).toRed(this.red).redInvm();
      this.two = new BN(2).toRed(this.red);
      this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    inherits2(MontCurve, Base);
    module.exports = MontCurve;
    MontCurve.prototype.validate = function validate2(point) {
      var x = point.normalize().x;
      var x2 = x.redSqr();
      var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
      var y = rhs.redSqrt();
      return y.redSqr().cmp(rhs) === 0;
    };
    function Point(curve, x, z) {
      Base.BasePoint.call(this, curve, "projective");
      if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
      } else {
        this.x = new BN(x, 16);
        this.z = new BN(z, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
      }
    }
    inherits2(Point, Base.BasePoint);
    MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      return this.point(utils.toArray(bytes, enc), 1);
    };
    MontCurve.prototype.point = function point(x, z) {
      return new Point(this, x, z);
    };
    MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };
    Point.prototype.precompute = function precompute() {
    };
    Point.prototype._encode = function _encode() {
      return this.getX().toArray("be", this.curve.p.byteLength());
    };
    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1] || curve.one);
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.z.cmpn(0) === 0;
    };
    Point.prototype.dbl = function dbl() {
      var a = this.x.redAdd(this.z);
      var aa = a.redSqr();
      var b = this.x.redSub(this.z);
      var bb = b.redSqr();
      var c = aa.redSub(bb);
      var nx = aa.redMul(bb);
      var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
      return this.curve.point(nx, nz);
    };
    Point.prototype.add = function add() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point.prototype.diffAdd = function diffAdd(p, diff) {
      var a = this.x.redAdd(this.z);
      var b = this.x.redSub(this.z);
      var c = p.x.redAdd(p.z);
      var d = p.x.redSub(p.z);
      var da = d.redMul(a);
      var cb = c.redMul(b);
      var nx = diff.z.redMul(da.redAdd(cb).redSqr());
      var nz = diff.x.redMul(da.redISub(cb).redSqr());
      return this.curve.point(nx, nz);
    };
    Point.prototype.mul = function mul(k) {
      var t = k.clone();
      var a = this;
      var b = this.curve.point(null, null);
      var c = this;
      for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
        bits.push(t.andln(1));
      for (var i = bits.length - 1; i >= 0; i--) {
        if (bits[i] === 0) {
          a = a.diffAdd(b, c);
          b = b.dbl();
        } else {
          b = a.diffAdd(b, c);
          a = a.dbl();
        }
      }
      return b;
    };
    Point.prototype.mulAdd = function mulAdd() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point.prototype.jumlAdd = function jumlAdd() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point.prototype.eq = function eq(other) {
      return this.getX().cmp(other.getX()) === 0;
    };
    Point.prototype.normalize = function normalize() {
      this.x = this.x.redMul(this.z.redInvm());
      this.z = this.curve.one;
      return this;
    };
    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };
  }
});

// node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/edwards.js
var require_edwards = __commonJS({
  "node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/edwards.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils3();
    var BN = require_bn();
    var inherits2 = require_inherits_browser();
    var Base = require_base();
    var assert = utils.assert;
    function EdwardsCurve(conf) {
      this.twisted = (conf.a | 0) !== 1;
      this.mOneA = this.twisted && (conf.a | 0) === -1;
      this.extended = this.mOneA;
      Base.call(this, "edwards", conf);
      this.a = new BN(conf.a, 16).umod(this.red.m);
      this.a = this.a.toRed(this.red);
      this.c = new BN(conf.c, 16).toRed(this.red);
      this.c2 = this.c.redSqr();
      this.d = new BN(conf.d, 16).toRed(this.red);
      this.dd = this.d.redAdd(this.d);
      assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
      this.oneC = (conf.c | 0) === 1;
    }
    inherits2(EdwardsCurve, Base);
    module.exports = EdwardsCurve;
    EdwardsCurve.prototype._mulA = function _mulA(num) {
      if (this.mOneA)
        return num.redNeg();
      else
        return this.a.redMul(num);
    };
    EdwardsCurve.prototype._mulC = function _mulC(num) {
      if (this.oneC)
        return num;
      else
        return this.c.redMul(num);
    };
    EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
      return this.point(x, y, z, t);
    };
    EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN(x, 16);
      if (!x.red)
        x = x.toRed(this.red);
      var x2 = x.redSqr();
      var rhs = this.c2.redSub(this.a.redMul(x2));
      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
      var y2 = rhs.redMul(lhs.redInvm());
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();
      return this.point(x, y);
    };
    EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
      y = new BN(y, 16);
      if (!y.red)
        y = y.toRed(this.red);
      var y2 = y.redSqr();
      var lhs = y2.redSub(this.c2);
      var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
      var x2 = lhs.redMul(rhs.redInvm());
      if (x2.cmp(this.zero) === 0) {
        if (odd)
          throw new Error("invalid point");
        else
          return this.point(this.zero, y);
      }
      var x = x2.redSqrt();
      if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      if (x.fromRed().isOdd() !== odd)
        x = x.redNeg();
      return this.point(x, y);
    };
    EdwardsCurve.prototype.validate = function validate2(point) {
      if (point.isInfinity())
        return true;
      point.normalize();
      var x2 = point.x.redSqr();
      var y2 = point.y.redSqr();
      var lhs = x2.redMul(this.a).redAdd(y2);
      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
      return lhs.cmp(rhs) === 0;
    };
    function Point(curve, x, y, z, t) {
      Base.BasePoint.call(this, curve, "projective");
      if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = z ? new BN(z, 16) : this.curve.one;
        this.t = t && new BN(t, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red)
          this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        if (this.curve.extended && !this.t) {
          this.t = this.x.redMul(this.y);
          if (!this.zOne)
            this.t = this.t.redMul(this.z.redInvm());
        }
      }
    }
    inherits2(Point, Base.BasePoint);
    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };
    EdwardsCurve.prototype.point = function point(x, y, z, t) {
      return new Point(this, x, y, z, t);
    };
    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1], obj[2]);
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
    };
    Point.prototype._extDbl = function _extDbl() {
      var a = this.x.redSqr();
      var b = this.y.redSqr();
      var c = this.z.redSqr();
      c = c.redIAdd(c);
      var d = this.curve._mulA(a);
      var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
      var g = d.redAdd(b);
      var f2 = g.redSub(c);
      var h = d.redSub(b);
      var nx = e.redMul(f2);
      var ny = g.redMul(h);
      var nt = e.redMul(h);
      var nz = f2.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };
    Point.prototype._projDbl = function _projDbl() {
      var b = this.x.redAdd(this.y).redSqr();
      var c = this.x.redSqr();
      var d = this.y.redSqr();
      var nx;
      var ny;
      var nz;
      var e;
      var h;
      var j;
      if (this.curve.twisted) {
        e = this.curve._mulA(c);
        var f2 = e.redAdd(d);
        if (this.zOne) {
          nx = b.redSub(c).redSub(d).redMul(f2.redSub(this.curve.two));
          ny = f2.redMul(e.redSub(d));
          nz = f2.redSqr().redSub(f2).redSub(f2);
        } else {
          h = this.z.redSqr();
          j = f2.redSub(h).redISub(h);
          nx = b.redSub(c).redISub(d).redMul(j);
          ny = f2.redMul(e.redSub(d));
          nz = f2.redMul(j);
        }
      } else {
        e = c.redAdd(d);
        h = this.curve._mulC(this.z).redSqr();
        j = e.redSub(h).redSub(h);
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        nz = e.redMul(j);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;
      if (this.curve.extended)
        return this._extDbl();
      else
        return this._projDbl();
    };
    Point.prototype._extAdd = function _extAdd(p) {
      var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
      var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
      var c = this.t.redMul(this.curve.dd).redMul(p.t);
      var d = this.z.redMul(p.z.redAdd(p.z));
      var e = b.redSub(a);
      var f2 = d.redSub(c);
      var g = d.redAdd(c);
      var h = b.redAdd(a);
      var nx = e.redMul(f2);
      var ny = g.redMul(h);
      var nt = e.redMul(h);
      var nz = f2.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };
    Point.prototype._projAdd = function _projAdd(p) {
      var a = this.z.redMul(p.z);
      var b = a.redSqr();
      var c = this.x.redMul(p.x);
      var d = this.y.redMul(p.y);
      var e = this.curve.d.redMul(c).redMul(d);
      var f2 = b.redSub(e);
      var g = b.redAdd(e);
      var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
      var nx = a.redMul(f2).redMul(tmp);
      var ny;
      var nz;
      if (this.curve.twisted) {
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        nz = f2.redMul(g);
      } else {
        ny = a.redMul(g).redMul(d.redSub(c));
        nz = this.curve._mulC(f2).redMul(g);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point.prototype.add = function add(p) {
      if (this.isInfinity())
        return p;
      if (p.isInfinity())
        return this;
      if (this.curve.extended)
        return this._extAdd(p);
      else
        return this._projAdd(p);
    };
    Point.prototype.mul = function mul(k) {
      if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else
        return this.curve._wnafMul(this, k);
    };
    Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
    };
    Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
    };
    Point.prototype.normalize = function normalize() {
      if (this.zOne)
        return this;
      var zi = this.z.redInvm();
      this.x = this.x.redMul(zi);
      this.y = this.y.redMul(zi);
      if (this.t)
        this.t = this.t.redMul(zi);
      this.z = this.curve.one;
      this.zOne = true;
      return this;
    };
    Point.prototype.neg = function neg() {
      return this.curve.point(
        this.x.redNeg(),
        this.y,
        this.z,
        this.t && this.t.redNeg()
      );
    };
    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };
    Point.prototype.getY = function getY() {
      this.normalize();
      return this.y.fromRed();
    };
    Point.prototype.eq = function eq(other) {
      return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
    };
    Point.prototype.eqXToP = function eqXToP(x) {
      var rx = x.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(rx) === 0)
        return true;
      var xc = x.clone();
      var t = this.curve.redN.redMul(this.z);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    Point.prototype.toP = Point.prototype.normalize;
    Point.prototype.mixedAdd = Point.prototype.add;
  }
});

// node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/index.js
var require_curve = __commonJS({
  "node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/index.js"(exports) {
    "use strict";
    init_shim();
    var curve = exports;
    curve.base = require_base();
    curve.short = require_short();
    curve.mont = require_mont();
    curve.edwards = require_edwards();
  }
});

// node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/utils.js
var require_utils4 = __commonJS({
  "node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/utils.js"(exports) {
    "use strict";
    init_shim();
    var assert = require_minimalistic_assert();
    var inherits2 = require_inherits_browser();
    exports.inherits = inherits2;
    function isSurrogatePair(msg, i) {
      if ((msg.charCodeAt(i) & 64512) !== 55296) {
        return false;
      }
      if (i < 0 || i + 1 >= msg.length) {
        return false;
      }
      return (msg.charCodeAt(i + 1) & 64512) === 56320;
    }
    function toArray2(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg === "string") {
        if (!enc) {
          var p = 0;
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            if (c < 128) {
              res[p++] = c;
            } else if (c < 2048) {
              res[p++] = c >> 6 | 192;
              res[p++] = c & 63 | 128;
            } else if (isSurrogatePair(msg, i)) {
              c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i) & 1023);
              res[p++] = c >> 18 | 240;
              res[p++] = c >> 12 & 63 | 128;
              res[p++] = c >> 6 & 63 | 128;
              res[p++] = c & 63 | 128;
            } else {
              res[p++] = c >> 12 | 224;
              res[p++] = c >> 6 & 63 | 128;
              res[p++] = c & 63 | 128;
            }
          }
        } else if (enc === "hex") {
          msg = msg.replace(/[^a-z0-9]+/ig, "");
          if (msg.length % 2 !== 0)
            msg = "0" + msg;
          for (i = 0; i < msg.length; i += 2)
            res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
      } else {
        for (i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
      }
      return res;
    }
    exports.toArray = toArray2;
    function toHex(msg) {
      var res = "";
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    exports.toHex = toHex;
    function htonl(w) {
      var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;
      return res >>> 0;
    }
    exports.htonl = htonl;
    function toHex32(msg, endian) {
      var res = "";
      for (var i = 0; i < msg.length; i++) {
        var w = msg[i];
        if (endian === "little")
          w = htonl(w);
        res += zero8(w.toString(16));
      }
      return res;
    }
    exports.toHex32 = toHex32;
    function zero2(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    exports.zero2 = zero2;
    function zero8(word) {
      if (word.length === 7)
        return "0" + word;
      else if (word.length === 6)
        return "00" + word;
      else if (word.length === 5)
        return "000" + word;
      else if (word.length === 4)
        return "0000" + word;
      else if (word.length === 3)
        return "00000" + word;
      else if (word.length === 2)
        return "000000" + word;
      else if (word.length === 1)
        return "0000000" + word;
      else
        return word;
    }
    exports.zero8 = zero8;
    function join32(msg, start, end, endian) {
      var len = end - start;
      assert(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i = 0, k = start; i < res.length; i++, k += 4) {
        var w;
        if (endian === "big")
          w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
        else
          w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
      }
      return res;
    }
    exports.join32 = join32;
    function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
        var m = msg[i];
        if (endian === "big") {
          res[k] = m >>> 24;
          res[k + 1] = m >>> 16 & 255;
          res[k + 2] = m >>> 8 & 255;
          res[k + 3] = m & 255;
        } else {
          res[k + 3] = m >>> 24;
          res[k + 2] = m >>> 16 & 255;
          res[k + 1] = m >>> 8 & 255;
          res[k] = m & 255;
        }
      }
      return res;
    }
    exports.split32 = split32;
    function rotr32(w, b) {
      return w >>> b | w << 32 - b;
    }
    exports.rotr32 = rotr32;
    function rotl32(w, b) {
      return w << b | w >>> 32 - b;
    }
    exports.rotl32 = rotl32;
    function sum32(a, b) {
      return a + b >>> 0;
    }
    exports.sum32 = sum32;
    function sum32_3(a, b, c) {
      return a + b + c >>> 0;
    }
    exports.sum32_3 = sum32_3;
    function sum32_4(a, b, c, d) {
      return a + b + c + d >>> 0;
    }
    exports.sum32_4 = sum32_4;
    function sum32_5(a, b, c, d, e) {
      return a + b + c + d + e >>> 0;
    }
    exports.sum32_5 = sum32_5;
    function sum64(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
    }
    exports.sum64 = sum64;
    function sum64_hi(ah, al, bh, bl) {
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    }
    exports.sum64_hi = sum64_hi;
    function sum64_lo(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
    }
    exports.sum64_lo = sum64_lo;
    function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    }
    exports.sum64_4_hi = sum64_4_hi;
    function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
    }
    exports.sum64_4_lo = sum64_4_lo;
    function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = lo + el >>> 0;
      carry += lo < el ? 1 : 0;
      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    }
    exports.sum64_5_hi = sum64_5_hi;
    function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;
      return lo >>> 0;
    }
    exports.sum64_5_lo = sum64_5_lo;
    function rotr64_hi(ah, al, num) {
      var r = al << 32 - num | ah >>> num;
      return r >>> 0;
    }
    exports.rotr64_hi = rotr64_hi;
    function rotr64_lo(ah, al, num) {
      var r = ah << 32 - num | al >>> num;
      return r >>> 0;
    }
    exports.rotr64_lo = rotr64_lo;
    function shr64_hi(ah, al, num) {
      return ah >>> num;
    }
    exports.shr64_hi = shr64_hi;
    function shr64_lo(ah, al, num) {
      var r = ah << 32 - num | al >>> num;
      return r >>> 0;
    }
    exports.shr64_lo = shr64_lo;
  }
});

// node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/common.js
var require_common = __commonJS({
  "node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/common.js"(exports) {
    "use strict";
    init_shim();
    var utils = require_utils4();
    var assert = require_minimalistic_assert();
    function BlockHash() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = "big";
      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    exports.BlockHash = BlockHash;
    BlockHash.prototype.update = function update(msg, enc) {
      msg = utils.toArray(msg, enc);
      if (!this.pending)
        this.pending = msg;
      else
        this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;
      if (this.pending.length >= this._delta8) {
        msg = this.pending;
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0)
          this.pending = null;
        msg = utils.join32(msg, 0, msg.length - r, this.endian);
        for (var i = 0; i < msg.length; i += this._delta32)
          this._update(msg, i, i + this._delta32);
      }
      return this;
    };
    BlockHash.prototype.digest = function digest(enc) {
      this.update(this._pad());
      assert(this.pending === null);
      return this._digest(enc);
    };
    BlockHash.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - (len + this.padLength) % bytes;
      var res = new Array(k + this.padLength);
      res[0] = 128;
      for (var i = 1; i < k; i++)
        res[i] = 0;
      len <<= 3;
      if (this.endian === "big") {
        for (var t = 8; t < this.padLength; t++)
          res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 8 & 255;
        res[i++] = len & 255;
      } else {
        res[i++] = len & 255;
        res[i++] = len >>> 8 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 24 & 255;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        for (t = 8; t < this.padLength; t++)
          res[i++] = 0;
      }
      return res;
    };
  }
});

// node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/common.js
var require_common2 = __commonJS({
  "node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/common.js"(exports) {
    "use strict";
    init_shim();
    var utils = require_utils4();
    var rotr32 = utils.rotr32;
    function ft_1(s, x, y, z) {
      if (s === 0)
        return ch32(x, y, z);
      if (s === 1 || s === 3)
        return p32(x, y, z);
      if (s === 2)
        return maj32(x, y, z);
    }
    exports.ft_1 = ft_1;
    function ch32(x, y, z) {
      return x & y ^ ~x & z;
    }
    exports.ch32 = ch32;
    function maj32(x, y, z) {
      return x & y ^ x & z ^ y & z;
    }
    exports.maj32 = maj32;
    function p32(x, y, z) {
      return x ^ y ^ z;
    }
    exports.p32 = p32;
    function s0_256(x) {
      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
    }
    exports.s0_256 = s0_256;
    function s1_256(x) {
      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
    }
    exports.s1_256 = s1_256;
    function g0_256(x) {
      return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
    }
    exports.g0_256 = g0_256;
    function g1_256(x) {
      return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
    }
    exports.g1_256 = g1_256;
  }
});

// node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/1.js
var require__ = __commonJS({
  "node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/1.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils4();
    var common = require_common();
    var shaCommon = require_common2();
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_5 = utils.sum32_5;
    var ft_1 = shaCommon.ft_1;
    var BlockHash = common.BlockHash;
    var sha1_K = [
      1518500249,
      1859775393,
      2400959708,
      3395469782
    ];
    function SHA1() {
      if (!(this instanceof SHA1))
        return new SHA1();
      BlockHash.call(this);
      this.h = [
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
      ];
      this.W = new Array(80);
    }
    utils.inherits(SHA1, BlockHash);
    module.exports = SHA1;
    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;
    SHA1.prototype._update = function _update(msg, start) {
      var W = this.W;
      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      for (i = 0; i < W.length; i++) {
        var s = ~~(i / 20);
        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32(b, 30);
        b = a;
        a = t;
      }
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
    };
    SHA1.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
  }
});

// node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/256.js
var require__2 = __commonJS({
  "node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/256.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils4();
    var common = require_common();
    var shaCommon = require_common2();
    var assert = require_minimalistic_assert();
    var sum32 = utils.sum32;
    var sum32_4 = utils.sum32_4;
    var sum32_5 = utils.sum32_5;
    var ch32 = shaCommon.ch32;
    var maj32 = shaCommon.maj32;
    var s0_256 = shaCommon.s0_256;
    var s1_256 = shaCommon.s1_256;
    var g0_256 = shaCommon.g0_256;
    var g1_256 = shaCommon.g1_256;
    var BlockHash = common.BlockHash;
    var sha256_K = [
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ];
    function SHA256() {
      if (!(this instanceof SHA256))
        return new SHA256();
      BlockHash.call(this);
      this.h = [
        1779033703,
        3144134277,
        1013904242,
        2773480762,
        1359893119,
        2600822924,
        528734635,
        1541459225
      ];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils.inherits(SHA256, BlockHash);
    module.exports = SHA256;
    SHA256.blockSize = 512;
    SHA256.outSize = 256;
    SHA256.hmacStrength = 192;
    SHA256.padLength = 64;
    SHA256.prototype._update = function _update(msg, start) {
      var W = this.W;
      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      var f2 = this.h[5];
      var g = this.h[6];
      var h = this.h[7];
      assert(this.k.length === W.length);
      for (i = 0; i < W.length; i++) {
        var T1 = sum32_5(h, s1_256(e), ch32(e, f2, g), this.k[i], W[i]);
        var T2 = sum32(s0_256(a), maj32(a, b, c));
        h = g;
        g = f2;
        f2 = e;
        e = sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32(T1, T2);
      }
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
      this.h[5] = sum32(this.h[5], f2);
      this.h[6] = sum32(this.h[6], g);
      this.h[7] = sum32(this.h[7], h);
    };
    SHA256.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
  }
});

// node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/224.js
var require__3 = __commonJS({
  "node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/224.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils4();
    var SHA256 = require__2();
    function SHA224() {
      if (!(this instanceof SHA224))
        return new SHA224();
      SHA256.call(this);
      this.h = [
        3238371032,
        914150663,
        812702999,
        4144912697,
        4290775857,
        1750603025,
        1694076839,
        3204075428
      ];
    }
    utils.inherits(SHA224, SHA256);
    module.exports = SHA224;
    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;
    SHA224.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h.slice(0, 7), "big");
      else
        return utils.split32(this.h.slice(0, 7), "big");
    };
  }
});

// node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/512.js
var require__4 = __commonJS({
  "node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/512.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils4();
    var common = require_common();
    var assert = require_minimalistic_assert();
    var rotr64_hi = utils.rotr64_hi;
    var rotr64_lo = utils.rotr64_lo;
    var shr64_hi = utils.shr64_hi;
    var shr64_lo = utils.shr64_lo;
    var sum64 = utils.sum64;
    var sum64_hi = utils.sum64_hi;
    var sum64_lo = utils.sum64_lo;
    var sum64_4_hi = utils.sum64_4_hi;
    var sum64_4_lo = utils.sum64_4_lo;
    var sum64_5_hi = utils.sum64_5_hi;
    var sum64_5_lo = utils.sum64_5_lo;
    var BlockHash = common.BlockHash;
    var sha512_K = [
      1116352408,
      3609767458,
      1899447441,
      602891725,
      3049323471,
      3964484399,
      3921009573,
      2173295548,
      961987163,
      4081628472,
      1508970993,
      3053834265,
      2453635748,
      2937671579,
      2870763221,
      3664609560,
      3624381080,
      2734883394,
      310598401,
      1164996542,
      607225278,
      1323610764,
      1426881987,
      3590304994,
      1925078388,
      4068182383,
      2162078206,
      991336113,
      2614888103,
      633803317,
      3248222580,
      3479774868,
      3835390401,
      2666613458,
      4022224774,
      944711139,
      264347078,
      2341262773,
      604807628,
      2007800933,
      770255983,
      1495990901,
      1249150122,
      1856431235,
      1555081692,
      3175218132,
      1996064986,
      2198950837,
      2554220882,
      3999719339,
      2821834349,
      766784016,
      2952996808,
      2566594879,
      3210313671,
      3203337956,
      3336571891,
      1034457026,
      3584528711,
      2466948901,
      113926993,
      3758326383,
      338241895,
      168717936,
      666307205,
      1188179964,
      773529912,
      1546045734,
      1294757372,
      1522805485,
      1396182291,
      2643833823,
      1695183700,
      2343527390,
      1986661051,
      1014477480,
      2177026350,
      1206759142,
      2456956037,
      344077627,
      2730485921,
      1290863460,
      2820302411,
      3158454273,
      3259730800,
      3505952657,
      3345764771,
      106217008,
      3516065817,
      3606008344,
      3600352804,
      1432725776,
      4094571909,
      1467031594,
      275423344,
      851169720,
      430227734,
      3100823752,
      506948616,
      1363258195,
      659060556,
      3750685593,
      883997877,
      3785050280,
      958139571,
      3318307427,
      1322822218,
      3812723403,
      1537002063,
      2003034995,
      1747873779,
      3602036899,
      1955562222,
      1575990012,
      2024104815,
      1125592928,
      2227730452,
      2716904306,
      2361852424,
      442776044,
      2428436474,
      593698344,
      2756734187,
      3733110249,
      3204031479,
      2999351573,
      3329325298,
      3815920427,
      3391569614,
      3928383900,
      3515267271,
      566280711,
      3940187606,
      3454069534,
      4118630271,
      4000239992,
      116418474,
      1914138554,
      174292421,
      2731055270,
      289380356,
      3203993006,
      460393269,
      320620315,
      685471733,
      587496836,
      852142971,
      1086792851,
      1017036298,
      365543100,
      1126000580,
      2618297676,
      1288033470,
      3409855158,
      1501505948,
      4234509866,
      1607167915,
      987167468,
      1816402316,
      1246189591
    ];
    function SHA512() {
      if (!(this instanceof SHA512))
        return new SHA512();
      BlockHash.call(this);
      this.h = [
        1779033703,
        4089235720,
        3144134277,
        2227873595,
        1013904242,
        4271175723,
        2773480762,
        1595750129,
        1359893119,
        2917565137,
        2600822924,
        725511199,
        528734635,
        4215389547,
        1541459225,
        327033209
      ];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils.inherits(SHA512, BlockHash);
    module.exports = SHA512;
    SHA512.blockSize = 1024;
    SHA512.outSize = 512;
    SHA512.hmacStrength = 192;
    SHA512.padLength = 128;
    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W = this.W;
      for (var i = 0; i < 32; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i += 2) {
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14];
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32];
        var c3_lo = W[i - 31];
        W[i] = sum64_4_hi(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo
        );
        W[i + 1] = sum64_4_lo(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo
        );
      }
    };
    SHA512.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);
      var W = this.W;
      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];
      assert(this.k.length === W.length);
      for (var i = 0; i < W.length; i += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = sum64_5_hi(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo,
          c4_hi,
          c4_lo
        );
        var T1_lo = sum64_5_lo(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo,
          c4_hi,
          c4_lo
        );
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }
      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };
    SHA512.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
    function ch64_hi(xh, xl, yh, yl, zh) {
      var r = xh & yh ^ ~xh & zh;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r = xl & yl ^ ~xl & zl;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function maj64_hi(xh, xl, yh, yl, zh) {
      var r = xh & yh ^ xh & zh ^ yh & zh;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r = xl & yl ^ xl & zl ^ yl & zl;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2);
      var c2_hi = rotr64_hi(xl, xh, 7);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2);
      var c2_lo = rotr64_lo(xl, xh, 7);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29);
      var c2_hi = shr64_hi(xh, xl, 6);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29);
      var c2_lo = shr64_lo(xh, xl, 6);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 4294967296;
      return r;
    }
  }
});

// node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/384.js
var require__5 = __commonJS({
  "node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha/384.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils4();
    var SHA512 = require__4();
    function SHA384() {
      if (!(this instanceof SHA384))
        return new SHA384();
      SHA512.call(this);
      this.h = [
        3418070365,
        3238371032,
        1654270250,
        914150663,
        2438529370,
        812702999,
        355462360,
        4144912697,
        1731405415,
        4290775857,
        2394180231,
        1750603025,
        3675008525,
        1694076839,
        1203062813,
        3204075428
      ];
    }
    utils.inherits(SHA384, SHA512);
    module.exports = SHA384;
    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;
    SHA384.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h.slice(0, 12), "big");
      else
        return utils.split32(this.h.slice(0, 12), "big");
    };
  }
});

// node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha.js
var require_sha3 = __commonJS({
  "node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/sha.js"(exports) {
    "use strict";
    init_shim();
    exports.sha1 = require__();
    exports.sha224 = require__3();
    exports.sha256 = require__2();
    exports.sha384 = require__5();
    exports.sha512 = require__4();
  }
});

// node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/ripemd.js
var require_ripemd = __commonJS({
  "node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/ripemd.js"(exports) {
    "use strict";
    init_shim();
    var utils = require_utils4();
    var common = require_common();
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_3 = utils.sum32_3;
    var sum32_4 = utils.sum32_4;
    var BlockHash = common.BlockHash;
    function RIPEMD160() {
      if (!(this instanceof RIPEMD160))
        return new RIPEMD160();
      BlockHash.call(this);
      this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
      this.endian = "little";
    }
    utils.inherits(RIPEMD160, BlockHash);
    exports.ripemd160 = RIPEMD160;
    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;
    RIPEMD160.prototype._update = function update(msg, start) {
      var A = this.h[0];
      var B = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C;
      var Dh = D;
      var Eh = E;
      for (var j = 0; j < 80; j++) {
        var T = sum32(
          rotl32(
            sum32_4(A, f2(j, B, C, D), msg[r[j] + start], K(j)),
            s[j]
          ),
          E
        );
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(
          rotl32(
            sum32_4(Ah, f2(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
            sh[j]
          ),
          Eh
        );
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
      }
      T = sum32_3(this.h[1], C, Dh);
      this.h[1] = sum32_3(this.h[2], D, Eh);
      this.h[2] = sum32_3(this.h[3], E, Ah);
      this.h[3] = sum32_3(this.h[4], A, Bh);
      this.h[4] = sum32_3(this.h[0], B, Ch);
      this.h[0] = T;
    };
    RIPEMD160.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "little");
      else
        return utils.split32(this.h, "little");
    };
    function f2(j, x, y, z) {
      if (j <= 15)
        return x ^ y ^ z;
      else if (j <= 31)
        return x & y | ~x & z;
      else if (j <= 47)
        return (x | ~y) ^ z;
      else if (j <= 63)
        return x & z | y & ~z;
      else
        return x ^ (y | ~z);
    }
    function K(j) {
      if (j <= 15)
        return 0;
      else if (j <= 31)
        return 1518500249;
      else if (j <= 47)
        return 1859775393;
      else if (j <= 63)
        return 2400959708;
      else
        return 2840853838;
    }
    function Kh(j) {
      if (j <= 15)
        return 1352829926;
      else if (j <= 31)
        return 1548603684;
      else if (j <= 47)
        return 1836072691;
      else if (j <= 63)
        return 2053994217;
      else
        return 0;
    }
    var r = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      7,
      4,
      13,
      1,
      10,
      6,
      15,
      3,
      12,
      0,
      9,
      5,
      2,
      14,
      11,
      8,
      3,
      10,
      14,
      4,
      9,
      15,
      8,
      1,
      2,
      7,
      0,
      6,
      13,
      11,
      5,
      12,
      1,
      9,
      11,
      10,
      0,
      8,
      12,
      4,
      13,
      3,
      7,
      15,
      14,
      5,
      6,
      2,
      4,
      0,
      5,
      9,
      7,
      12,
      2,
      10,
      14,
      1,
      3,
      8,
      11,
      6,
      15,
      13
    ];
    var rh = [
      5,
      14,
      7,
      0,
      9,
      2,
      11,
      4,
      13,
      6,
      15,
      8,
      1,
      10,
      3,
      12,
      6,
      11,
      3,
      7,
      0,
      13,
      5,
      10,
      14,
      15,
      8,
      12,
      4,
      9,
      1,
      2,
      15,
      5,
      1,
      3,
      7,
      14,
      6,
      9,
      11,
      8,
      12,
      2,
      10,
      0,
      4,
      13,
      8,
      6,
      4,
      1,
      3,
      11,
      15,
      0,
      5,
      12,
      2,
      13,
      9,
      7,
      10,
      14,
      12,
      15,
      10,
      4,
      1,
      5,
      8,
      7,
      6,
      2,
      13,
      14,
      0,
      3,
      9,
      11
    ];
    var s = [
      11,
      14,
      15,
      12,
      5,
      8,
      7,
      9,
      11,
      13,
      14,
      15,
      6,
      7,
      9,
      8,
      7,
      6,
      8,
      13,
      11,
      9,
      7,
      15,
      7,
      12,
      15,
      9,
      11,
      7,
      13,
      12,
      11,
      13,
      6,
      7,
      14,
      9,
      13,
      15,
      14,
      8,
      13,
      6,
      5,
      12,
      7,
      5,
      11,
      12,
      14,
      15,
      14,
      15,
      9,
      8,
      9,
      14,
      5,
      6,
      8,
      6,
      5,
      12,
      9,
      15,
      5,
      11,
      6,
      8,
      13,
      12,
      5,
      12,
      13,
      14,
      11,
      8,
      5,
      6
    ];
    var sh = [
      8,
      9,
      9,
      11,
      13,
      15,
      15,
      5,
      7,
      7,
      8,
      11,
      14,
      14,
      12,
      6,
      9,
      13,
      15,
      7,
      12,
      8,
      9,
      11,
      7,
      7,
      12,
      7,
      6,
      15,
      13,
      11,
      9,
      7,
      15,
      11,
      8,
      6,
      6,
      14,
      12,
      13,
      5,
      14,
      13,
      13,
      7,
      5,
      15,
      5,
      8,
      11,
      14,
      14,
      6,
      14,
      6,
      9,
      12,
      9,
      12,
      5,
      15,
      8,
      8,
      5,
      12,
      9,
      12,
      5,
      14,
      6,
      8,
      13,
      6,
      5,
      15,
      13,
      11,
      11
    ];
  }
});

// node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/hmac.js
var require_hmac = __commonJS({
  "node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash/hmac.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils4();
    var assert = require_minimalistic_assert();
    function Hmac(hash, key, enc) {
      if (!(this instanceof Hmac))
        return new Hmac(hash, key, enc);
      this.Hash = hash;
      this.blockSize = hash.blockSize / 8;
      this.outSize = hash.outSize / 8;
      this.inner = null;
      this.outer = null;
      this._init(utils.toArray(key, enc));
    }
    module.exports = Hmac;
    Hmac.prototype._init = function init(key) {
      if (key.length > this.blockSize)
        key = new this.Hash().update(key).digest();
      assert(key.length <= this.blockSize);
      for (var i = key.length; i < this.blockSize; i++)
        key.push(0);
      for (i = 0; i < key.length; i++)
        key[i] ^= 54;
      this.inner = new this.Hash().update(key);
      for (i = 0; i < key.length; i++)
        key[i] ^= 106;
      this.outer = new this.Hash().update(key);
    };
    Hmac.prototype.update = function update(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };
    Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };
  }
});

// node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash.js
var require_hash2 = __commonJS({
  "node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash.js"(exports) {
    init_shim();
    var hash = exports;
    hash.utils = require_utils4();
    hash.common = require_common();
    hash.sha = require_sha3();
    hash.ripemd = require_ripemd();
    hash.hmac = require_hmac();
    hash.sha1 = hash.sha.sha1;
    hash.sha256 = hash.sha.sha256;
    hash.sha224 = hash.sha.sha224;
    hash.sha384 = hash.sha.sha384;
    hash.sha512 = hash.sha.sha512;
    hash.ripemd160 = hash.ripemd.ripemd160;
  }
});

// node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js
var require_secp256k1 = __commonJS({
  "node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js"(exports, module) {
    init_shim();
    module.exports = {
      doubles: {
        step: 4,
        points: [
          [
            "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
            "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
          ],
          [
            "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
            "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
          ],
          [
            "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
            "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
          ],
          [
            "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
            "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
          ],
          [
            "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
            "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
          ],
          [
            "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
            "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
          ],
          [
            "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
            "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
          ],
          [
            "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
            "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
          ],
          [
            "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
            "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
          ],
          [
            "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
            "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
          ],
          [
            "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
            "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
          ],
          [
            "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
            "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
          ],
          [
            "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
            "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
          ],
          [
            "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
            "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
          ],
          [
            "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
            "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
          ],
          [
            "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
            "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
          ],
          [
            "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
            "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
          ],
          [
            "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
            "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
          ],
          [
            "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
            "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
          ],
          [
            "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
            "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
          ],
          [
            "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
            "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
          ],
          [
            "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
            "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
          ],
          [
            "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
            "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
          ],
          [
            "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
            "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
          ],
          [
            "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
            "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
          ],
          [
            "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
            "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
          ],
          [
            "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
            "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
          ],
          [
            "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
            "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
          ],
          [
            "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
            "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
          ],
          [
            "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
            "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
          ],
          [
            "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
            "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
          ],
          [
            "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
            "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
          ],
          [
            "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
            "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
          ],
          [
            "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
            "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
          ],
          [
            "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
            "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
          ],
          [
            "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
            "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
          ],
          [
            "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
            "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
          ],
          [
            "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
            "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
          ],
          [
            "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
            "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
          ],
          [
            "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
            "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
          ],
          [
            "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
            "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
          ],
          [
            "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
            "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
          ],
          [
            "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
            "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
          ],
          [
            "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
            "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
          ],
          [
            "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
            "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
          ],
          [
            "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
            "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
          ],
          [
            "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
            "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
          ],
          [
            "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
            "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
          ],
          [
            "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
            "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
          ],
          [
            "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
            "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
          ],
          [
            "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
            "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
          ],
          [
            "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
            "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
          ],
          [
            "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
            "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
          ],
          [
            "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
            "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
          ],
          [
            "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
            "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
          ],
          [
            "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
            "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
          ],
          [
            "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
            "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
          ],
          [
            "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
            "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
          ],
          [
            "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
            "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
          ],
          [
            "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
            "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
          ],
          [
            "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
            "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
          ],
          [
            "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
            "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
          ],
          [
            "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
            "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
          ],
          [
            "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
            "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
          ],
          [
            "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
            "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
          ]
        ]
      },
      naf: {
        wnd: 7,
        points: [
          [
            "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
            "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
          ],
          [
            "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
            "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
          ],
          [
            "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
            "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
          ],
          [
            "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
            "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
          ],
          [
            "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
            "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
          ],
          [
            "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
            "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
          ],
          [
            "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
            "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
          ],
          [
            "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
            "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
          ],
          [
            "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
            "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
          ],
          [
            "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
            "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
          ],
          [
            "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
            "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
          ],
          [
            "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
            "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
          ],
          [
            "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
            "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
          ],
          [
            "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
            "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
          ],
          [
            "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
            "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
          ],
          [
            "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
            "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
          ],
          [
            "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
            "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
          ],
          [
            "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
            "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
          ],
          [
            "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
            "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
          ],
          [
            "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
            "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
          ],
          [
            "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
            "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
          ],
          [
            "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
            "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
          ],
          [
            "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
            "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
          ],
          [
            "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
            "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
          ],
          [
            "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
            "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
          ],
          [
            "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
            "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
          ],
          [
            "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
            "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
          ],
          [
            "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
            "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
          ],
          [
            "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
            "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
          ],
          [
            "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
            "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
          ],
          [
            "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
            "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
          ],
          [
            "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
            "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
          ],
          [
            "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
            "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
          ],
          [
            "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
            "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
          ],
          [
            "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
            "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
          ],
          [
            "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
            "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
          ],
          [
            "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
            "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
          ],
          [
            "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
            "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
          ],
          [
            "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
            "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
          ],
          [
            "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
            "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
          ],
          [
            "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
            "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
          ],
          [
            "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
            "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
          ],
          [
            "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
            "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
          ],
          [
            "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
            "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
          ],
          [
            "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
            "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
          ],
          [
            "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
            "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
          ],
          [
            "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
            "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
          ],
          [
            "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
            "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
          ],
          [
            "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
            "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
          ],
          [
            "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
            "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
          ],
          [
            "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
            "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
          ],
          [
            "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
            "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
          ],
          [
            "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
            "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
          ],
          [
            "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
            "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
          ],
          [
            "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
            "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
          ],
          [
            "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
            "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
          ],
          [
            "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
            "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
          ],
          [
            "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
            "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
          ],
          [
            "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
            "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
          ],
          [
            "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
            "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
          ],
          [
            "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
            "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
          ],
          [
            "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
            "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
          ],
          [
            "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
            "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
          ],
          [
            "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
            "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
          ],
          [
            "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
            "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
          ],
          [
            "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
            "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
          ],
          [
            "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
            "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
          ],
          [
            "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
            "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
          ],
          [
            "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
            "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
          ],
          [
            "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
            "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
          ],
          [
            "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
            "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
          ],
          [
            "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
            "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
          ],
          [
            "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
            "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
          ],
          [
            "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
            "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
          ],
          [
            "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
            "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
          ],
          [
            "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
            "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
          ],
          [
            "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
            "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
          ],
          [
            "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
            "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
          ],
          [
            "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
            "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
          ],
          [
            "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
            "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
          ],
          [
            "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
            "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
          ],
          [
            "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
            "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
          ],
          [
            "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
            "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
          ],
          [
            "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
            "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
          ],
          [
            "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
            "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
          ],
          [
            "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
            "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
          ],
          [
            "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
            "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
          ],
          [
            "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
            "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
          ],
          [
            "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
            "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
          ],
          [
            "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
            "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
          ],
          [
            "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
            "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
          ],
          [
            "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
            "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
          ],
          [
            "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
            "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
          ],
          [
            "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
            "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
          ],
          [
            "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
            "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
          ],
          [
            "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
            "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
          ],
          [
            "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
            "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
          ],
          [
            "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
            "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
          ],
          [
            "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
            "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
          ],
          [
            "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
            "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
          ],
          [
            "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
            "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
          ],
          [
            "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
            "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
          ],
          [
            "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
            "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
          ],
          [
            "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
            "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
          ],
          [
            "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
            "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
          ],
          [
            "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
            "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
          ],
          [
            "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
            "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
          ],
          [
            "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
            "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
          ],
          [
            "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
            "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
          ],
          [
            "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
            "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
          ],
          [
            "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
            "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
          ],
          [
            "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
            "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
          ],
          [
            "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
            "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
          ],
          [
            "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
            "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
          ],
          [
            "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
            "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
          ],
          [
            "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
            "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
          ],
          [
            "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
            "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
          ],
          [
            "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
            "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
          ],
          [
            "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
            "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
          ],
          [
            "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
            "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
          ],
          [
            "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
            "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
          ],
          [
            "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
            "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
          ],
          [
            "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
            "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
          ],
          [
            "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
            "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
          ],
          [
            "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
            "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
          ],
          [
            "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
            "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
          ],
          [
            "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
            "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
          ]
        ]
      }
    };
  }
});

// node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curves.js
var require_curves = __commonJS({
  "node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curves.js"(exports) {
    "use strict";
    init_shim();
    var curves = exports;
    var hash = require_hash2();
    var curve = require_curve();
    var utils = require_utils3();
    var assert = utils.assert;
    function PresetCurve(options) {
      if (options.type === "short")
        this.curve = new curve.short(options);
      else if (options.type === "edwards")
        this.curve = new curve.edwards(options);
      else
        this.curve = new curve.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;
      assert(this.g.validate(), "Invalid curve");
      assert(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    curves.PresetCurve = PresetCurve;
    function defineCurve(name, options) {
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
          var curve2 = new PresetCurve(options);
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            value: curve2
          });
          return curve2;
        }
      });
    }
    defineCurve("p192", {
      type: "short",
      prime: "p192",
      p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
      b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
      n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
      hash: hash.sha256,
      gRed: false,
      g: [
        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
      ]
    });
    defineCurve("p224", {
      type: "short",
      prime: "p224",
      p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
      b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
      n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
      hash: hash.sha256,
      gRed: false,
      g: [
        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
      ]
    });
    defineCurve("p256", {
      type: "short",
      prime: null,
      p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
      a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
      b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
      n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
      hash: hash.sha256,
      gRed: false,
      g: [
        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
      ]
    });
    defineCurve("p384", {
      type: "short",
      prime: null,
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
      a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
      b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
      n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
      hash: hash.sha384,
      gRed: false,
      g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
      ]
    });
    defineCurve("p521", {
      type: "short",
      prime: null,
      p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
      a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
      b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
      n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
      hash: hash.sha512,
      gRed: false,
      g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
      ]
    });
    defineCurve("curve25519", {
      type: "mont",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "76d06",
      b: "1",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash.sha256,
      gRed: false,
      g: [
        "9"
      ]
    });
    defineCurve("ed25519", {
      type: "edwards",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "-1",
      c: "1",
      d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash.sha256,
      gRed: false,
      g: [
        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
        "6666666666666666666666666666666666666666666666666666666666666658"
      ]
    });
    var pre;
    try {
      pre = require_secp256k1();
    } catch (e) {
      pre = void 0;
    }
    defineCurve("secp256k1", {
      type: "short",
      prime: "k256",
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
      a: "0",
      b: "7",
      n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
      h: "1",
      hash: hash.sha256,
      beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
      lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
      basis: [
        {
          a: "3086d221a7d46bcde86c90e49284eb15",
          b: "-e4437ed6010e88286f547fa90abfe4c3"
        },
        {
          a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
          b: "3086d221a7d46bcde86c90e49284eb15"
        }
      ],
      gRed: false,
      g: [
        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
        pre
      ]
    });
  }
});

// node_modules/.pnpm/hmac-drbg@1.0.1/node_modules/hmac-drbg/lib/hmac-drbg.js
var require_hmac_drbg = __commonJS({
  "node_modules/.pnpm/hmac-drbg@1.0.1/node_modules/hmac-drbg/lib/hmac-drbg.js"(exports, module) {
    "use strict";
    init_shim();
    var hash = require_hash2();
    var utils = require_utils2();
    var assert = require_minimalistic_assert();
    function HmacDRBG(options) {
      if (!(this instanceof HmacDRBG))
        return new HmacDRBG(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;
      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;
      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;
      var entropy = utils.toArray(options.entropy, options.entropyEnc || "hex");
      var nonce = utils.toArray(options.nonce, options.nonceEnc || "hex");
      var pers = utils.toArray(options.pers, options.persEnc || "hex");
      assert(
        entropy.length >= this.minEntropy / 8,
        "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
      );
      this._init(entropy, nonce, pers);
    }
    module.exports = HmacDRBG;
    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);
      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i = 0; i < this.V.length; i++) {
        this.K[i] = 0;
        this.V[i] = 1;
      }
      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 281474976710656;
    };
    HmacDRBG.prototype._hmac = function hmac() {
      return new hash.hmac(this.hash, this.K);
    };
    HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac().update(this.V).update([0]);
      if (seed)
        kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed)
        return;
      this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
      this.V = this._hmac().update(this.V).digest();
    };
    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
      if (typeof entropyEnc !== "string") {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
      }
      entropy = utils.toArray(entropy, entropyEnc);
      add = utils.toArray(add, addEnc);
      assert(
        entropy.length >= this.minEntropy / 8,
        "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
      );
      this._update(entropy.concat(add || []));
      this._reseed = 1;
    };
    HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error("Reseed is required");
      if (typeof enc !== "string") {
        addEnc = add;
        add = enc;
        enc = null;
      }
      if (add) {
        add = utils.toArray(add, addEnc || "hex");
        this._update(add);
      }
      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }
      var res = temp.slice(0, len);
      this._update(add);
      this._reseed++;
      return utils.encode(res, enc);
    };
  }
});

// node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/ec/key.js
var require_key = __commonJS({
  "node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/ec/key.js"(exports, module) {
    "use strict";
    init_shim();
    var BN = require_bn();
    var utils = require_utils3();
    var assert = utils.assert;
    function KeyPair(ec, options) {
      this.ec = ec;
      this.priv = null;
      this.pub = null;
      if (options.priv)
        this._importPrivate(options.priv, options.privEnc);
      if (options.pub)
        this._importPublic(options.pub, options.pubEnc);
    }
    module.exports = KeyPair;
    KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
      if (pub instanceof KeyPair)
        return pub;
      return new KeyPair(ec, {
        pub,
        pubEnc: enc
      });
    };
    KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
      if (priv instanceof KeyPair)
        return priv;
      return new KeyPair(ec, {
        priv,
        privEnc: enc
      });
    };
    KeyPair.prototype.validate = function validate2() {
      var pub = this.getPublic();
      if (pub.isInfinity())
        return { result: false, reason: "Invalid public key" };
      if (!pub.validate())
        return { result: false, reason: "Public key is not a point" };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: "Public key * N != O" };
      return { result: true, reason: null };
    };
    KeyPair.prototype.getPublic = function getPublic(compact, enc) {
      if (typeof compact === "string") {
        enc = compact;
        compact = null;
      }
      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);
      if (!enc)
        return this.pub;
      return this.pub.encode(enc, compact);
    };
    KeyPair.prototype.getPrivate = function getPrivate(enc) {
      if (enc === "hex")
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };
    KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
      this.priv = new BN(key, enc || 16);
      this.priv = this.priv.umod(this.ec.curve.n);
    };
    KeyPair.prototype._importPublic = function _importPublic(key, enc) {
      if (key.x || key.y) {
        if (this.ec.curve.type === "mont") {
          assert(key.x, "Need x coordinate");
        } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
          assert(key.x && key.y, "Need both x and y coordinate");
        }
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key, enc);
    };
    KeyPair.prototype.derive = function derive(pub) {
      if (!pub.validate()) {
        assert(pub.validate(), "public point not validated");
      }
      return pub.mul(this.priv).getX();
    };
    KeyPair.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };
    KeyPair.prototype.verify = function verify(msg, signature) {
      return this.ec.verify(msg, signature, this);
    };
    KeyPair.prototype.inspect = function inspect() {
      return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
    };
  }
});

// node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/ec/signature.js
var require_signature = __commonJS({
  "node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/ec/signature.js"(exports, module) {
    "use strict";
    init_shim();
    var BN = require_bn();
    var utils = require_utils3();
    var assert = utils.assert;
    function Signature(options, enc) {
      if (options instanceof Signature)
        return options;
      if (this._importDER(options, enc))
        return;
      assert(options.r && options.s, "Signature without r or s");
      this.r = new BN(options.r, 16);
      this.s = new BN(options.s, 16);
      if (options.recoveryParam === void 0)
        this.recoveryParam = null;
      else
        this.recoveryParam = options.recoveryParam;
    }
    module.exports = Signature;
    function Position() {
      this.place = 0;
    }
    function getLength(buf, p) {
      var initial = buf[p.place++];
      if (!(initial & 128)) {
        return initial;
      }
      var octetLen = initial & 15;
      if (octetLen === 0 || octetLen > 4) {
        return false;
      }
      var val = 0;
      for (var i = 0, off = p.place; i < octetLen; i++, off++) {
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
      }
      if (val <= 127) {
        return false;
      }
      p.place = off;
      return val;
    }
    function rmPadding(buf) {
      var i = 0;
      var len = buf.length - 1;
      while (!buf[i] && !(buf[i + 1] & 128) && i < len) {
        i++;
      }
      if (i === 0) {
        return buf;
      }
      return buf.slice(i);
    }
    Signature.prototype._importDER = function _importDER(data, enc) {
      data = utils.toArray(data, enc);
      var p = new Position();
      if (data[p.place++] !== 48) {
        return false;
      }
      var len = getLength(data, p);
      if (len === false) {
        return false;
      }
      if (len + p.place !== data.length) {
        return false;
      }
      if (data[p.place++] !== 2) {
        return false;
      }
      var rlen = getLength(data, p);
      if (rlen === false) {
        return false;
      }
      var r = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (data[p.place++] !== 2) {
        return false;
      }
      var slen = getLength(data, p);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p.place) {
        return false;
      }
      var s = data.slice(p.place, slen + p.place);
      if (r[0] === 0) {
        if (r[1] & 128) {
          r = r.slice(1);
        } else {
          return false;
        }
      }
      if (s[0] === 0) {
        if (s[1] & 128) {
          s = s.slice(1);
        } else {
          return false;
        }
      }
      this.r = new BN(r);
      this.s = new BN(s);
      this.recoveryParam = null;
      return true;
    };
    function constructLength(arr, len) {
      if (len < 128) {
        arr.push(len);
        return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 128);
      while (--octets) {
        arr.push(len >>> (octets << 3) & 255);
      }
      arr.push(len);
    }
    Signature.prototype.toDER = function toDER(enc) {
      var r = this.r.toArray();
      var s = this.s.toArray();
      if (r[0] & 128)
        r = [0].concat(r);
      if (s[0] & 128)
        s = [0].concat(s);
      r = rmPadding(r);
      s = rmPadding(s);
      while (!s[0] && !(s[1] & 128)) {
        s = s.slice(1);
      }
      var arr = [2];
      constructLength(arr, r.length);
      arr = arr.concat(r);
      arr.push(2);
      constructLength(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [48];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils.encode(res, enc);
    };
  }
});

// node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/ec/index.js
var require_ec = __commonJS({
  "node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/ec/index.js"(exports, module) {
    "use strict";
    init_shim();
    var BN = require_bn();
    var HmacDRBG = require_hmac_drbg();
    var utils = require_utils3();
    var curves = require_curves();
    var rand = require_brorand();
    var assert = utils.assert;
    var KeyPair = require_key();
    var Signature = require_signature();
    function EC(options) {
      if (!(this instanceof EC))
        return new EC(options);
      if (typeof options === "string") {
        assert(
          Object.prototype.hasOwnProperty.call(curves, options),
          "Unknown curve " + options
        );
        options = curves[options];
      }
      if (options instanceof curves.PresetCurve)
        options = { curve: options };
      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);
      this.hash = options.hash || options.curve.hash;
    }
    module.exports = EC;
    EC.prototype.keyPair = function keyPair(options) {
      return new KeyPair(this, options);
    };
    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return KeyPair.fromPrivate(this, priv, enc);
    };
    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return KeyPair.fromPublic(this, pub, enc);
    };
    EC.prototype.genKeyPair = function genKeyPair(options) {
      if (!options)
        options = {};
      var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || "utf8",
        nonce: this.n.toArray()
      });
      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new BN(2));
      for (; ; ) {
        var priv = new BN(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };
    EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };
    EC.prototype.sign = function sign(msg, key, enc, options) {
      if (typeof enc === "object") {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};
      key = this.keyFromPrivate(key, enc);
      msg = this._truncateToN(new BN(msg, 16));
      var bytes = this.n.byteLength();
      var bkey = key.getPrivate().toArray("be", bytes);
      var nonce = msg.toArray("be", bytes);
      var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8"
      });
      var ns1 = this.n.sub(new BN(1));
      for (var iter = 0; ; iter++) {
        var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
          continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity())
          continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0)
          continue;
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0)
          continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }
        return new Signature({ r, s, recoveryParam });
      }
    };
    EC.prototype.verify = function verify(msg, signature, key, enc) {
      msg = this._truncateToN(new BN(msg, 16));
      key = this.keyFromPublic(key, enc);
      signature = new Signature(signature, "hex");
      var r = signature.r;
      var s = signature.s;
      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
        return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
        return false;
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r).umod(this.n);
      var p;
      if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity())
          return false;
        return p.getX().umod(this.n).cmp(r) === 0;
      }
      p = this.g.jmulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity())
        return false;
      return p.eqXToP(r);
    };
    EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
      assert((3 & j) === j, "The recovery param is more than two bits");
      signature = new Signature(signature, enc);
      var n = this.n;
      var e = new BN(msg);
      var r = signature.r;
      var s = signature.s;
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error("Unable to find sencond key candinate");
      if (isSecondKey)
        r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
      else
        r = this.curve.pointFromX(r, isYOdd);
      var rInv = signature.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n);
      return this.g.mulAdd(s1, r, s2);
    };
    EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
      signature = new Signature(signature, enc);
      if (signature.recoveryParam !== null)
        return signature.recoveryParam;
      for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature, i);
        } catch (e2) {
          continue;
        }
        if (Qprime.eq(Q))
          return i;
      }
      throw new Error("Unable to find valid recovery factor");
    };
  }
});

// node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/eddsa/key.js
var require_key2 = __commonJS({
  "node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/eddsa/key.js"(exports, module) {
    "use strict";
    init_shim();
    var utils = require_utils3();
    var assert = utils.assert;
    var parseBytes = utils.parseBytes;
    var cachedProperty = utils.cachedProperty;
    function KeyPair(eddsa, params) {
      this.eddsa = eddsa;
      this._secret = parseBytes(params.secret);
      if (eddsa.isPoint(params.pub))
        this._pub = params.pub;
      else
        this._pubBytes = parseBytes(params.pub);
    }
    KeyPair.fromPublic = function fromPublic(eddsa, pub) {
      if (pub instanceof KeyPair)
        return pub;
      return new KeyPair(eddsa, { pub });
    };
    KeyPair.fromSecret = function fromSecret(eddsa, secret) {
      if (secret instanceof KeyPair)
        return secret;
      return new KeyPair(eddsa, { secret });
    };
    KeyPair.prototype.secret = function secret() {
      return this._secret;
    };
    cachedProperty(KeyPair, "pubBytes", function pubBytes() {
      return this.eddsa.encodePoint(this.pub());
    });
    cachedProperty(KeyPair, "pub", function pub() {
      if (this._pubBytes)
        return this.eddsa.decodePoint(this._pubBytes);
      return this.eddsa.g.mul(this.priv());
    });
    cachedProperty(KeyPair, "privBytes", function privBytes() {
      var eddsa = this.eddsa;
      var hash = this.hash();
      var lastIx = eddsa.encodingLength - 1;
      var a = hash.slice(0, eddsa.encodingLength);
      a[0] &= 248;
      a[lastIx] &= 127;
      a[lastIx] |= 64;
      return a;
    });
    cachedProperty(KeyPair, "priv", function priv() {
      return this.eddsa.decodeInt(this.privBytes());
    });
    cachedProperty(KeyPair, "hash", function hash() {
      return this.eddsa.hash().update(this.secret()).digest();
    });
    cachedProperty(KeyPair, "messagePrefix", function messagePrefix() {
      return this.hash().slice(this.eddsa.encodingLength);
    });
    KeyPair.prototype.sign = function sign(message) {
      assert(this._secret, "KeyPair can only verify");
      return this.eddsa.sign(message, this);
    };
    KeyPair.prototype.verify = function verify(message, sig) {
      return this.eddsa.verify(message, sig, this);
    };
    KeyPair.prototype.getSecret = function getSecret(enc) {
      assert(this._secret, "KeyPair is public only");
      return utils.encode(this.secret(), enc);
    };
    KeyPair.prototype.getPublic = function getPublic(enc) {
      return utils.encode(this.pubBytes(), enc);
    };
    module.exports = KeyPair;
  }
});

// node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/eddsa/signature.js
var require_signature2 = __commonJS({
  "node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/eddsa/signature.js"(exports, module) {
    "use strict";
    init_shim();
    var BN = require_bn();
    var utils = require_utils3();
    var assert = utils.assert;
    var cachedProperty = utils.cachedProperty;
    var parseBytes = utils.parseBytes;
    function Signature(eddsa, sig) {
      this.eddsa = eddsa;
      if (typeof sig !== "object")
        sig = parseBytes(sig);
      if (Array.isArray(sig)) {
        sig = {
          R: sig.slice(0, eddsa.encodingLength),
          S: sig.slice(eddsa.encodingLength)
        };
      }
      assert(sig.R && sig.S, "Signature without R or S");
      if (eddsa.isPoint(sig.R))
        this._R = sig.R;
      if (sig.S instanceof BN)
        this._S = sig.S;
      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
    }
    cachedProperty(Signature, "S", function S() {
      return this.eddsa.decodeInt(this.Sencoded());
    });
    cachedProperty(Signature, "R", function R() {
      return this.eddsa.decodePoint(this.Rencoded());
    });
    cachedProperty(Signature, "Rencoded", function Rencoded() {
      return this.eddsa.encodePoint(this.R());
    });
    cachedProperty(Signature, "Sencoded", function Sencoded() {
      return this.eddsa.encodeInt(this.S());
    });
    Signature.prototype.toBytes = function toBytes() {
      return this.Rencoded().concat(this.Sencoded());
    };
    Signature.prototype.toHex = function toHex() {
      return utils.encode(this.toBytes(), "hex").toUpperCase();
    };
    module.exports = Signature;
  }
});

// node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/eddsa/index.js
var require_eddsa = __commonJS({
  "node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/eddsa/index.js"(exports, module) {
    "use strict";
    init_shim();
    var hash = require_hash2();
    var curves = require_curves();
    var utils = require_utils3();
    var assert = utils.assert;
    var parseBytes = utils.parseBytes;
    var KeyPair = require_key2();
    var Signature = require_signature2();
    function EDDSA(curve) {
      assert(curve === "ed25519", "only tested with ed25519 so far");
      if (!(this instanceof EDDSA))
        return new EDDSA(curve);
      curve = curves[curve].curve;
      this.curve = curve;
      this.g = curve.g;
      this.g.precompute(curve.n.bitLength() + 1);
      this.pointClass = curve.point().constructor;
      this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
      this.hash = hash.sha512;
    }
    module.exports = EDDSA;
    EDDSA.prototype.sign = function sign(message, secret) {
      message = parseBytes(message);
      var key = this.keyFromSecret(secret);
      var r = this.hashInt(key.messagePrefix(), message);
      var R = this.g.mul(r);
      var Rencoded = this.encodePoint(R);
      var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
      var S = r.add(s_).umod(this.curve.n);
      return this.makeSignature({ R, S, Rencoded });
    };
    EDDSA.prototype.verify = function verify(message, sig, pub) {
      message = parseBytes(message);
      sig = this.makeSignature(sig);
      var key = this.keyFromPublic(pub);
      var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
      var SG = this.g.mul(sig.S());
      var RplusAh = sig.R().add(key.pub().mul(h));
      return RplusAh.eq(SG);
    };
    EDDSA.prototype.hashInt = function hashInt() {
      var hash2 = this.hash();
      for (var i = 0; i < arguments.length; i++)
        hash2.update(arguments[i]);
      return utils.intFromLE(hash2.digest()).umod(this.curve.n);
    };
    EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
      return KeyPair.fromPublic(this, pub);
    };
    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
      return KeyPair.fromSecret(this, secret);
    };
    EDDSA.prototype.makeSignature = function makeSignature(sig) {
      if (sig instanceof Signature)
        return sig;
      return new Signature(this, sig);
    };
    EDDSA.prototype.encodePoint = function encodePoint(point) {
      var enc = point.getY().toArray("le", this.encodingLength);
      enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;
      return enc;
    };
    EDDSA.prototype.decodePoint = function decodePoint(bytes) {
      bytes = utils.parseBytes(bytes);
      var lastIx = bytes.length - 1;
      var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~128);
      var xIsOdd = (bytes[lastIx] & 128) !== 0;
      var y = utils.intFromLE(normed);
      return this.curve.pointFromY(y, xIsOdd);
    };
    EDDSA.prototype.encodeInt = function encodeInt(num) {
      return num.toArray("le", this.encodingLength);
    };
    EDDSA.prototype.decodeInt = function decodeInt(bytes) {
      return utils.intFromLE(bytes);
    };
    EDDSA.prototype.isPoint = function isPoint(val) {
      return val instanceof this.pointClass;
    };
  }
});

// node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic.js
var require_elliptic = __commonJS({
  "node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic.js"(exports) {
    "use strict";
    init_shim();
    var elliptic = exports;
    elliptic.version = require_package().version;
    elliptic.utils = require_utils3();
    elliptic.rand = require_brorand();
    elliptic.curve = require_curve();
    elliptic.curves = require_curves();
    elliptic.ec = require_ec();
    elliptic.eddsa = require_eddsa();
  }
});

// node_modules/.pnpm/safer-buffer@2.1.2/node_modules/safer-buffer/safer.js
var require_safer = __commonJS({
  "node_modules/.pnpm/safer-buffer@2.1.2/node_modules/safer-buffer/safer.js"(exports, module) {
    "use strict";
    init_shim();
    var buffer = require_buffer();
    var Buffer2 = buffer.Buffer;
    var safer = {};
    var key;
    for (key in buffer) {
      if (!buffer.hasOwnProperty(key))
        continue;
      if (key === "SlowBuffer" || key === "Buffer")
        continue;
      safer[key] = buffer[key];
    }
    var Safer = safer.Buffer = {};
    for (key in Buffer2) {
      if (!Buffer2.hasOwnProperty(key))
        continue;
      if (key === "allocUnsafe" || key === "allocUnsafeSlow")
        continue;
      Safer[key] = Buffer2[key];
    }
    safer.Buffer.prototype = Buffer2.prototype;
    if (!Safer.from || Safer.from === Uint8Array.from) {
      Safer.from = function(value, encodingOrOffset, length) {
        if (typeof value === "number") {
          throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
        }
        if (value && typeof value.length === "undefined") {
          throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
        }
        return Buffer2(value, encodingOrOffset, length);
      };
    }
    if (!Safer.alloc) {
      Safer.alloc = function(size, fill, encoding) {
        if (typeof size !== "number") {
          throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
        }
        if (size < 0 || size >= 2 * (1 << 30)) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
        var buf = Buffer2(size);
        if (!fill || fill.length === 0) {
          buf.fill(0);
        } else if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
        return buf;
      };
    }
    if (!safer.kStringMaxLength) {
      try {
        safer.kStringMaxLength = import_process.default.binding("buffer").kStringMaxLength;
      } catch (e) {
      }
    }
    if (!safer.constants) {
      safer.constants = {
        MAX_LENGTH: safer.kMaxLength
      };
      if (safer.kStringMaxLength) {
        safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
      }
    }
    module.exports = safer;
  }
});

// node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/base/reporter.js
var require_reporter = __commonJS({
  "node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/base/reporter.js"(exports) {
    "use strict";
    init_shim();
    var inherits2 = require_inherits_browser();
    function Reporter(options) {
      this._reporterState = {
        obj: null,
        path: [],
        options: options || {},
        errors: []
      };
    }
    exports.Reporter = Reporter;
    Reporter.prototype.isError = function isError(obj) {
      return obj instanceof ReporterError;
    };
    Reporter.prototype.save = function save() {
      const state = this._reporterState;
      return { obj: state.obj, pathLen: state.path.length };
    };
    Reporter.prototype.restore = function restore(data) {
      const state = this._reporterState;
      state.obj = data.obj;
      state.path = state.path.slice(0, data.pathLen);
    };
    Reporter.prototype.enterKey = function enterKey(key) {
      return this._reporterState.path.push(key);
    };
    Reporter.prototype.exitKey = function exitKey(index) {
      const state = this._reporterState;
      state.path = state.path.slice(0, index - 1);
    };
    Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
      const state = this._reporterState;
      this.exitKey(index);
      if (state.obj !== null)
        state.obj[key] = value;
    };
    Reporter.prototype.path = function path() {
      return this._reporterState.path.join("/");
    };
    Reporter.prototype.enterObject = function enterObject() {
      const state = this._reporterState;
      const prev = state.obj;
      state.obj = {};
      return prev;
    };
    Reporter.prototype.leaveObject = function leaveObject(prev) {
      const state = this._reporterState;
      const now = state.obj;
      state.obj = prev;
      return now;
    };
    Reporter.prototype.error = function error(msg) {
      let err;
      const state = this._reporterState;
      const inherited = msg instanceof ReporterError;
      if (inherited) {
        err = msg;
      } else {
        err = new ReporterError(state.path.map(function(elem) {
          return "[" + JSON.stringify(elem) + "]";
        }).join(""), msg.message || msg, msg.stack);
      }
      if (!state.options.partial)
        throw err;
      if (!inherited)
        state.errors.push(err);
      return err;
    };
    Reporter.prototype.wrapResult = function wrapResult(result) {
      const state = this._reporterState;
      if (!state.options.partial)
        return result;
      return {
        result: this.isError(result) ? null : result,
        errors: state.errors
      };
    };
    function ReporterError(path, msg) {
      this.path = path;
      this.rethrow(msg);
    }
    inherits2(ReporterError, Error);
    ReporterError.prototype.rethrow = function rethrow(msg) {
      this.message = msg + " at: " + (this.path || "(shallow)");
      if (Error.captureStackTrace)
        Error.captureStackTrace(this, ReporterError);
      if (!this.stack) {
        try {
          throw new Error(this.message);
        } catch (e) {
          this.stack = e.stack;
        }
      }
      return this;
    };
  }
});

// node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/base/buffer.js
var require_buffer2 = __commonJS({
  "node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/base/buffer.js"(exports) {
    "use strict";
    init_shim();
    var inherits2 = require_inherits_browser();
    var Reporter = require_reporter().Reporter;
    var Buffer2 = require_safer().Buffer;
    function DecoderBuffer(base, options) {
      Reporter.call(this, options);
      if (!Buffer2.isBuffer(base)) {
        this.error("Input not Buffer");
        return;
      }
      this.base = base;
      this.offset = 0;
      this.length = base.length;
    }
    inherits2(DecoderBuffer, Reporter);
    exports.DecoderBuffer = DecoderBuffer;
    DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
      if (data instanceof DecoderBuffer) {
        return true;
      }
      const isCompatible = typeof data === "object" && Buffer2.isBuffer(data.base) && data.constructor.name === "DecoderBuffer" && typeof data.offset === "number" && typeof data.length === "number" && typeof data.save === "function" && typeof data.restore === "function" && typeof data.isEmpty === "function" && typeof data.readUInt8 === "function" && typeof data.skip === "function" && typeof data.raw === "function";
      return isCompatible;
    };
    DecoderBuffer.prototype.save = function save() {
      return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
    };
    DecoderBuffer.prototype.restore = function restore(save) {
      const res = new DecoderBuffer(this.base);
      res.offset = save.offset;
      res.length = this.offset;
      this.offset = save.offset;
      Reporter.prototype.restore.call(this, save.reporter);
      return res;
    };
    DecoderBuffer.prototype.isEmpty = function isEmpty() {
      return this.offset === this.length;
    };
    DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
      if (this.offset + 1 <= this.length)
        return this.base.readUInt8(this.offset++, true);
      else
        return this.error(fail || "DecoderBuffer overrun");
    };
    DecoderBuffer.prototype.skip = function skip(bytes, fail) {
      if (!(this.offset + bytes <= this.length))
        return this.error(fail || "DecoderBuffer overrun");
      const res = new DecoderBuffer(this.base);
      res._reporterState = this._reporterState;
      res.offset = this.offset;
      res.length = this.offset + bytes;
      this.offset += bytes;
      return res;
    };
    DecoderBuffer.prototype.raw = function raw(save) {
      return this.base.slice(save ? save.offset : this.offset, this.length);
    };
    function EncoderBuffer(value, reporter) {
      if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function(item) {
          if (!EncoderBuffer.isEncoderBuffer(item))
            item = new EncoderBuffer(item, reporter);
          this.length += item.length;
          return item;
        }, this);
      } else if (typeof value === "number") {
        if (!(0 <= value && value <= 255))
          return reporter.error("non-byte EncoderBuffer value");
        this.value = value;
        this.length = 1;
      } else if (typeof value === "string") {
        this.value = value;
        this.length = Buffer2.byteLength(value);
      } else if (Buffer2.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
      } else {
        return reporter.error("Unsupported type: " + typeof value);
      }
    }
    exports.EncoderBuffer = EncoderBuffer;
    EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
      if (data instanceof EncoderBuffer) {
        return true;
      }
      const isCompatible = typeof data === "object" && data.constructor.name === "EncoderBuffer" && typeof data.length === "number" && typeof data.join === "function";
      return isCompatible;
    };
    EncoderBuffer.prototype.join = function join(out, offset) {
      if (!out)
        out = Buffer2.alloc(this.length);
      if (!offset)
        offset = 0;
      if (this.length === 0)
        return out;
      if (Array.isArray(this.value)) {
        this.value.forEach(function(item) {
          item.join(out, offset);
          offset += item.length;
        });
      } else {
        if (typeof this.value === "number")
          out[offset] = this.value;
        else if (typeof this.value === "string")
          out.write(this.value, offset);
        else if (Buffer2.isBuffer(this.value))
          this.value.copy(out, offset);
        offset += this.length;
      }
      return out;
    };
  }
});

// node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/base/node.js
var require_node = __commonJS({
  "node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/base/node.js"(exports, module) {
    "use strict";
    init_shim();
    var Reporter = require_reporter().Reporter;
    var EncoderBuffer = require_buffer2().EncoderBuffer;
    var DecoderBuffer = require_buffer2().DecoderBuffer;
    var assert = require_minimalistic_assert();
    var tags = [
      "seq",
      "seqof",
      "set",
      "setof",
      "objid",
      "bool",
      "gentime",
      "utctime",
      "null_",
      "enum",
      "int",
      "objDesc",
      "bitstr",
      "bmpstr",
      "charstr",
      "genstr",
      "graphstr",
      "ia5str",
      "iso646str",
      "numstr",
      "octstr",
      "printstr",
      "t61str",
      "unistr",
      "utf8str",
      "videostr"
    ];
    var methods = [
      "key",
      "obj",
      "use",
      "optional",
      "explicit",
      "implicit",
      "def",
      "choice",
      "any",
      "contains"
    ].concat(tags);
    var overrided = [
      "_peekTag",
      "_decodeTag",
      "_use",
      "_decodeStr",
      "_decodeObjid",
      "_decodeTime",
      "_decodeNull",
      "_decodeInt",
      "_decodeBool",
      "_decodeList",
      "_encodeComposite",
      "_encodeStr",
      "_encodeObjid",
      "_encodeTime",
      "_encodeNull",
      "_encodeInt",
      "_encodeBool"
    ];
    function Node(enc, parent, name) {
      const state = {};
      this._baseState = state;
      state.name = name;
      state.enc = enc;
      state.parent = parent || null;
      state.children = null;
      state.tag = null;
      state.args = null;
      state.reverseArgs = null;
      state.choice = null;
      state.optional = false;
      state.any = false;
      state.obj = false;
      state.use = null;
      state.useDecoder = null;
      state.key = null;
      state["default"] = null;
      state.explicit = null;
      state.implicit = null;
      state.contains = null;
      if (!state.parent) {
        state.children = [];
        this._wrap();
      }
    }
    module.exports = Node;
    var stateProps = [
      "enc",
      "parent",
      "children",
      "tag",
      "args",
      "reverseArgs",
      "choice",
      "optional",
      "any",
      "obj",
      "use",
      "alteredUse",
      "key",
      "default",
      "explicit",
      "implicit",
      "contains"
    ];
    Node.prototype.clone = function clone() {
      const state = this._baseState;
      const cstate = {};
      stateProps.forEach(function(prop) {
        cstate[prop] = state[prop];
      });
      const res = new this.constructor(cstate.parent);
      res._baseState = cstate;
      return res;
    };
    Node.prototype._wrap = function wrap() {
      const state = this._baseState;
      methods.forEach(function(method) {
        this[method] = function _wrappedMethod() {
          const clone = new this.constructor(this);
          state.children.push(clone);
          return clone[method].apply(clone, arguments);
        };
      }, this);
    };
    Node.prototype._init = function init(body) {
      const state = this._baseState;
      assert(state.parent === null);
      body.call(this);
      state.children = state.children.filter(function(child) {
        return child._baseState.parent === this;
      }, this);
      assert.equal(state.children.length, 1, "Root node can have only one child");
    };
    Node.prototype._useArgs = function useArgs(args) {
      const state = this._baseState;
      const children = args.filter(function(arg) {
        return arg instanceof this.constructor;
      }, this);
      args = args.filter(function(arg) {
        return !(arg instanceof this.constructor);
      }, this);
      if (children.length !== 0) {
        assert(state.children === null);
        state.children = children;
        children.forEach(function(child) {
          child._baseState.parent = this;
        }, this);
      }
      if (args.length !== 0) {
        assert(state.args === null);
        state.args = args;
        state.reverseArgs = args.map(function(arg) {
          if (typeof arg !== "object" || arg.constructor !== Object)
            return arg;
          const res = {};
          Object.keys(arg).forEach(function(key) {
            if (key == (key | 0))
              key |= 0;
            const value = arg[key];
            res[value] = key;
          });
          return res;
        });
      }
    };
    overrided.forEach(function(method) {
      Node.prototype[method] = function _overrided() {
        const state = this._baseState;
        throw new Error(method + " not implemented for encoding: " + state.enc);
      };
    });
    tags.forEach(function(tag) {
      Node.prototype[tag] = function _tagMethod() {
        const state = this._baseState;
        const args = Array.prototype.slice.call(arguments);
        assert(state.tag === null);
        state.tag = tag;
        this._useArgs(args);
        return this;
      };
    });
    Node.prototype.use = function use(item) {
      assert(item);
      const state = this._baseState;
      assert(state.use === null);
      state.use = item;
      return this;
    };
    Node.prototype.optional = function optional() {
      const state = this._baseState;
      state.optional = true;
      return this;
    };
    Node.prototype.def = function def(val) {
      const state = this._baseState;
      assert(state["default"] === null);
      state["default"] = val;
      state.optional = true;
      return this;
    };
    Node.prototype.explicit = function explicit(num) {
      const state = this._baseState;
      assert(state.explicit === null && state.implicit === null);
      state.explicit = num;
      return this;
    };
    Node.prototype.implicit = function implicit(num) {
      const state = this._baseState;
      assert(state.explicit === null && state.implicit === null);
      state.implicit = num;
      return this;
    };
    Node.prototype.obj = function obj() {
      const state = this._baseState;
      const args = Array.prototype.slice.call(arguments);
      state.obj = true;
      if (args.length !== 0)
        this._useArgs(args);
      return this;
    };
    Node.prototype.key = function key(newKey) {
      const state = this._baseState;
      assert(state.key === null);
      state.key = newKey;
      return this;
    };
    Node.prototype.any = function any() {
      const state = this._baseState;
      state.any = true;
      return this;
    };
    Node.prototype.choice = function choice(obj) {
      const state = this._baseState;
      assert(state.choice === null);
      state.choice = obj;
      this._useArgs(Object.keys(obj).map(function(key) {
        return obj[key];
      }));
      return this;
    };
    Node.prototype.contains = function contains(item) {
      const state = this._baseState;
      assert(state.use === null);
      state.contains = item;
      return this;
    };
    Node.prototype._decode = function decode(input, options) {
      const state = this._baseState;
      if (state.parent === null)
        return input.wrapResult(state.children[0]._decode(input, options));
      let result = state["default"];
      let present = true;
      let prevKey = null;
      if (state.key !== null)
        prevKey = input.enterKey(state.key);
      if (state.optional) {
        let tag = null;
        if (state.explicit !== null)
          tag = state.explicit;
        else if (state.implicit !== null)
          tag = state.implicit;
        else if (state.tag !== null)
          tag = state.tag;
        if (tag === null && !state.any) {
          const save = input.save();
          try {
            if (state.choice === null)
              this._decodeGeneric(state.tag, input, options);
            else
              this._decodeChoice(input, options);
            present = true;
          } catch (e) {
            present = false;
          }
          input.restore(save);
        } else {
          present = this._peekTag(input, tag, state.any);
          if (input.isError(present))
            return present;
        }
      }
      let prevObj;
      if (state.obj && present)
        prevObj = input.enterObject();
      if (present) {
        if (state.explicit !== null) {
          const explicit = this._decodeTag(input, state.explicit);
          if (input.isError(explicit))
            return explicit;
          input = explicit;
        }
        const start = input.offset;
        if (state.use === null && state.choice === null) {
          let save;
          if (state.any)
            save = input.save();
          const body = this._decodeTag(
            input,
            state.implicit !== null ? state.implicit : state.tag,
            state.any
          );
          if (input.isError(body))
            return body;
          if (state.any)
            result = input.raw(save);
          else
            input = body;
        }
        if (options && options.track && state.tag !== null)
          options.track(input.path(), start, input.length, "tagged");
        if (options && options.track && state.tag !== null)
          options.track(input.path(), input.offset, input.length, "content");
        if (state.any) {
        } else if (state.choice === null) {
          result = this._decodeGeneric(state.tag, input, options);
        } else {
          result = this._decodeChoice(input, options);
        }
        if (input.isError(result))
          return result;
        if (!state.any && state.choice === null && state.children !== null) {
          state.children.forEach(function decodeChildren(child) {
            child._decode(input, options);
          });
        }
        if (state.contains && (state.tag === "octstr" || state.tag === "bitstr")) {
          const data = new DecoderBuffer(result);
          result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
        }
      }
      if (state.obj && present)
        result = input.leaveObject(prevObj);
      if (state.key !== null && (result !== null || present === true))
        input.leaveKey(prevKey, state.key, result);
      else if (prevKey !== null)
        input.exitKey(prevKey);
      return result;
    };
    Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
      const state = this._baseState;
      if (tag === "seq" || tag === "set")
        return null;
      if (tag === "seqof" || tag === "setof")
        return this._decodeList(input, tag, state.args[0], options);
      else if (/str$/.test(tag))
        return this._decodeStr(input, tag, options);
      else if (tag === "objid" && state.args)
        return this._decodeObjid(input, state.args[0], state.args[1], options);
      else if (tag === "objid")
        return this._decodeObjid(input, null, null, options);
      else if (tag === "gentime" || tag === "utctime")
        return this._decodeTime(input, tag, options);
      else if (tag === "null_")
        return this._decodeNull(input, options);
      else if (tag === "bool")
        return this._decodeBool(input, options);
      else if (tag === "objDesc")
        return this._decodeStr(input, tag, options);
      else if (tag === "int" || tag === "enum")
        return this._decodeInt(input, state.args && state.args[0], options);
      if (state.use !== null) {
        return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
      } else {
        return input.error("unknown tag: " + tag);
      }
    };
    Node.prototype._getUse = function _getUse(entity, obj) {
      const state = this._baseState;
      state.useDecoder = this._use(entity, obj);
      assert(state.useDecoder._baseState.parent === null);
      state.useDecoder = state.useDecoder._baseState.children[0];
      if (state.implicit !== state.useDecoder._baseState.implicit) {
        state.useDecoder = state.useDecoder.clone();
        state.useDecoder._baseState.implicit = state.implicit;
      }
      return state.useDecoder;
    };
    Node.prototype._decodeChoice = function decodeChoice(input, options) {
      const state = this._baseState;
      let result = null;
      let match = false;
      Object.keys(state.choice).some(function(key) {
        const save = input.save();
        const node = state.choice[key];
        try {
          const value = node._decode(input, options);
          if (input.isError(value))
            return false;
          result = { type: key, value };
          match = true;
        } catch (e) {
          input.restore(save);
          return false;
        }
        return true;
      }, this);
      if (!match)
        return input.error("Choice not matched");
      return result;
    };
    Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
      return new EncoderBuffer(data, this.reporter);
    };
    Node.prototype._encode = function encode3(data, reporter, parent) {
      const state = this._baseState;
      if (state["default"] !== null && state["default"] === data)
        return;
      const result = this._encodeValue(data, reporter, parent);
      if (result === void 0)
        return;
      if (this._skipDefault(result, reporter, parent))
        return;
      return result;
    };
    Node.prototype._encodeValue = function encode3(data, reporter, parent) {
      const state = this._baseState;
      if (state.parent === null)
        return state.children[0]._encode(data, reporter || new Reporter());
      let result = null;
      this.reporter = reporter;
      if (state.optional && data === void 0) {
        if (state["default"] !== null)
          data = state["default"];
        else
          return;
      }
      let content = null;
      let primitive = false;
      if (state.any) {
        result = this._createEncoderBuffer(data);
      } else if (state.choice) {
        result = this._encodeChoice(data, reporter);
      } else if (state.contains) {
        content = this._getUse(state.contains, parent)._encode(data, reporter);
        primitive = true;
      } else if (state.children) {
        content = state.children.map(function(child) {
          if (child._baseState.tag === "null_")
            return child._encode(null, reporter, data);
          if (child._baseState.key === null)
            return reporter.error("Child should have a key");
          const prevKey = reporter.enterKey(child._baseState.key);
          if (typeof data !== "object")
            return reporter.error("Child expected, but input is not object");
          const res = child._encode(data[child._baseState.key], reporter, data);
          reporter.leaveKey(prevKey);
          return res;
        }, this).filter(function(child) {
          return child;
        });
        content = this._createEncoderBuffer(content);
      } else {
        if (state.tag === "seqof" || state.tag === "setof") {
          if (!(state.args && state.args.length === 1))
            return reporter.error("Too many args for : " + state.tag);
          if (!Array.isArray(data))
            return reporter.error("seqof/setof, but data is not Array");
          const child = this.clone();
          child._baseState.implicit = null;
          content = this._createEncoderBuffer(data.map(function(item) {
            const state2 = this._baseState;
            return this._getUse(state2.args[0], data)._encode(item, reporter);
          }, child));
        } else if (state.use !== null) {
          result = this._getUse(state.use, parent)._encode(data, reporter);
        } else {
          content = this._encodePrimitive(state.tag, data);
          primitive = true;
        }
      }
      if (!state.any && state.choice === null) {
        const tag = state.implicit !== null ? state.implicit : state.tag;
        const cls = state.implicit === null ? "universal" : "context";
        if (tag === null) {
          if (state.use === null)
            reporter.error("Tag could be omitted only for .use()");
        } else {
          if (state.use === null)
            result = this._encodeComposite(tag, primitive, cls, content);
        }
      }
      if (state.explicit !== null)
        result = this._encodeComposite(state.explicit, false, "context", result);
      return result;
    };
    Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
      const state = this._baseState;
      const node = state.choice[data.type];
      if (!node) {
        assert(
          false,
          data.type + " not found in " + JSON.stringify(Object.keys(state.choice))
        );
      }
      return node._encode(data.value, reporter);
    };
    Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
      const state = this._baseState;
      if (/str$/.test(tag))
        return this._encodeStr(data, tag);
      else if (tag === "objid" && state.args)
        return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
      else if (tag === "objid")
        return this._encodeObjid(data, null, null);
      else if (tag === "gentime" || tag === "utctime")
        return this._encodeTime(data, tag);
      else if (tag === "null_")
        return this._encodeNull();
      else if (tag === "int" || tag === "enum")
        return this._encodeInt(data, state.args && state.reverseArgs[0]);
      else if (tag === "bool")
        return this._encodeBool(data);
      else if (tag === "objDesc")
        return this._encodeStr(data, tag);
      else
        throw new Error("Unsupported tag: " + tag);
    };
    Node.prototype._isNumstr = function isNumstr(str) {
      return /^[0-9 ]*$/.test(str);
    };
    Node.prototype._isPrintstr = function isPrintstr(str) {
      return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
    };
  }
});

// node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/constants/der.js
var require_der = __commonJS({
  "node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/constants/der.js"(exports) {
    "use strict";
    init_shim();
    function reverse(map) {
      const res = {};
      Object.keys(map).forEach(function(key) {
        if ((key | 0) == key)
          key = key | 0;
        const value = map[key];
        res[value] = key;
      });
      return res;
    }
    exports.tagClass = {
      0: "universal",
      1: "application",
      2: "context",
      3: "private"
    };
    exports.tagClassByName = reverse(exports.tagClass);
    exports.tag = {
      0: "end",
      1: "bool",
      2: "int",
      3: "bitstr",
      4: "octstr",
      5: "null_",
      6: "objid",
      7: "objDesc",
      8: "external",
      9: "real",
      10: "enum",
      11: "embed",
      12: "utf8str",
      13: "relativeOid",
      16: "seq",
      17: "set",
      18: "numstr",
      19: "printstr",
      20: "t61str",
      21: "videostr",
      22: "ia5str",
      23: "utctime",
      24: "gentime",
      25: "graphstr",
      26: "iso646str",
      27: "genstr",
      28: "unistr",
      29: "charstr",
      30: "bmpstr"
    };
    exports.tagByName = reverse(exports.tag);
  }
});

// node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/encoders/der.js
var require_der2 = __commonJS({
  "node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/encoders/der.js"(exports, module) {
    "use strict";
    init_shim();
    var inherits2 = require_inherits_browser();
    var Buffer2 = require_safer().Buffer;
    var Node = require_node();
    var der = require_der();
    function DEREncoder(entity) {
      this.enc = "der";
      this.name = entity.name;
      this.entity = entity;
      this.tree = new DERNode();
      this.tree._init(entity.body);
    }
    module.exports = DEREncoder;
    DEREncoder.prototype.encode = function encode3(data, reporter) {
      return this.tree._encode(data, reporter).join();
    };
    function DERNode(parent) {
      Node.call(this, "der", parent);
    }
    inherits2(DERNode, Node);
    DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
      const encodedTag = encodeTag(tag, primitive, cls, this.reporter);
      if (content.length < 128) {
        const header2 = Buffer2.alloc(2);
        header2[0] = encodedTag;
        header2[1] = content.length;
        return this._createEncoderBuffer([header2, content]);
      }
      let lenOctets = 1;
      for (let i = content.length; i >= 256; i >>= 8)
        lenOctets++;
      const header = Buffer2.alloc(1 + 1 + lenOctets);
      header[0] = encodedTag;
      header[1] = 128 | lenOctets;
      for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
        header[i] = j & 255;
      return this._createEncoderBuffer([header, content]);
    };
    DERNode.prototype._encodeStr = function encodeStr(str, tag) {
      if (tag === "bitstr") {
        return this._createEncoderBuffer([str.unused | 0, str.data]);
      } else if (tag === "bmpstr") {
        const buf = Buffer2.alloc(str.length * 2);
        for (let i = 0; i < str.length; i++) {
          buf.writeUInt16BE(str.charCodeAt(i), i * 2);
        }
        return this._createEncoderBuffer(buf);
      } else if (tag === "numstr") {
        if (!this._isNumstr(str)) {
          return this.reporter.error("Encoding of string type: numstr supports only digits and space");
        }
        return this._createEncoderBuffer(str);
      } else if (tag === "printstr") {
        if (!this._isPrintstr(str)) {
          return this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark");
        }
        return this._createEncoderBuffer(str);
      } else if (/str$/.test(tag)) {
        return this._createEncoderBuffer(str);
      } else if (tag === "objDesc") {
        return this._createEncoderBuffer(str);
      } else {
        return this.reporter.error("Encoding of string type: " + tag + " unsupported");
      }
    };
    DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
      if (typeof id === "string") {
        if (!values)
          return this.reporter.error("string objid given, but no values map found");
        if (!values.hasOwnProperty(id))
          return this.reporter.error("objid not found in values map");
        id = values[id].split(/[\s.]+/g);
        for (let i = 0; i < id.length; i++)
          id[i] |= 0;
      } else if (Array.isArray(id)) {
        id = id.slice();
        for (let i = 0; i < id.length; i++)
          id[i] |= 0;
      }
      if (!Array.isArray(id)) {
        return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(id));
      }
      if (!relative) {
        if (id[1] >= 40)
          return this.reporter.error("Second objid identifier OOB");
        id.splice(0, 2, id[0] * 40 + id[1]);
      }
      let size = 0;
      for (let i = 0; i < id.length; i++) {
        let ident = id[i];
        for (size++; ident >= 128; ident >>= 7)
          size++;
      }
      const objid = Buffer2.alloc(size);
      let offset = objid.length - 1;
      for (let i = id.length - 1; i >= 0; i--) {
        let ident = id[i];
        objid[offset--] = ident & 127;
        while ((ident >>= 7) > 0)
          objid[offset--] = 128 | ident & 127;
      }
      return this._createEncoderBuffer(objid);
    };
    function two(num) {
      if (num < 10)
        return "0" + num;
      else
        return num;
    }
    DERNode.prototype._encodeTime = function encodeTime(time, tag) {
      let str;
      const date = new Date(time);
      if (tag === "gentime") {
        str = [
          two(date.getUTCFullYear()),
          two(date.getUTCMonth() + 1),
          two(date.getUTCDate()),
          two(date.getUTCHours()),
          two(date.getUTCMinutes()),
          two(date.getUTCSeconds()),
          "Z"
        ].join("");
      } else if (tag === "utctime") {
        str = [
          two(date.getUTCFullYear() % 100),
          two(date.getUTCMonth() + 1),
          two(date.getUTCDate()),
          two(date.getUTCHours()),
          two(date.getUTCMinutes()),
          two(date.getUTCSeconds()),
          "Z"
        ].join("");
      } else {
        this.reporter.error("Encoding " + tag + " time is not supported yet");
      }
      return this._encodeStr(str, "octstr");
    };
    DERNode.prototype._encodeNull = function encodeNull() {
      return this._createEncoderBuffer("");
    };
    DERNode.prototype._encodeInt = function encodeInt(num, values) {
      if (typeof num === "string") {
        if (!values)
          return this.reporter.error("String int or enum given, but no values map");
        if (!values.hasOwnProperty(num)) {
          return this.reporter.error("Values map doesn't contain: " + JSON.stringify(num));
        }
        num = values[num];
      }
      if (typeof num !== "number" && !Buffer2.isBuffer(num)) {
        const numArray = num.toArray();
        if (!num.sign && numArray[0] & 128) {
          numArray.unshift(0);
        }
        num = Buffer2.from(numArray);
      }
      if (Buffer2.isBuffer(num)) {
        let size2 = num.length;
        if (num.length === 0)
          size2++;
        const out2 = Buffer2.alloc(size2);
        num.copy(out2);
        if (num.length === 0)
          out2[0] = 0;
        return this._createEncoderBuffer(out2);
      }
      if (num < 128)
        return this._createEncoderBuffer(num);
      if (num < 256)
        return this._createEncoderBuffer([0, num]);
      let size = 1;
      for (let i = num; i >= 256; i >>= 8)
        size++;
      const out = new Array(size);
      for (let i = out.length - 1; i >= 0; i--) {
        out[i] = num & 255;
        num >>= 8;
      }
      if (out[0] & 128) {
        out.unshift(0);
      }
      return this._createEncoderBuffer(Buffer2.from(out));
    };
    DERNode.prototype._encodeBool = function encodeBool(value) {
      return this._createEncoderBuffer(value ? 255 : 0);
    };
    DERNode.prototype._use = function use(entity, obj) {
      if (typeof entity === "function")
        entity = entity(obj);
      return entity._getEncoder("der").tree;
    };
    DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
      const state = this._baseState;
      let i;
      if (state["default"] === null)
        return false;
      const data = dataBuffer.join();
      if (state.defaultBuffer === void 0)
        state.defaultBuffer = this._encodeValue(state["default"], reporter, parent).join();
      if (data.length !== state.defaultBuffer.length)
        return false;
      for (i = 0; i < data.length; i++)
        if (data[i] !== state.defaultBuffer[i])
          return false;
      return true;
    };
    function encodeTag(tag, primitive, cls, reporter) {
      let res;
      if (tag === "seqof")
        tag = "seq";
      else if (tag === "setof")
        tag = "set";
      if (der.tagByName.hasOwnProperty(tag))
        res = der.tagByName[tag];
      else if (typeof tag === "number" && (tag | 0) === tag)
        res = tag;
      else
        return reporter.error("Unknown tag: " + tag);
      if (res >= 31)
        return reporter.error("Multi-octet tag encoding unsupported");
      if (!primitive)
        res |= 32;
      res |= der.tagClassByName[cls || "universal"] << 6;
      return res;
    }
  }
});

// node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/encoders/pem.js
var require_pem = __commonJS({
  "node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/encoders/pem.js"(exports, module) {
    "use strict";
    init_shim();
    var inherits2 = require_inherits_browser();
    var DEREncoder = require_der2();
    function PEMEncoder(entity) {
      DEREncoder.call(this, entity);
      this.enc = "pem";
    }
    inherits2(PEMEncoder, DEREncoder);
    module.exports = PEMEncoder;
    PEMEncoder.prototype.encode = function encode3(data, options) {
      const buf = DEREncoder.prototype.encode.call(this, data);
      const p = buf.toString("base64");
      const out = ["-----BEGIN " + options.label + "-----"];
      for (let i = 0; i < p.length; i += 64)
        out.push(p.slice(i, i + 64));
      out.push("-----END " + options.label + "-----");
      return out.join("\n");
    };
  }
});

// node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/encoders/index.js
var require_encoders = __commonJS({
  "node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/encoders/index.js"(exports) {
    "use strict";
    init_shim();
    var encoders = exports;
    encoders.der = require_der2();
    encoders.pem = require_pem();
  }
});

// node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/decoders/der.js
var require_der3 = __commonJS({
  "node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/decoders/der.js"(exports, module) {
    "use strict";
    init_shim();
    var inherits2 = require_inherits_browser();
    var bignum = require_bn();
    var DecoderBuffer = require_buffer2().DecoderBuffer;
    var Node = require_node();
    var der = require_der();
    function DERDecoder(entity) {
      this.enc = "der";
      this.name = entity.name;
      this.entity = entity;
      this.tree = new DERNode();
      this.tree._init(entity.body);
    }
    module.exports = DERDecoder;
    DERDecoder.prototype.decode = function decode(data, options) {
      if (!DecoderBuffer.isDecoderBuffer(data)) {
        data = new DecoderBuffer(data, options);
      }
      return this.tree._decode(data, options);
    };
    function DERNode(parent) {
      Node.call(this, "der", parent);
    }
    inherits2(DERNode, Node);
    DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
      if (buffer.isEmpty())
        return false;
      const state = buffer.save();
      const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
      if (buffer.isError(decodedTag))
        return decodedTag;
      buffer.restore(state);
      return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + "of" === tag || any;
    };
    DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
      const decodedTag = derDecodeTag(
        buffer,
        'Failed to decode tag of "' + tag + '"'
      );
      if (buffer.isError(decodedTag))
        return decodedTag;
      let len = derDecodeLen(
        buffer,
        decodedTag.primitive,
        'Failed to get length of "' + tag + '"'
      );
      if (buffer.isError(len))
        return len;
      if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + "of" !== tag) {
        return buffer.error('Failed to match tag: "' + tag + '"');
      }
      if (decodedTag.primitive || len !== null)
        return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
      const state = buffer.save();
      const res = this._skipUntilEnd(
        buffer,
        'Failed to skip indefinite length body: "' + this.tag + '"'
      );
      if (buffer.isError(res))
        return res;
      len = buffer.offset - state.offset;
      buffer.restore(state);
      return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    };
    DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
      for (; ; ) {
        const tag = derDecodeTag(buffer, fail);
        if (buffer.isError(tag))
          return tag;
        const len = derDecodeLen(buffer, tag.primitive, fail);
        if (buffer.isError(len))
          return len;
        let res;
        if (tag.primitive || len !== null)
          res = buffer.skip(len);
        else
          res = this._skipUntilEnd(buffer, fail);
        if (buffer.isError(res))
          return res;
        if (tag.tagStr === "end")
          break;
      }
    };
    DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
      const result = [];
      while (!buffer.isEmpty()) {
        const possibleEnd = this._peekTag(buffer, "end");
        if (buffer.isError(possibleEnd))
          return possibleEnd;
        const res = decoder.decode(buffer, "der", options);
        if (buffer.isError(res) && possibleEnd)
          break;
        result.push(res);
      }
      return result;
    };
    DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
      if (tag === "bitstr") {
        const unused = buffer.readUInt8();
        if (buffer.isError(unused))
          return unused;
        return { unused, data: buffer.raw() };
      } else if (tag === "bmpstr") {
        const raw = buffer.raw();
        if (raw.length % 2 === 1)
          return buffer.error("Decoding of string type: bmpstr length mismatch");
        let str = "";
        for (let i = 0; i < raw.length / 2; i++) {
          str += String.fromCharCode(raw.readUInt16BE(i * 2));
        }
        return str;
      } else if (tag === "numstr") {
        const numstr = buffer.raw().toString("ascii");
        if (!this._isNumstr(numstr)) {
          return buffer.error("Decoding of string type: numstr unsupported characters");
        }
        return numstr;
      } else if (tag === "octstr") {
        return buffer.raw();
      } else if (tag === "objDesc") {
        return buffer.raw();
      } else if (tag === "printstr") {
        const printstr = buffer.raw().toString("ascii");
        if (!this._isPrintstr(printstr)) {
          return buffer.error("Decoding of string type: printstr unsupported characters");
        }
        return printstr;
      } else if (/str$/.test(tag)) {
        return buffer.raw().toString();
      } else {
        return buffer.error("Decoding of string type: " + tag + " unsupported");
      }
    };
    DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
      let result;
      const identifiers = [];
      let ident = 0;
      let subident = 0;
      while (!buffer.isEmpty()) {
        subident = buffer.readUInt8();
        ident <<= 7;
        ident |= subident & 127;
        if ((subident & 128) === 0) {
          identifiers.push(ident);
          ident = 0;
        }
      }
      if (subident & 128)
        identifiers.push(ident);
      const first = identifiers[0] / 40 | 0;
      const second = identifiers[0] % 40;
      if (relative)
        result = identifiers;
      else
        result = [first, second].concat(identifiers.slice(1));
      if (values) {
        let tmp = values[result.join(" ")];
        if (tmp === void 0)
          tmp = values[result.join(".")];
        if (tmp !== void 0)
          result = tmp;
      }
      return result;
    };
    DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
      const str = buffer.raw().toString();
      let year;
      let mon;
      let day;
      let hour;
      let min;
      let sec;
      if (tag === "gentime") {
        year = str.slice(0, 4) | 0;
        mon = str.slice(4, 6) | 0;
        day = str.slice(6, 8) | 0;
        hour = str.slice(8, 10) | 0;
        min = str.slice(10, 12) | 0;
        sec = str.slice(12, 14) | 0;
      } else if (tag === "utctime") {
        year = str.slice(0, 2) | 0;
        mon = str.slice(2, 4) | 0;
        day = str.slice(4, 6) | 0;
        hour = str.slice(6, 8) | 0;
        min = str.slice(8, 10) | 0;
        sec = str.slice(10, 12) | 0;
        if (year < 70)
          year = 2e3 + year;
        else
          year = 1900 + year;
      } else {
        return buffer.error("Decoding " + tag + " time is not supported yet");
      }
      return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
    };
    DERNode.prototype._decodeNull = function decodeNull() {
      return null;
    };
    DERNode.prototype._decodeBool = function decodeBool(buffer) {
      const res = buffer.readUInt8();
      if (buffer.isError(res))
        return res;
      else
        return res !== 0;
    };
    DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
      const raw = buffer.raw();
      let res = new bignum(raw);
      if (values)
        res = values[res.toString(10)] || res;
      return res;
    };
    DERNode.prototype._use = function use(entity, obj) {
      if (typeof entity === "function")
        entity = entity(obj);
      return entity._getDecoder("der").tree;
    };
    function derDecodeTag(buf, fail) {
      let tag = buf.readUInt8(fail);
      if (buf.isError(tag))
        return tag;
      const cls = der.tagClass[tag >> 6];
      const primitive = (tag & 32) === 0;
      if ((tag & 31) === 31) {
        let oct = tag;
        tag = 0;
        while ((oct & 128) === 128) {
          oct = buf.readUInt8(fail);
          if (buf.isError(oct))
            return oct;
          tag <<= 7;
          tag |= oct & 127;
        }
      } else {
        tag &= 31;
      }
      const tagStr = der.tag[tag];
      return {
        cls,
        primitive,
        tag,
        tagStr
      };
    }
    function derDecodeLen(buf, primitive, fail) {
      let len = buf.readUInt8(fail);
      if (buf.isError(len))
        return len;
      if (!primitive && len === 128)
        return null;
      if ((len & 128) === 0) {
        return len;
      }
      const num = len & 127;
      if (num > 4)
        return buf.error("length octect is too long");
      len = 0;
      for (let i = 0; i < num; i++) {
        len <<= 8;
        const j = buf.readUInt8(fail);
        if (buf.isError(j))
          return j;
        len |= j;
      }
      return len;
    }
  }
});

// node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/decoders/pem.js
var require_pem2 = __commonJS({
  "node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/decoders/pem.js"(exports, module) {
    "use strict";
    init_shim();
    var inherits2 = require_inherits_browser();
    var Buffer2 = require_safer().Buffer;
    var DERDecoder = require_der3();
    function PEMDecoder(entity) {
      DERDecoder.call(this, entity);
      this.enc = "pem";
    }
    inherits2(PEMDecoder, DERDecoder);
    module.exports = PEMDecoder;
    PEMDecoder.prototype.decode = function decode(data, options) {
      const lines = data.toString().split(/[\r\n]+/g);
      const label = options.label.toUpperCase();
      const re = /^-----(BEGIN|END) ([^-]+)-----$/;
      let start = -1;
      let end = -1;
      for (let i = 0; i < lines.length; i++) {
        const match = lines[i].match(re);
        if (match === null)
          continue;
        if (match[2] !== label)
          continue;
        if (start === -1) {
          if (match[1] !== "BEGIN")
            break;
          start = i;
        } else {
          if (match[1] !== "END")
            break;
          end = i;
          break;
        }
      }
      if (start === -1 || end === -1)
        throw new Error("PEM section not found for: " + label);
      const base64 = lines.slice(start + 1, end).join("");
      base64.replace(/[^a-z0-9+/=]+/gi, "");
      const input = Buffer2.from(base64, "base64");
      return DERDecoder.prototype.decode.call(this, input, options);
    };
  }
});

// node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/decoders/index.js
var require_decoders = __commonJS({
  "node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/decoders/index.js"(exports) {
    "use strict";
    init_shim();
    var decoders = exports;
    decoders.der = require_der3();
    decoders.pem = require_pem2();
  }
});

// node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/api.js
var require_api = __commonJS({
  "node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/api.js"(exports) {
    "use strict";
    init_shim();
    var encoders = require_encoders();
    var decoders = require_decoders();
    var inherits2 = require_inherits_browser();
    var api = exports;
    api.define = function define2(name, body) {
      return new Entity(name, body);
    };
    function Entity(name, body) {
      this.name = name;
      this.body = body;
      this.decoders = {};
      this.encoders = {};
    }
    Entity.prototype._createNamed = function createNamed(Base) {
      const name = this.name;
      function Generated(entity) {
        this._initNamed(entity, name);
      }
      inherits2(Generated, Base);
      Generated.prototype._initNamed = function _initNamed(entity, name2) {
        Base.call(this, entity, name2);
      };
      return new Generated(this);
    };
    Entity.prototype._getDecoder = function _getDecoder(enc) {
      enc = enc || "der";
      if (!this.decoders.hasOwnProperty(enc))
        this.decoders[enc] = this._createNamed(decoders[enc]);
      return this.decoders[enc];
    };
    Entity.prototype.decode = function decode(data, enc, options) {
      return this._getDecoder(enc).decode(data, options);
    };
    Entity.prototype._getEncoder = function _getEncoder(enc) {
      enc = enc || "der";
      if (!this.encoders.hasOwnProperty(enc))
        this.encoders[enc] = this._createNamed(encoders[enc]);
      return this.encoders[enc];
    };
    Entity.prototype.encode = function encode3(data, enc, reporter) {
      return this._getEncoder(enc).encode(data, reporter);
    };
  }
});

// node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/base/index.js
var require_base2 = __commonJS({
  "node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/base/index.js"(exports) {
    "use strict";
    init_shim();
    var base = exports;
    base.Reporter = require_reporter().Reporter;
    base.DecoderBuffer = require_buffer2().DecoderBuffer;
    base.EncoderBuffer = require_buffer2().EncoderBuffer;
    base.Node = require_node();
  }
});

// node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/constants/index.js
var require_constants = __commonJS({
  "node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1/constants/index.js"(exports) {
    "use strict";
    init_shim();
    var constants = exports;
    constants._reverse = function reverse(map) {
      const res = {};
      Object.keys(map).forEach(function(key) {
        if ((key | 0) == key)
          key = key | 0;
        const value = map[key];
        res[value] = key;
      });
      return res;
    };
    constants.der = require_der();
  }
});

// node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1.js
var require_asn1 = __commonJS({
  "node_modules/.pnpm/asn1.js@5.4.1/node_modules/asn1.js/lib/asn1.js"(exports) {
    "use strict";
    init_shim();
    var asn1 = exports;
    asn1.bignum = require_bn();
    asn1.define = require_api().define;
    asn1.base = require_base2();
    asn1.constants = require_constants();
    asn1.decoders = require_decoders();
    asn1.encoders = require_encoders();
  }
});

// node_modules/.pnpm/parse-asn1@5.1.6/node_modules/parse-asn1/certificate.js
var require_certificate = __commonJS({
  "node_modules/.pnpm/parse-asn1@5.1.6/node_modules/parse-asn1/certificate.js"(exports, module) {
    "use strict";
    init_shim();
    var asn = require_asn1();
    var Time = asn.define("Time", function() {
      this.choice({
        utcTime: this.utctime(),
        generalTime: this.gentime()
      });
    });
    var AttributeTypeValue = asn.define("AttributeTypeValue", function() {
      this.seq().obj(
        this.key("type").objid(),
        this.key("value").any()
      );
    });
    var AlgorithmIdentifier = asn.define("AlgorithmIdentifier", function() {
      this.seq().obj(
        this.key("algorithm").objid(),
        this.key("parameters").optional(),
        this.key("curve").objid().optional()
      );
    });
    var SubjectPublicKeyInfo = asn.define("SubjectPublicKeyInfo", function() {
      this.seq().obj(
        this.key("algorithm").use(AlgorithmIdentifier),
        this.key("subjectPublicKey").bitstr()
      );
    });
    var RelativeDistinguishedName = asn.define("RelativeDistinguishedName", function() {
      this.setof(AttributeTypeValue);
    });
    var RDNSequence = asn.define("RDNSequence", function() {
      this.seqof(RelativeDistinguishedName);
    });
    var Name = asn.define("Name", function() {
      this.choice({
        rdnSequence: this.use(RDNSequence)
      });
    });
    var Validity = asn.define("Validity", function() {
      this.seq().obj(
        this.key("notBefore").use(Time),
        this.key("notAfter").use(Time)
      );
    });
    var Extension = asn.define("Extension", function() {
      this.seq().obj(
        this.key("extnID").objid(),
        this.key("critical").bool().def(false),
        this.key("extnValue").octstr()
      );
    });
    var TBSCertificate = asn.define("TBSCertificate", function() {
      this.seq().obj(
        this.key("version").explicit(0).int().optional(),
        this.key("serialNumber").int(),
        this.key("signature").use(AlgorithmIdentifier),
        this.key("issuer").use(Name),
        this.key("validity").use(Validity),
        this.key("subject").use(Name),
        this.key("subjectPublicKeyInfo").use(SubjectPublicKeyInfo),
        this.key("issuerUniqueID").implicit(1).bitstr().optional(),
        this.key("subjectUniqueID").implicit(2).bitstr().optional(),
        this.key("extensions").explicit(3).seqof(Extension).optional()
      );
    });
    var X509Certificate = asn.define("X509Certificate", function() {
      this.seq().obj(
        this.key("tbsCertificate").use(TBSCertificate),
        this.key("signatureAlgorithm").use(AlgorithmIdentifier),
        this.key("signatureValue").bitstr()
      );
    });
    module.exports = X509Certificate;
  }
});

// node_modules/.pnpm/parse-asn1@5.1.6/node_modules/parse-asn1/asn1.js
var require_asn12 = __commonJS({
  "node_modules/.pnpm/parse-asn1@5.1.6/node_modules/parse-asn1/asn1.js"(exports) {
    "use strict";
    init_shim();
    var asn1 = require_asn1();
    exports.certificate = require_certificate();
    var RSAPrivateKey = asn1.define("RSAPrivateKey", function() {
      this.seq().obj(
        this.key("version").int(),
        this.key("modulus").int(),
        this.key("publicExponent").int(),
        this.key("privateExponent").int(),
        this.key("prime1").int(),
        this.key("prime2").int(),
        this.key("exponent1").int(),
        this.key("exponent2").int(),
        this.key("coefficient").int()
      );
    });
    exports.RSAPrivateKey = RSAPrivateKey;
    var RSAPublicKey = asn1.define("RSAPublicKey", function() {
      this.seq().obj(
        this.key("modulus").int(),
        this.key("publicExponent").int()
      );
    });
    exports.RSAPublicKey = RSAPublicKey;
    var PublicKey = asn1.define("SubjectPublicKeyInfo", function() {
      this.seq().obj(
        this.key("algorithm").use(AlgorithmIdentifier),
        this.key("subjectPublicKey").bitstr()
      );
    });
    exports.PublicKey = PublicKey;
    var AlgorithmIdentifier = asn1.define("AlgorithmIdentifier", function() {
      this.seq().obj(
        this.key("algorithm").objid(),
        this.key("none").null_().optional(),
        this.key("curve").objid().optional(),
        this.key("params").seq().obj(
          this.key("p").int(),
          this.key("q").int(),
          this.key("g").int()
        ).optional()
      );
    });
    var PrivateKeyInfo = asn1.define("PrivateKeyInfo", function() {
      this.seq().obj(
        this.key("version").int(),
        this.key("algorithm").use(AlgorithmIdentifier),
        this.key("subjectPrivateKey").octstr()
      );
    });
    exports.PrivateKey = PrivateKeyInfo;
    var EncryptedPrivateKeyInfo = asn1.define("EncryptedPrivateKeyInfo", function() {
      this.seq().obj(
        this.key("algorithm").seq().obj(
          this.key("id").objid(),
          this.key("decrypt").seq().obj(
            this.key("kde").seq().obj(
              this.key("id").objid(),
              this.key("kdeparams").seq().obj(
                this.key("salt").octstr(),
                this.key("iters").int()
              )
            ),
            this.key("cipher").seq().obj(
              this.key("algo").objid(),
              this.key("iv").octstr()
            )
          )
        ),
        this.key("subjectPrivateKey").octstr()
      );
    });
    exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;
    var DSAPrivateKey = asn1.define("DSAPrivateKey", function() {
      this.seq().obj(
        this.key("version").int(),
        this.key("p").int(),
        this.key("q").int(),
        this.key("g").int(),
        this.key("pub_key").int(),
        this.key("priv_key").int()
      );
    });
    exports.DSAPrivateKey = DSAPrivateKey;
    exports.DSAparam = asn1.define("DSAparam", function() {
      this.int();
    });
    var ECPrivateKey = asn1.define("ECPrivateKey", function() {
      this.seq().obj(
        this.key("version").int(),
        this.key("privateKey").octstr(),
        this.key("parameters").optional().explicit(0).use(ECParameters),
        this.key("publicKey").optional().explicit(1).bitstr()
      );
    });
    exports.ECPrivateKey = ECPrivateKey;
    var ECParameters = asn1.define("ECParameters", function() {
      this.choice({
        namedCurve: this.objid()
      });
    });
    exports.signature = asn1.define("signature", function() {
      this.seq().obj(
        this.key("r").int(),
        this.key("s").int()
      );
    });
  }
});

// node_modules/.pnpm/parse-asn1@5.1.6/node_modules/parse-asn1/aesid.json
var require_aesid = __commonJS({
  "node_modules/.pnpm/parse-asn1@5.1.6/node_modules/parse-asn1/aesid.json"(exports, module) {
    module.exports = {
      "2.16.840.1.101.3.4.1.1": "aes-128-ecb",
      "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
      "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
      "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
      "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
      "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
      "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
      "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
      "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
      "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
      "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
      "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
    };
  }
});

// node_modules/.pnpm/parse-asn1@5.1.6/node_modules/parse-asn1/fixProc.js
var require_fixProc = __commonJS({
  "node_modules/.pnpm/parse-asn1@5.1.6/node_modules/parse-asn1/fixProc.js"(exports, module) {
    init_shim();
    var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
    var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
    var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;
    var evp = require_evp_bytestokey();
    var ciphers = require_browser6();
    var Buffer2 = require_safe_buffer().Buffer;
    module.exports = function(okey, password) {
      var key = okey.toString();
      var match = key.match(findProc);
      var decrypted;
      if (!match) {
        var match2 = key.match(fullRegex);
        decrypted = Buffer2.from(match2[2].replace(/[\r\n]/g, ""), "base64");
      } else {
        var suite = "aes" + match[1];
        var iv = Buffer2.from(match[2], "hex");
        var cipherText = Buffer2.from(match[3].replace(/[\r\n]/g, ""), "base64");
        var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
        var out = [];
        var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
        out.push(cipher.update(cipherText));
        out.push(cipher.final());
        decrypted = Buffer2.concat(out);
      }
      var tag = key.match(startRegex)[1];
      return {
        tag,
        data: decrypted
      };
    };
  }
});

// node_modules/.pnpm/parse-asn1@5.1.6/node_modules/parse-asn1/index.js
var require_parse_asn1 = __commonJS({
  "node_modules/.pnpm/parse-asn1@5.1.6/node_modules/parse-asn1/index.js"(exports, module) {
    init_shim();
    var asn1 = require_asn12();
    var aesid = require_aesid();
    var fixProc = require_fixProc();
    var ciphers = require_browser6();
    var compat = require_browser5();
    var Buffer2 = require_safe_buffer().Buffer;
    module.exports = parseKeys;
    function parseKeys(buffer) {
      var password;
      if (typeof buffer === "object" && !Buffer2.isBuffer(buffer)) {
        password = buffer.passphrase;
        buffer = buffer.key;
      }
      if (typeof buffer === "string") {
        buffer = Buffer2.from(buffer);
      }
      var stripped = fixProc(buffer, password);
      var type = stripped.tag;
      var data = stripped.data;
      var subtype, ndata;
      switch (type) {
        case "CERTIFICATE":
          ndata = asn1.certificate.decode(data, "der").tbsCertificate.subjectPublicKeyInfo;
        case "PUBLIC KEY":
          if (!ndata) {
            ndata = asn1.PublicKey.decode(data, "der");
          }
          subtype = ndata.algorithm.algorithm.join(".");
          switch (subtype) {
            case "1.2.840.113549.1.1.1":
              return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, "der");
            case "1.2.840.10045.2.1":
              ndata.subjectPrivateKey = ndata.subjectPublicKey;
              return {
                type: "ec",
                data: ndata
              };
            case "1.2.840.10040.4.1":
              ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, "der");
              return {
                type: "dsa",
                data: ndata.algorithm.params
              };
            default:
              throw new Error("unknown key id " + subtype);
          }
        case "ENCRYPTED PRIVATE KEY":
          data = asn1.EncryptedPrivateKey.decode(data, "der");
          data = decrypt(data, password);
        case "PRIVATE KEY":
          ndata = asn1.PrivateKey.decode(data, "der");
          subtype = ndata.algorithm.algorithm.join(".");
          switch (subtype) {
            case "1.2.840.113549.1.1.1":
              return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, "der");
            case "1.2.840.10045.2.1":
              return {
                curve: ndata.algorithm.curve,
                privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, "der").privateKey
              };
            case "1.2.840.10040.4.1":
              ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, "der");
              return {
                type: "dsa",
                params: ndata.algorithm.params
              };
            default:
              throw new Error("unknown key id " + subtype);
          }
        case "RSA PUBLIC KEY":
          return asn1.RSAPublicKey.decode(data, "der");
        case "RSA PRIVATE KEY":
          return asn1.RSAPrivateKey.decode(data, "der");
        case "DSA PRIVATE KEY":
          return {
            type: "dsa",
            params: asn1.DSAPrivateKey.decode(data, "der")
          };
        case "EC PRIVATE KEY":
          data = asn1.ECPrivateKey.decode(data, "der");
          return {
            curve: data.parameters.value,
            privateKey: data.privateKey
          };
        default:
          throw new Error("unknown key type " + type);
      }
    }
    parseKeys.signature = asn1.signature;
    function decrypt(data, password) {
      var salt = data.algorithm.decrypt.kde.kdeparams.salt;
      var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
      var algo = aesid[data.algorithm.decrypt.cipher.algo.join(".")];
      var iv = data.algorithm.decrypt.cipher.iv;
      var cipherText = data.subjectPrivateKey;
      var keylen = parseInt(algo.split("-")[1], 10) / 8;
      var key = compat.pbkdf2Sync(password, salt, iters, keylen, "sha1");
      var cipher = ciphers.createDecipheriv(algo, key, iv);
      var out = [];
      out.push(cipher.update(cipherText));
      out.push(cipher.final());
      return Buffer2.concat(out);
    }
  }
});

// node_modules/.pnpm/browserify-sign@4.2.1/node_modules/browserify-sign/browser/curves.json
var require_curves2 = __commonJS({
  "node_modules/.pnpm/browserify-sign@4.2.1/node_modules/browserify-sign/browser/curves.json"(exports, module) {
    module.exports = {
      "1.3.132.0.10": "secp256k1",
      "1.3.132.0.33": "p224",
      "1.2.840.10045.3.1.1": "p192",
      "1.2.840.10045.3.1.7": "p256",
      "1.3.132.0.34": "p384",
      "1.3.132.0.35": "p521"
    };
  }
});

// node_modules/.pnpm/browserify-sign@4.2.1/node_modules/browserify-sign/browser/sign.js
var require_sign = __commonJS({
  "node_modules/.pnpm/browserify-sign@4.2.1/node_modules/browserify-sign/browser/sign.js"(exports, module) {
    init_shim();
    var Buffer2 = require_safe_buffer().Buffer;
    var createHmac = require_browser4();
    var crt = require_browserify_rsa();
    var EC = require_elliptic().ec;
    var BN = require_bn2();
    var parseKeys = require_parse_asn1();
    var curves = require_curves2();
    function sign(hash, key, hashType, signType, tag) {
      var priv = parseKeys(key);
      if (priv.curve) {
        if (signType !== "ecdsa" && signType !== "ecdsa/rsa")
          throw new Error("wrong private key type");
        return ecSign(hash, priv);
      } else if (priv.type === "dsa") {
        if (signType !== "dsa")
          throw new Error("wrong private key type");
        return dsaSign(hash, priv, hashType);
      } else {
        if (signType !== "rsa" && signType !== "ecdsa/rsa")
          throw new Error("wrong private key type");
      }
      hash = Buffer2.concat([tag, hash]);
      var len = priv.modulus.byteLength();
      var pad = [0, 1];
      while (hash.length + pad.length + 1 < len)
        pad.push(255);
      pad.push(0);
      var i = -1;
      while (++i < hash.length)
        pad.push(hash[i]);
      var out = crt(pad, priv);
      return out;
    }
    function ecSign(hash, priv) {
      var curveId = curves[priv.curve.join(".")];
      if (!curveId)
        throw new Error("unknown curve " + priv.curve.join("."));
      var curve = new EC(curveId);
      var key = curve.keyFromPrivate(priv.privateKey);
      var out = key.sign(hash);
      return Buffer2.from(out.toDER());
    }
    function dsaSign(hash, priv, algo) {
      var x = priv.params.priv_key;
      var p = priv.params.p;
      var q = priv.params.q;
      var g = priv.params.g;
      var r = new BN(0);
      var k;
      var H = bits2int(hash, q).mod(q);
      var s = false;
      var kv = getKey(x, q, hash, algo);
      while (s === false) {
        k = makeKey(q, kv, algo);
        r = makeR(g, k, p, q);
        s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
        if (s.cmpn(0) === 0) {
          s = false;
          r = new BN(0);
        }
      }
      return toDER(r, s);
    }
    function toDER(r, s) {
      r = r.toArray();
      s = s.toArray();
      if (r[0] & 128)
        r = [0].concat(r);
      if (s[0] & 128)
        s = [0].concat(s);
      var total = r.length + s.length + 4;
      var res = [48, total, 2, r.length];
      res = res.concat(r, [2, s.length], s);
      return Buffer2.from(res);
    }
    function getKey(x, q, hash, algo) {
      x = Buffer2.from(x.toArray());
      if (x.length < q.byteLength()) {
        var zeros = Buffer2.alloc(q.byteLength() - x.length);
        x = Buffer2.concat([zeros, x]);
      }
      var hlen = hash.length;
      var hbits = bits2octets(hash, q);
      var v = Buffer2.alloc(hlen);
      v.fill(1);
      var k = Buffer2.alloc(hlen);
      k = createHmac(algo, k).update(v).update(Buffer2.from([0])).update(x).update(hbits).digest();
      v = createHmac(algo, k).update(v).digest();
      k = createHmac(algo, k).update(v).update(Buffer2.from([1])).update(x).update(hbits).digest();
      v = createHmac(algo, k).update(v).digest();
      return { k, v };
    }
    function bits2int(obits, q) {
      var bits = new BN(obits);
      var shift = (obits.length << 3) - q.bitLength();
      if (shift > 0)
        bits.ishrn(shift);
      return bits;
    }
    function bits2octets(bits, q) {
      bits = bits2int(bits, q);
      bits = bits.mod(q);
      var out = Buffer2.from(bits.toArray());
      if (out.length < q.byteLength()) {
        var zeros = Buffer2.alloc(q.byteLength() - out.length);
        out = Buffer2.concat([zeros, out]);
      }
      return out;
    }
    function makeKey(q, kv, algo) {
      var t;
      var k;
      do {
        t = Buffer2.alloc(0);
        while (t.length * 8 < q.bitLength()) {
          kv.v = createHmac(algo, kv.k).update(kv.v).digest();
          t = Buffer2.concat([t, kv.v]);
        }
        k = bits2int(t, q);
        kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer2.from([0])).digest();
        kv.v = createHmac(algo, kv.k).update(kv.v).digest();
      } while (k.cmp(q) !== -1);
      return k;
    }
    function makeR(g, k, p, q) {
      return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);
    }
    module.exports = sign;
    module.exports.getKey = getKey;
    module.exports.makeKey = makeKey;
  }
});

// node_modules/.pnpm/browserify-sign@4.2.1/node_modules/browserify-sign/browser/verify.js
var require_verify = __commonJS({
  "node_modules/.pnpm/browserify-sign@4.2.1/node_modules/browserify-sign/browser/verify.js"(exports, module) {
    init_shim();
    var Buffer2 = require_safe_buffer().Buffer;
    var BN = require_bn2();
    var EC = require_elliptic().ec;
    var parseKeys = require_parse_asn1();
    var curves = require_curves2();
    function verify(sig, hash, key, signType, tag) {
      var pub = parseKeys(key);
      if (pub.type === "ec") {
        if (signType !== "ecdsa" && signType !== "ecdsa/rsa")
          throw new Error("wrong public key type");
        return ecVerify(sig, hash, pub);
      } else if (pub.type === "dsa") {
        if (signType !== "dsa")
          throw new Error("wrong public key type");
        return dsaVerify(sig, hash, pub);
      } else {
        if (signType !== "rsa" && signType !== "ecdsa/rsa")
          throw new Error("wrong public key type");
      }
      hash = Buffer2.concat([tag, hash]);
      var len = pub.modulus.byteLength();
      var pad = [1];
      var padNum = 0;
      while (hash.length + pad.length + 2 < len) {
        pad.push(255);
        padNum++;
      }
      pad.push(0);
      var i = -1;
      while (++i < hash.length) {
        pad.push(hash[i]);
      }
      pad = Buffer2.from(pad);
      var red = BN.mont(pub.modulus);
      sig = new BN(sig).toRed(red);
      sig = sig.redPow(new BN(pub.publicExponent));
      sig = Buffer2.from(sig.fromRed().toArray());
      var out = padNum < 8 ? 1 : 0;
      len = Math.min(sig.length, pad.length);
      if (sig.length !== pad.length)
        out = 1;
      i = -1;
      while (++i < len)
        out |= sig[i] ^ pad[i];
      return out === 0;
    }
    function ecVerify(sig, hash, pub) {
      var curveId = curves[pub.data.algorithm.curve.join(".")];
      if (!curveId)
        throw new Error("unknown curve " + pub.data.algorithm.curve.join("."));
      var curve = new EC(curveId);
      var pubkey = pub.data.subjectPrivateKey.data;
      return curve.verify(hash, sig, pubkey);
    }
    function dsaVerify(sig, hash, pub) {
      var p = pub.data.p;
      var q = pub.data.q;
      var g = pub.data.g;
      var y = pub.data.pub_key;
      var unpacked = parseKeys.signature.decode(sig, "der");
      var s = unpacked.s;
      var r = unpacked.r;
      checkValue(s, q);
      checkValue(r, q);
      var montp = BN.mont(p);
      var w = s.invm(q);
      var v = g.toRed(montp).redPow(new BN(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);
      return v.cmp(r) === 0;
    }
    function checkValue(b, q) {
      if (b.cmpn(0) <= 0)
        throw new Error("invalid sig");
      if (b.cmp(q) >= q)
        throw new Error("invalid sig");
    }
    module.exports = verify;
  }
});

// node_modules/.pnpm/browserify-sign@4.2.1/node_modules/browserify-sign/browser/index.js
var require_browser9 = __commonJS({
  "node_modules/.pnpm/browserify-sign@4.2.1/node_modules/browserify-sign/browser/index.js"(exports, module) {
    init_shim();
    var Buffer2 = require_safe_buffer().Buffer;
    var createHash = require_browser3();
    var stream = require_readable_browser();
    var inherits2 = require_inherits_browser();
    var sign = require_sign();
    var verify = require_verify();
    var algorithms = require_algorithms();
    Object.keys(algorithms).forEach(function(key) {
      algorithms[key].id = Buffer2.from(algorithms[key].id, "hex");
      algorithms[key.toLowerCase()] = algorithms[key];
    });
    function Sign(algorithm) {
      stream.Writable.call(this);
      var data = algorithms[algorithm];
      if (!data)
        throw new Error("Unknown message digest");
      this._hashType = data.hash;
      this._hash = createHash(data.hash);
      this._tag = data.id;
      this._signType = data.sign;
    }
    inherits2(Sign, stream.Writable);
    Sign.prototype._write = function _write(data, _, done) {
      this._hash.update(data);
      done();
    };
    Sign.prototype.update = function update(data, enc) {
      if (typeof data === "string")
        data = Buffer2.from(data, enc);
      this._hash.update(data);
      return this;
    };
    Sign.prototype.sign = function signMethod(key, enc) {
      this.end();
      var hash = this._hash.digest();
      var sig = sign(hash, key, this._hashType, this._signType, this._tag);
      return enc ? sig.toString(enc) : sig;
    };
    function Verify(algorithm) {
      stream.Writable.call(this);
      var data = algorithms[algorithm];
      if (!data)
        throw new Error("Unknown message digest");
      this._hash = createHash(data.hash);
      this._tag = data.id;
      this._signType = data.sign;
    }
    inherits2(Verify, stream.Writable);
    Verify.prototype._write = function _write(data, _, done) {
      this._hash.update(data);
      done();
    };
    Verify.prototype.update = function update(data, enc) {
      if (typeof data === "string")
        data = Buffer2.from(data, enc);
      this._hash.update(data);
      return this;
    };
    Verify.prototype.verify = function verifyMethod(key, sig, enc) {
      if (typeof sig === "string")
        sig = Buffer2.from(sig, enc);
      this.end();
      var hash = this._hash.digest();
      return verify(sig, hash, key, this._signType, this._tag);
    };
    function createSign(algorithm) {
      return new Sign(algorithm);
    }
    function createVerify(algorithm) {
      return new Verify(algorithm);
    }
    module.exports = {
      Sign: createSign,
      Verify: createVerify,
      createSign,
      createVerify
    };
  }
});

// node_modules/.pnpm/create-ecdh@4.0.4/node_modules/create-ecdh/browser.js
var require_browser10 = __commonJS({
  "node_modules/.pnpm/create-ecdh@4.0.4/node_modules/create-ecdh/browser.js"(exports, module) {
    init_shim();
    var elliptic = require_elliptic();
    var BN = require_bn();
    module.exports = function createECDH(curve) {
      return new ECDH(curve);
    };
    var aliases = {
      secp256k1: {
        name: "secp256k1",
        byteLength: 32
      },
      secp224r1: {
        name: "p224",
        byteLength: 28
      },
      prime256v1: {
        name: "p256",
        byteLength: 32
      },
      prime192v1: {
        name: "p192",
        byteLength: 24
      },
      ed25519: {
        name: "ed25519",
        byteLength: 32
      },
      secp384r1: {
        name: "p384",
        byteLength: 48
      },
      secp521r1: {
        name: "p521",
        byteLength: 66
      }
    };
    aliases.p224 = aliases.secp224r1;
    aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
    aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
    aliases.p384 = aliases.secp384r1;
    aliases.p521 = aliases.secp521r1;
    function ECDH(curve) {
      this.curveType = aliases[curve];
      if (!this.curveType) {
        this.curveType = {
          name: curve
        };
      }
      this.curve = new elliptic.ec(this.curveType.name);
      this.keys = void 0;
    }
    ECDH.prototype.generateKeys = function(enc, format) {
      this.keys = this.curve.genKeyPair();
      return this.getPublicKey(enc, format);
    };
    ECDH.prototype.computeSecret = function(other, inenc, enc) {
      inenc = inenc || "utf8";
      if (!import_buffer.Buffer.isBuffer(other)) {
        other = new import_buffer.Buffer(other, inenc);
      }
      var otherPub = this.curve.keyFromPublic(other).getPublic();
      var out = otherPub.mul(this.keys.getPrivate()).getX();
      return formatReturnValue(out, enc, this.curveType.byteLength);
    };
    ECDH.prototype.getPublicKey = function(enc, format) {
      var key = this.keys.getPublic(format === "compressed", true);
      if (format === "hybrid") {
        if (key[key.length - 1] % 2) {
          key[0] = 7;
        } else {
          key[0] = 6;
        }
      }
      return formatReturnValue(key, enc);
    };
    ECDH.prototype.getPrivateKey = function(enc) {
      return formatReturnValue(this.keys.getPrivate(), enc);
    };
    ECDH.prototype.setPublicKey = function(pub, enc) {
      enc = enc || "utf8";
      if (!import_buffer.Buffer.isBuffer(pub)) {
        pub = new import_buffer.Buffer(pub, enc);
      }
      this.keys._importPublic(pub);
      return this;
    };
    ECDH.prototype.setPrivateKey = function(priv, enc) {
      enc = enc || "utf8";
      if (!import_buffer.Buffer.isBuffer(priv)) {
        priv = new import_buffer.Buffer(priv, enc);
      }
      var _priv = new BN(priv);
      _priv = _priv.toString(16);
      this.keys = this.curve.genKeyPair();
      this.keys._importPrivate(_priv);
      return this;
    };
    function formatReturnValue(bn, enc, len) {
      if (!Array.isArray(bn)) {
        bn = bn.toArray();
      }
      var buf = new import_buffer.Buffer(bn);
      if (len && buf.length < len) {
        var zeros = new import_buffer.Buffer(len - buf.length);
        zeros.fill(0);
        buf = import_buffer.Buffer.concat([zeros, buf]);
      }
      if (!enc) {
        return buf;
      } else {
        return buf.toString(enc);
      }
    }
  }
});

// node_modules/.pnpm/public-encrypt@4.0.3/node_modules/public-encrypt/mgf.js
var require_mgf = __commonJS({
  "node_modules/.pnpm/public-encrypt@4.0.3/node_modules/public-encrypt/mgf.js"(exports, module) {
    init_shim();
    var createHash = require_browser3();
    var Buffer2 = require_safe_buffer().Buffer;
    module.exports = function(seed, len) {
      var t = Buffer2.alloc(0);
      var i = 0;
      var c;
      while (t.length < len) {
        c = i2ops(i++);
        t = Buffer2.concat([t, createHash("sha1").update(seed).update(c).digest()]);
      }
      return t.slice(0, len);
    };
    function i2ops(c) {
      var out = Buffer2.allocUnsafe(4);
      out.writeUInt32BE(c, 0);
      return out;
    }
  }
});

// node_modules/.pnpm/public-encrypt@4.0.3/node_modules/public-encrypt/xor.js
var require_xor = __commonJS({
  "node_modules/.pnpm/public-encrypt@4.0.3/node_modules/public-encrypt/xor.js"(exports, module) {
    init_shim();
    module.exports = function xor(a, b) {
      var len = a.length;
      var i = -1;
      while (++i < len) {
        a[i] ^= b[i];
      }
      return a;
    };
  }
});

// node_modules/.pnpm/public-encrypt@4.0.3/node_modules/public-encrypt/withPublic.js
var require_withPublic = __commonJS({
  "node_modules/.pnpm/public-encrypt@4.0.3/node_modules/public-encrypt/withPublic.js"(exports, module) {
    init_shim();
    var BN = require_bn();
    var Buffer2 = require_safe_buffer().Buffer;
    function withPublic(paddedMsg, key) {
      return Buffer2.from(paddedMsg.toRed(BN.mont(key.modulus)).redPow(new BN(key.publicExponent)).fromRed().toArray());
    }
    module.exports = withPublic;
  }
});

// node_modules/.pnpm/public-encrypt@4.0.3/node_modules/public-encrypt/publicEncrypt.js
var require_publicEncrypt = __commonJS({
  "node_modules/.pnpm/public-encrypt@4.0.3/node_modules/public-encrypt/publicEncrypt.js"(exports, module) {
    init_shim();
    var parseKeys = require_parse_asn1();
    var randomBytes = require_browser();
    var createHash = require_browser3();
    var mgf = require_mgf();
    var xor = require_xor();
    var BN = require_bn();
    var withPublic = require_withPublic();
    var crt = require_browserify_rsa();
    var Buffer2 = require_safe_buffer().Buffer;
    module.exports = function publicEncrypt(publicKey, msg, reverse) {
      var padding;
      if (publicKey.padding) {
        padding = publicKey.padding;
      } else if (reverse) {
        padding = 1;
      } else {
        padding = 4;
      }
      var key = parseKeys(publicKey);
      var paddedMsg;
      if (padding === 4) {
        paddedMsg = oaep(key, msg);
      } else if (padding === 1) {
        paddedMsg = pkcs1(key, msg, reverse);
      } else if (padding === 3) {
        paddedMsg = new BN(msg);
        if (paddedMsg.cmp(key.modulus) >= 0) {
          throw new Error("data too long for modulus");
        }
      } else {
        throw new Error("unknown padding");
      }
      if (reverse) {
        return crt(paddedMsg, key);
      } else {
        return withPublic(paddedMsg, key);
      }
    };
    function oaep(key, msg) {
      var k = key.modulus.byteLength();
      var mLen = msg.length;
      var iHash = createHash("sha1").update(Buffer2.alloc(0)).digest();
      var hLen = iHash.length;
      var hLen2 = 2 * hLen;
      if (mLen > k - hLen2 - 2) {
        throw new Error("message too long");
      }
      var ps = Buffer2.alloc(k - mLen - hLen2 - 2);
      var dblen = k - hLen - 1;
      var seed = randomBytes(hLen);
      var maskedDb = xor(Buffer2.concat([iHash, ps, Buffer2.alloc(1, 1), msg], dblen), mgf(seed, dblen));
      var maskedSeed = xor(seed, mgf(maskedDb, hLen));
      return new BN(Buffer2.concat([Buffer2.alloc(1), maskedSeed, maskedDb], k));
    }
    function pkcs1(key, msg, reverse) {
      var mLen = msg.length;
      var k = key.modulus.byteLength();
      if (mLen > k - 11) {
        throw new Error("message too long");
      }
      var ps;
      if (reverse) {
        ps = Buffer2.alloc(k - mLen - 3, 255);
      } else {
        ps = nonZero(k - mLen - 3);
      }
      return new BN(Buffer2.concat([Buffer2.from([0, reverse ? 1 : 2]), ps, Buffer2.alloc(1), msg], k));
    }
    function nonZero(len) {
      var out = Buffer2.allocUnsafe(len);
      var i = 0;
      var cache = randomBytes(len * 2);
      var cur = 0;
      var num;
      while (i < len) {
        if (cur === cache.length) {
          cache = randomBytes(len * 2);
          cur = 0;
        }
        num = cache[cur++];
        if (num) {
          out[i++] = num;
        }
      }
      return out;
    }
  }
});

// node_modules/.pnpm/public-encrypt@4.0.3/node_modules/public-encrypt/privateDecrypt.js
var require_privateDecrypt = __commonJS({
  "node_modules/.pnpm/public-encrypt@4.0.3/node_modules/public-encrypt/privateDecrypt.js"(exports, module) {
    init_shim();
    var parseKeys = require_parse_asn1();
    var mgf = require_mgf();
    var xor = require_xor();
    var BN = require_bn();
    var crt = require_browserify_rsa();
    var createHash = require_browser3();
    var withPublic = require_withPublic();
    var Buffer2 = require_safe_buffer().Buffer;
    module.exports = function privateDecrypt(privateKey, enc, reverse) {
      var padding;
      if (privateKey.padding) {
        padding = privateKey.padding;
      } else if (reverse) {
        padding = 1;
      } else {
        padding = 4;
      }
      var key = parseKeys(privateKey);
      var k = key.modulus.byteLength();
      if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
        throw new Error("decryption error");
      }
      var msg;
      if (reverse) {
        msg = withPublic(new BN(enc), key);
      } else {
        msg = crt(enc, key);
      }
      var zBuffer = Buffer2.alloc(k - msg.length);
      msg = Buffer2.concat([zBuffer, msg], k);
      if (padding === 4) {
        return oaep(key, msg);
      } else if (padding === 1) {
        return pkcs1(key, msg, reverse);
      } else if (padding === 3) {
        return msg;
      } else {
        throw new Error("unknown padding");
      }
    };
    function oaep(key, msg) {
      var k = key.modulus.byteLength();
      var iHash = createHash("sha1").update(Buffer2.alloc(0)).digest();
      var hLen = iHash.length;
      if (msg[0] !== 0) {
        throw new Error("decryption error");
      }
      var maskedSeed = msg.slice(1, hLen + 1);
      var maskedDb = msg.slice(hLen + 1);
      var seed = xor(maskedSeed, mgf(maskedDb, hLen));
      var db = xor(maskedDb, mgf(seed, k - hLen - 1));
      if (compare(iHash, db.slice(0, hLen))) {
        throw new Error("decryption error");
      }
      var i = hLen;
      while (db[i] === 0) {
        i++;
      }
      if (db[i++] !== 1) {
        throw new Error("decryption error");
      }
      return db.slice(i);
    }
    function pkcs1(key, msg, reverse) {
      var p1 = msg.slice(0, 2);
      var i = 2;
      var status = 0;
      while (msg[i++] !== 0) {
        if (i >= msg.length) {
          status++;
          break;
        }
      }
      var ps = msg.slice(2, i - 1);
      if (p1.toString("hex") !== "0002" && !reverse || p1.toString("hex") !== "0001" && reverse) {
        status++;
      }
      if (ps.length < 8) {
        status++;
      }
      if (status) {
        throw new Error("decryption error");
      }
      return msg.slice(i);
    }
    function compare(a, b) {
      a = Buffer2.from(a);
      b = Buffer2.from(b);
      var dif = 0;
      var len = a.length;
      if (a.length !== b.length) {
        dif++;
        len = Math.min(a.length, b.length);
      }
      var i = -1;
      while (++i < len) {
        dif += a[i] ^ b[i];
      }
      return dif;
    }
  }
});

// node_modules/.pnpm/public-encrypt@4.0.3/node_modules/public-encrypt/browser.js
var require_browser11 = __commonJS({
  "node_modules/.pnpm/public-encrypt@4.0.3/node_modules/public-encrypt/browser.js"(exports) {
    init_shim();
    exports.publicEncrypt = require_publicEncrypt();
    exports.privateDecrypt = require_privateDecrypt();
    exports.privateEncrypt = function privateEncrypt(key, buf) {
      return exports.publicEncrypt(key, buf, true);
    };
    exports.publicDecrypt = function publicDecrypt(key, buf) {
      return exports.privateDecrypt(key, buf, true);
    };
  }
});

// node_modules/.pnpm/randomfill@1.0.4/node_modules/randomfill/browser.js
var require_browser12 = __commonJS({
  "node_modules/.pnpm/randomfill@1.0.4/node_modules/randomfill/browser.js"(exports) {
    "use strict";
    init_shim();
    function oldBrowser() {
      throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11");
    }
    var safeBuffer = require_safe_buffer();
    var randombytes = require_browser();
    var Buffer2 = safeBuffer.Buffer;
    var kBufferMaxLength = safeBuffer.kMaxLength;
    var crypto2 = _global.crypto || _global.msCrypto;
    var kMaxUint32 = Math.pow(2, 32) - 1;
    function assertOffset(offset, length) {
      if (typeof offset !== "number" || offset !== offset) {
        throw new TypeError("offset must be a number");
      }
      if (offset > kMaxUint32 || offset < 0) {
        throw new TypeError("offset must be a uint32");
      }
      if (offset > kBufferMaxLength || offset > length) {
        throw new RangeError("offset out of range");
      }
    }
    function assertSize(size, offset, length) {
      if (typeof size !== "number" || size !== size) {
        throw new TypeError("size must be a number");
      }
      if (size > kMaxUint32 || size < 0) {
        throw new TypeError("size must be a uint32");
      }
      if (size + offset > length || size > kBufferMaxLength) {
        throw new RangeError("buffer too small");
      }
    }
    if (crypto2 && crypto2.getRandomValues || !import_process.default.browser) {
      exports.randomFill = randomFill;
      exports.randomFillSync = randomFillSync;
    } else {
      exports.randomFill = oldBrowser;
      exports.randomFillSync = oldBrowser;
    }
    function randomFill(buf, offset, size, cb) {
      if (!Buffer2.isBuffer(buf) && !(buf instanceof _global.Uint8Array)) {
        throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
      }
      if (typeof offset === "function") {
        cb = offset;
        offset = 0;
        size = buf.length;
      } else if (typeof size === "function") {
        cb = size;
        size = buf.length - offset;
      } else if (typeof cb !== "function") {
        throw new TypeError('"cb" argument must be a function');
      }
      assertOffset(offset, buf.length);
      assertSize(size, offset, buf.length);
      return actualFill(buf, offset, size, cb);
    }
    function actualFill(buf, offset, size, cb) {
      if (import_process.default.browser) {
        var ourBuf = buf.buffer;
        var uint = new Uint8Array(ourBuf, offset, size);
        crypto2.getRandomValues(uint);
        if (cb) {
          import_process.default.nextTick(function() {
            cb(null, buf);
          });
          return;
        }
        return buf;
      }
      if (cb) {
        randombytes(size, function(err, bytes2) {
          if (err) {
            return cb(err);
          }
          bytes2.copy(buf, offset);
          cb(null, buf);
        });
        return;
      }
      var bytes = randombytes(size);
      bytes.copy(buf, offset);
      return buf;
    }
    function randomFillSync(buf, offset, size) {
      if (typeof offset === "undefined") {
        offset = 0;
      }
      if (!Buffer2.isBuffer(buf) && !(buf instanceof _global.Uint8Array)) {
        throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
      }
      assertOffset(offset, buf.length);
      if (size === void 0)
        size = buf.length - offset;
      assertSize(size, offset, buf.length);
      return actualFill(buf, offset, size);
    }
  }
});

// node_modules/.pnpm/crypto-browserify@3.12.0/node_modules/crypto-browserify/index.js
var require_crypto_browserify = __commonJS({
  "node_modules/.pnpm/crypto-browserify@3.12.0/node_modules/crypto-browserify/index.js"(exports) {
    "use strict";
    init_shim();
    exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require_browser();
    exports.createHash = exports.Hash = require_browser3();
    exports.createHmac = exports.Hmac = require_browser4();
    var algos = require_algos();
    var algoKeys = Object.keys(algos);
    var hashes = ["sha1", "sha224", "sha256", "sha384", "sha512", "md5", "rmd160"].concat(algoKeys);
    exports.getHashes = function() {
      return hashes;
    };
    var p = require_browser5();
    exports.pbkdf2 = p.pbkdf2;
    exports.pbkdf2Sync = p.pbkdf2Sync;
    var aes = require_browser7();
    exports.Cipher = aes.Cipher;
    exports.createCipher = aes.createCipher;
    exports.Cipheriv = aes.Cipheriv;
    exports.createCipheriv = aes.createCipheriv;
    exports.Decipher = aes.Decipher;
    exports.createDecipher = aes.createDecipher;
    exports.Decipheriv = aes.Decipheriv;
    exports.createDecipheriv = aes.createDecipheriv;
    exports.getCiphers = aes.getCiphers;
    exports.listCiphers = aes.listCiphers;
    var dh = require_browser8();
    exports.DiffieHellmanGroup = dh.DiffieHellmanGroup;
    exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;
    exports.getDiffieHellman = dh.getDiffieHellman;
    exports.createDiffieHellman = dh.createDiffieHellman;
    exports.DiffieHellman = dh.DiffieHellman;
    var sign = require_browser9();
    exports.createSign = sign.createSign;
    exports.Sign = sign.Sign;
    exports.createVerify = sign.createVerify;
    exports.Verify = sign.Verify;
    exports.createECDH = require_browser10();
    var publicEncrypt = require_browser11();
    exports.publicEncrypt = publicEncrypt.publicEncrypt;
    exports.privateEncrypt = publicEncrypt.privateEncrypt;
    exports.publicDecrypt = publicEncrypt.publicDecrypt;
    exports.privateDecrypt = publicEncrypt.privateDecrypt;
    var rf = require_browser12();
    exports.randomFill = rf.randomFill;
    exports.randomFillSync = rf.randomFillSync;
    exports.createCredentials = function() {
      throw new Error([
        "sorry, createCredentials is not implemented yet",
        "we accept pull requests",
        "https://github.com/crypto-browserify/crypto-browserify"
      ].join("\n"));
    };
    exports.constants = {
      "DH_CHECK_P_NOT_SAFE_PRIME": 2,
      "DH_CHECK_P_NOT_PRIME": 1,
      "DH_UNABLE_TO_CHECK_GENERATOR": 4,
      "DH_NOT_SUITABLE_GENERATOR": 8,
      "NPN_ENABLED": 1,
      "ALPN_ENABLED": 1,
      "RSA_PKCS1_PADDING": 1,
      "RSA_SSLV23_PADDING": 2,
      "RSA_NO_PADDING": 3,
      "RSA_PKCS1_OAEP_PADDING": 4,
      "RSA_X931_PADDING": 5,
      "RSA_PKCS1_PSS_PADDING": 6,
      "POINT_CONVERSION_COMPRESSED": 2,
      "POINT_CONVERSION_UNCOMPRESSED": 4,
      "POINT_CONVERSION_HYBRID": 6
    };
  }
});

// node_modules/.pnpm/bsv@2.0.10/node_modules/bsv/dist/bsv.module.js
var require_bsv_module = __commonJS({
  "node_modules/.pnpm/bsv@2.0.10/node_modules/bsv/dist/bsv.module.js"(exports, module) {
    init_shim();
    (() => {
      var t = { 671: (t2, e2, r2) => {
        "use strict";
        r2.r(e2), r2.d(e2, { Ach: () => mt, Address: () => z, Aes: () => lt, Aescbc: () => bt, Base58: () => _, Base58Check: () => k, Bip32: () => G, Bip39: () => Y, Block: () => at, BlockHeader: () => $, Bn: () => p, Br: () => g, Bsm: () => Z, Bw: () => y, Cbc: () => pt, Constants: () => x, Ecdsa: () => X, Ecies: () => gt, Hash: () => P, Interp: () => ot, KeyPair: () => Q, OpCode: () => T, Point: () => L, PrivKey: () => V, PubKey: () => K, Random: () => D, Script: () => q, Sig: () => j, SigOperations: () => ht, Struct: () => S, Tx: () => nt, TxBuilder: () => ut, TxIn: () => it, TxOut: () => st, TxOutMap: () => ft, TxVerifier: () => dt, VarInt: () => rt, Workers: () => E, WorkersResult: () => I, cmp: () => B, deps: () => yt, en: () => J, getConstants: () => R, jp: () => W, version: () => wt });
        var i2 = r2(297), s = r2.n(i2), n = r2(550), a = r2.n(n), o = r2(191), h = r2.n(o), f2 = r2(666), c = r2.n(f2), u = r2(715), d = r2.n(u), l = r2(601);
        function p(t3, e3, ...r3) {
          if (!(this instanceof p))
            return new p(t3, e3, ...r3);
          a().call(this, t3, e3, ...r3);
        }
        function b(t3) {
          const e3 = import_buffer.Buffer.alloc(t3.length);
          for (let r3 = 0; r3 < t3.length; r3++)
            e3[r3] = t3[t3.length - 1 - r3];
          return e3;
        }
        function m(t3) {
          p.prototype["_" + t3] = p.prototype[t3], p.prototype[t3] = function(e3) {
            return "string" == typeof e3 ? e3 = new p(e3) : "number" == typeof e3 && (e3 = new p(e3.toString())), this["_" + t3](e3);
          };
        }
        Object.keys(a()).forEach(function(t3) {
          p[t3] = a()[t3];
        }), p.prototype = Object.create(a().prototype), p.prototype.constructor = p, p.prototype.fromHex = function(t3, e3) {
          return this.fromBuffer(import_buffer.Buffer.from(t3, "hex"), e3);
        }, p.prototype.toHex = function(t3) {
          return this.toBuffer(t3).toString("hex");
        }, p.prototype.toJSON = function() {
          return this.toString();
        }, p.prototype.fromJSON = function(t3) {
          return p(t3).copy(this), this;
        }, p.prototype.fromNumber = function(t3) {
          return p(t3).copy(this), this;
        }, p.prototype.toNumber = function() {
          return parseInt(this.toString(10), 10);
        }, p.prototype.fromString = function(t3, e3) {
          return p(t3, e3).copy(this), this;
        }, p.fromBuffer = function(t3, e3 = { endian: "big" }) {
          return "little" === e3.endian && (t3 = b(t3)), new p(t3.toString("hex"), 16);
        }, p.prototype.fromBuffer = function(t3, e3) {
          return p.fromBuffer(t3, e3).copy(this), this;
        }, p.prototype.toBuffer = function(t3 = { size: void 0, endian: "big" }) {
          let e3;
          if (t3.size) {
            const r4 = this.toString(16, 2), i3 = r4.length / 2;
            if (e3 = import_buffer.Buffer.from(r4, "hex"), i3 === t3.size)
              ;
            else if (i3 > t3.size)
              e3 = e3.slice(i3 - e3.length, e3.length);
            else if (i3 < t3.size) {
              const r5 = import_buffer.Buffer.alloc(t3.size);
              for (let t4 = 0; t4 < e3.length; t4++)
                r5[r5.length - 1 - t4] = e3[e3.length - 1 - t4];
              for (let e4 = 0; e4 < t3.size - i3; e4++)
                r5[e4] = 0;
              e3 = r5;
            }
          } else {
            const t4 = this.toString(16, 2);
            e3 = import_buffer.Buffer.from(t4, "hex");
          }
          "little" === t3.endian && (e3 = b(e3));
          const r3 = import_buffer.Buffer.from([0]);
          return 0 === import_buffer.Buffer.compare(e3, r3) ? import_buffer.Buffer.from([]) : e3;
        }, p.prototype.toFastBuffer = p.prototype.toBuffer, p.fromFastBuffer = p.fromBuffer, p.prototype.fromFastBuffer = p.prototype.fromBuffer, p.prototype.fromSm = function(t3, e3 = { endian: "big" }) {
          return 0 === t3.length && this.fromBuffer(import_buffer.Buffer.from([0])), "little" === e3.endian && (t3 = b(t3)), 128 & t3[0] ? (t3[0] = 127 & t3[0], this.fromBuffer(t3), this.neg().copy(this)) : this.fromBuffer(t3), this;
        }, p.prototype.toSm = function(t3 = { endian: "big" }) {
          const e3 = t3.endian;
          let r3;
          return -1 === this.cmp(0) ? (r3 = this.neg().toBuffer(), 128 & r3[0] ? r3 = import_buffer.Buffer.concat([import_buffer.Buffer.from([128]), r3]) : r3[0] = 128 | r3[0]) : (r3 = this.toBuffer(), 128 & r3[0] && (r3 = import_buffer.Buffer.concat([import_buffer.Buffer.from([0]), r3]))), 1 === r3.length & 0 === r3[0] && (r3 = import_buffer.Buffer.from([])), "little" === e3 && (r3 = b(r3)), r3;
        }, p.prototype.fromBits = function(t3, e3 = { strict: false }) {
          let r3 = import_buffer.Buffer.alloc(4);
          if (r3.writeUInt32BE(t3, 0), t3 = r3.readInt32BE(0), e3.strict && 8388608 & t3)
            throw new Error("negative bit set");
          const i3 = t3 >> 24, s2 = 8388607 & t3;
          if (r3 = import_buffer.Buffer.alloc(4), r3.writeInt32BE(s2), i3 <= 3)
            r3 = r3.slice(1, i3 + 1);
          else {
            const t4 = import_buffer.Buffer.alloc(i3 - 3);
            t4.fill(0), r3 = import_buffer.Buffer.concat([r3, t4]);
          }
          return this.fromBuffer(r3), 8388608 & t3 && p(0).sub(this).copy(this), this;
        }, p.prototype.toBits = function() {
          let t3;
          t3 = this.lt(0) ? this.neg().toBuffer() : this.toBuffer();
          let e3, r3 = t3.length;
          if (r3 > 3)
            e3 = import_buffer.Buffer.concat([import_buffer.Buffer.from([0]), t3.slice(0, 3)]).readUInt32BE(0);
          else if (r3 <= 3) {
            const i4 = import_buffer.Buffer.alloc(3 - r3 + 1);
            i4.fill(0), e3 = import_buffer.Buffer.concat([i4, t3.slice(0, r3)]).readUInt32BE(0);
          }
          8388608 & e3 && (e3 >>= 8, r3++), this.lt(0) && (e3 |= 8388608);
          const i3 = r3 << 24 | e3;
          return t3 = import_buffer.Buffer.alloc(4), t3.writeInt32BE(i3, 0), t3.readUInt32BE(0);
        }, p.prototype.fromScriptNumBuffer = function(t3, e3, r3) {
          if (void 0 === r3 && (r3 = 4), t3.length > r3)
            throw new Error("script number overflow");
          if (e3 && t3.length > 0 && 0 == (127 & t3[t3.length - 1]) && (t3.length <= 1 || 0 == (128 & t3[t3.length - 2])))
            throw new Error("non-minimally encoded script number");
          return this.fromSm(t3, { endian: "little" });
        }, p.prototype.toScriptNumBuffer = function(t3) {
          return this.toSm({ endian: "little" });
        }, p.prototype.neg = function() {
          const t3 = a().prototype.neg.call(this), e3 = Object.create(p.prototype);
          return t3.copy(e3), e3;
        }, p.prototype.add = function(t3) {
          const e3 = a().prototype.add.call(this, t3);
          return t3 = Object.create(p.prototype), e3.copy(t3), t3;
        }, p.prototype.sub = function(t3) {
          const e3 = a().prototype.sub.call(this, t3);
          return t3 = Object.create(p.prototype), e3.copy(t3), t3;
        }, p.prototype.mul = function(t3) {
          const e3 = a().prototype.mul.call(this, t3);
          return t3 = Object.create(p.prototype), e3.copy(t3), t3;
        }, p.prototype.mod = function(t3) {
          const e3 = a().prototype.mod.call(this, t3);
          return t3 = Object.create(p.prototype), e3.copy(t3), t3;
        }, p.prototype.umod = function(t3) {
          const e3 = a().prototype.umod.call(this, t3);
          return t3 = Object.create(p.prototype), e3.copy(t3), t3;
        }, p.prototype.invm = function(t3) {
          const e3 = a().prototype.invm.call(this, t3);
          return t3 = Object.create(p.prototype), e3.copy(t3), t3;
        }, p.prototype.div = function(t3) {
          const e3 = a().prototype.div.call(this, t3);
          return t3 = Object.create(p.prototype), e3.copy(t3), t3;
        }, p.prototype.ushln = function(t3) {
          const e3 = a().prototype.ushln.call(this, t3), r3 = Object.create(p.prototype);
          return e3.copy(r3), r3;
        }, p.prototype.ushrn = function(t3) {
          const e3 = a().prototype.ushrn.call(this, t3), r3 = Object.create(p.prototype);
          return e3.copy(r3), r3;
        }, p.prototype.cmp = function(t3) {
          return a().prototype.cmp.call(this, t3);
        }, p.prototype.eq = function(t3) {
          return 0 === this.cmp(t3);
        }, p.prototype.neq = function(t3) {
          return 0 !== this.cmp(t3);
        }, p.prototype.gt = function(t3) {
          return this.cmp(t3) > 0;
        }, p.prototype.geq = function(t3) {
          return this.cmp(t3) >= 0;
        }, p.prototype.lt = function(t3) {
          return this.cmp(t3) < 0;
        }, p.prototype.leq = function(t3) {
          return this.cmp(t3) <= 0;
        }, m("add"), m("sub"), m("mul"), m("mod"), m("invm"), m("div"), m("cmp"), m("gt"), m("geq"), m("lt"), m("leq");
        class g {
          constructor(t3) {
            this.fromObject({ buf: t3 });
          }
          fromObject(t3) {
            return this.buf = t3.buf || this.buf || void 0, this.pos = t3.pos || this.pos || 0, this;
          }
          eof() {
            return this.pos >= this.buf.length;
          }
          read(t3 = this.buf.length) {
            const e3 = this.buf.slice(this.pos, this.pos + t3);
            return this.pos = this.pos + t3, e3;
          }
          readReverse(t3 = this.buf.length) {
            const e3 = this.buf.slice(this.pos, this.pos + t3);
            this.pos = this.pos + t3;
            const r3 = import_buffer.Buffer.alloc(e3.length);
            for (let t4 = 0; t4 < r3.length; t4++)
              r3[t4] = e3[e3.length - 1 - t4];
            return r3;
          }
          readUInt8() {
            const t3 = this.buf.readUInt8(this.pos);
            return this.pos = this.pos + 1, t3;
          }
          readInt8() {
            const t3 = this.buf.readInt8(this.pos);
            return this.pos = this.pos + 1, t3;
          }
          readUInt16BE() {
            const t3 = this.buf.readUInt16BE(this.pos);
            return this.pos = this.pos + 2, t3;
          }
          readInt16BE() {
            const t3 = this.buf.readInt16BE(this.pos);
            return this.pos = this.pos + 2, t3;
          }
          readUInt16LE() {
            const t3 = this.buf.readUInt16LE(this.pos);
            return this.pos = this.pos + 2, t3;
          }
          readInt16LE() {
            const t3 = this.buf.readInt16LE(this.pos);
            return this.pos = this.pos + 2, t3;
          }
          readUInt32BE() {
            const t3 = this.buf.readUInt32BE(this.pos);
            return this.pos = this.pos + 4, t3;
          }
          readInt32BE() {
            const t3 = this.buf.readInt32BE(this.pos);
            return this.pos = this.pos + 4, t3;
          }
          readUInt32LE() {
            const t3 = this.buf.readUInt32LE(this.pos);
            return this.pos = this.pos + 4, t3;
          }
          readInt32LE() {
            const t3 = this.buf.readInt32LE(this.pos);
            return this.pos = this.pos + 4, t3;
          }
          readUInt64BEBn() {
            const t3 = this.buf.slice(this.pos, this.pos + 8), e3 = new p().fromBuffer(t3);
            return this.pos = this.pos + 8, e3;
          }
          readUInt64LEBn() {
            const t3 = this.readReverse(8);
            return new p().fromBuffer(t3);
          }
          readVarIntNum() {
            const t3 = this.readUInt8();
            let e3, r3;
            switch (t3) {
              case 253:
                return this.readUInt16LE();
              case 254:
                return this.readUInt32LE();
              case 255:
                if (e3 = this.readUInt64LEBn(), r3 = e3.toNumber(), r3 <= Math.pow(2, 53))
                  return r3;
                throw new Error("number too large to retain precision - use readVarIntBn");
              default:
                return t3;
            }
          }
          readVarIntBuf() {
            switch (this.buf.readUInt8(this.pos)) {
              case 253:
                return this.read(3);
              case 254:
                return this.read(5);
              case 255:
                return this.read(9);
              default:
                return this.read(1);
            }
          }
          readVarIntBn() {
            const t3 = this.readUInt8();
            switch (t3) {
              case 253:
                return new p(this.readUInt16LE());
              case 254:
                return new p(this.readUInt32LE());
              case 255:
                return this.readUInt64LEBn();
              default:
                return new p(t3);
            }
          }
        }
        class y {
          constructor(t3) {
            this.fromObject({ bufs: t3 });
          }
          fromObject(t3) {
            return this.bufs = t3.bufs || this.bufs || [], this;
          }
          getLength() {
            let t3 = 0;
            for (const e3 in this.bufs)
              t3 += this.bufs[e3].length;
            return t3;
          }
          toBuffer() {
            return import_buffer.Buffer.concat(this.bufs);
          }
          write(t3) {
            return this.bufs.push(t3), this;
          }
          writeReverse(t3) {
            const e3 = import_buffer.Buffer.alloc(t3.length);
            for (let r3 = 0; r3 < e3.length; r3++)
              e3[r3] = t3[t3.length - 1 - r3];
            return this.bufs.push(e3), this;
          }
          writeUInt8(t3) {
            const e3 = import_buffer.Buffer.alloc(1);
            return e3.writeUInt8(t3, 0), this.write(e3), this;
          }
          writeInt8(t3) {
            const e3 = import_buffer.Buffer.alloc(1);
            return e3.writeInt8(t3, 0), this.write(e3), this;
          }
          writeUInt16BE(t3) {
            const e3 = import_buffer.Buffer.alloc(2);
            return e3.writeUInt16BE(t3, 0), this.write(e3), this;
          }
          writeInt16BE(t3) {
            const e3 = import_buffer.Buffer.alloc(2);
            return e3.writeInt16BE(t3, 0), this.write(e3), this;
          }
          writeUInt16LE(t3) {
            const e3 = import_buffer.Buffer.alloc(2);
            return e3.writeUInt16LE(t3, 0), this.write(e3), this;
          }
          writeInt16LE(t3) {
            const e3 = import_buffer.Buffer.alloc(2);
            return e3.writeInt16LE(t3, 0), this.write(e3), this;
          }
          writeUInt32BE(t3) {
            const e3 = import_buffer.Buffer.alloc(4);
            return e3.writeUInt32BE(t3, 0), this.write(e3), this;
          }
          writeInt32BE(t3) {
            const e3 = import_buffer.Buffer.alloc(4);
            return e3.writeInt32BE(t3, 0), this.write(e3), this;
          }
          writeUInt32LE(t3) {
            const e3 = import_buffer.Buffer.alloc(4);
            return e3.writeUInt32LE(t3, 0), this.write(e3), this;
          }
          writeInt32LE(t3) {
            const e3 = import_buffer.Buffer.alloc(4);
            return e3.writeInt32LE(t3, 0), this.write(e3), this;
          }
          writeUInt64BEBn(t3) {
            const e3 = t3.toBuffer({ size: 8 });
            return this.write(e3), this;
          }
          writeUInt64LEBn(t3) {
            const e3 = t3.toBuffer({ size: 8 });
            return this.writeReverse(e3), this;
          }
          writeVarIntNum(t3) {
            const e3 = y.varIntBufNum(t3);
            return this.write(e3), this;
          }
          writeVarIntBn(t3) {
            const e3 = y.varIntBufBn(t3);
            return this.write(e3), this;
          }
          static varIntBufNum(t3) {
            let e3;
            return t3 < 253 ? (e3 = import_buffer.Buffer.alloc(1), e3.writeUInt8(t3, 0)) : t3 < 65536 ? (e3 = import_buffer.Buffer.alloc(3), e3.writeUInt8(253, 0), e3.writeUInt16LE(t3, 1)) : t3 < 4294967296 ? (e3 = import_buffer.Buffer.alloc(5), e3.writeUInt8(254, 0), e3.writeUInt32LE(t3, 1)) : (e3 = import_buffer.Buffer.alloc(9), e3.writeUInt8(255, 0), e3.writeInt32LE(-1 & t3, 1), e3.writeUInt32LE(Math.floor(t3 / 4294967296), 5)), e3;
          }
          static varIntBufBn(t3) {
            let e3;
            const r3 = t3.toNumber();
            if (r3 < 253)
              e3 = import_buffer.Buffer.alloc(1), e3.writeUInt8(r3, 0);
            else if (r3 < 65536)
              e3 = import_buffer.Buffer.alloc(3), e3.writeUInt8(253, 0), e3.writeUInt16LE(r3, 1);
            else if (r3 < 4294967296)
              e3 = import_buffer.Buffer.alloc(5), e3.writeUInt8(254, 0), e3.writeUInt32LE(r3, 1);
            else {
              const r4 = new y();
              r4.writeUInt8(255), r4.writeUInt64LEBn(t3), e3 = r4.toBuffer();
            }
            return e3;
          }
        }
        var w = r2(484), v = r2.n(w);
        class S {
          constructor(t3) {
            this.fromObject(t3);
          }
          fromObject(t3) {
            if (!t3)
              return this;
            for (const e3 of Object.keys(t3))
              void 0 !== t3[e3] && (this[e3] = t3[e3]);
            return this;
          }
          static fromObject(t3) {
            return new this().fromObject(t3);
          }
          fromBr(t3) {
            if (!(t3 instanceof g))
              throw new Error("br must be a buffer reader");
            throw new Error("not implemented");
          }
          static fromBr(t3) {
            return new this().fromBr(t3);
          }
          asyncFromBr(t3) {
            if (!(t3 instanceof g))
              throw new Error("br must be a buffer reader");
            throw new Error("not implemented");
          }
          static asyncFromBr(t3) {
            return new this().asyncFromBr(t3);
          }
          toBw(t3) {
            throw new Error("not implemented");
          }
          asyncToBw(t3) {
            throw new Error("not implemented");
          }
          *genFromBuffers() {
            throw new Error("not implemented");
          }
          *expect(t3, e3) {
            let r3 = e3;
            const i3 = new y();
            let s2 = 0;
            for (e3 && (i3.write(e3), s2 += e3.length); s2 < t3; ) {
              const e4 = t3 - s2;
              r3 = yield e4, r3 && (i3.write(r3), s2 += r3.length);
            }
            r3 = i3.toBuffer();
            const n2 = s2 - t3, a2 = r3.slice(r3.length - n2, r3.length);
            return r3 = r3.slice(0, r3.length - n2), { buf: r3, remainderbuf: a2 };
          }
          fromBuffer(t3, ...e3) {
            if (!import_buffer.Buffer.isBuffer(t3))
              throw new Error("buf must be a buffer");
            const r3 = new g(t3);
            return this.fromBr(r3, ...e3);
          }
          static fromBuffer(...t3) {
            return new this().fromBuffer(...t3);
          }
          asyncFromBuffer(t3, ...e3) {
            if (!import_buffer.Buffer.isBuffer(t3))
              throw new Error("buf must be a buffer");
            const r3 = new g(t3);
            return this.asyncFromBr(r3, ...e3);
          }
          static asyncFromBuffer(t3, ...e3) {
            return new this().asyncFromBuffer(t3, ...e3);
          }
          fromFastBuffer(t3, ...e3) {
            return 0 === t3.length ? this : this.fromBuffer(t3, ...e3);
          }
          static fromFastBuffer(...t3) {
            return new this().fromFastBuffer(...t3);
          }
          toBuffer(...t3) {
            return this.toBw(...t3).toBuffer();
          }
          asyncToBuffer(...t3) {
            return this.asyncToBw(...t3).then((t4) => t4.toBuffer());
          }
          toFastBuffer(...t3) {
            return 0 === Object.keys(this).length ? import_buffer.Buffer.alloc(0) : this.toBuffer(...t3);
          }
          fromHex(t3, ...e3) {
            if (!v()(t3))
              throw new Error("invalid hex string");
            const r3 = import_buffer.Buffer.from(t3, "hex");
            return this.fromBuffer(r3, ...e3);
          }
          static fromHex(t3, ...e3) {
            return new this().fromHex(t3, ...e3);
          }
          asyncFromHex(t3, ...e3) {
            if (!v()(t3))
              throw new Error("invalid hex string");
            const r3 = import_buffer.Buffer.from(t3, "hex");
            return this.asyncFromBuffer(r3, ...e3);
          }
          static asyncFromHex(t3, ...e3) {
            return new this().asyncFromHex(t3, ...e3);
          }
          fromFastHex(t3, ...e3) {
            if (!v()(t3))
              throw new Error("invalid hex string");
            const r3 = import_buffer.Buffer.from(t3, "hex");
            return this.fromFastBuffer(r3, ...e3);
          }
          static fromFastHex(t3, ...e3) {
            return new this().fromFastHex(t3, ...e3);
          }
          toHex(...t3) {
            return this.toBuffer(...t3).toString("hex");
          }
          asyncToHex(...t3) {
            return this.asyncToBuffer(...t3).then((t4) => t4.toString("hex"));
          }
          toFastHex(...t3) {
            return this.toFastBuffer(...t3).toString("hex");
          }
          fromString(t3, ...e3) {
            if ("string" != typeof t3)
              throw new Error("str must be a string");
            return this.fromHex(t3, ...e3);
          }
          static fromString(t3, ...e3) {
            return new this().fromString(t3, ...e3);
          }
          asyncFromString(t3, ...e3) {
            if ("string" != typeof t3)
              throw new Error("str must be a string");
            return this.asyncFromHex(t3, ...e3);
          }
          static asyncFromString(t3, ...e3) {
            return new this().asyncFromString(t3, ...e3);
          }
          toString(...t3) {
            return this.toHex(...t3);
          }
          asyncToString(...t3) {
            return this.asyncToHex(...t3);
          }
          fromJSON(t3) {
            throw new Error("not implemented");
          }
          static fromJSON(t3, ...e3) {
            return new this().fromJSON(t3, ...e3);
          }
          asyncFromJSON(t3, ...e3) {
            throw new Error("not implemented");
          }
          static asyncFromJSON(t3, ...e3) {
            return new this().asyncFromJSON(t3, ...e3);
          }
          toJSON() {
            var t3 = {};
            for (var e3 in this)
              if (Array.isArray(this[e3])) {
                const i3 = [];
                for (var r3 in this[e3])
                  "function" == typeof this[e3][r3].toJSON ? i3.push(this[e3][r3].toJSON()) : i3.push(JSON.stringify(this[e3][r3]));
                t3[e3] = i3;
              } else if (null === this[e3])
                t3[e3] = this[e3];
              else if ("object" == typeof this[e3] && "function" == typeof this[e3].toJSON)
                t3[e3] = this[e3].toJSON();
              else if ("boolean" == typeof this[e3] || "number" == typeof this[e3] || "string" == typeof this[e3])
                t3[e3] = this[e3];
              else if (import_buffer.Buffer.isBuffer(this[e3]))
                t3[e3] = this[e3].toString("hex");
              else if (this[e3] instanceof Map)
                t3[e3] = JSON.stringify(this[e3]);
              else if ("object" == typeof this[e3])
                throw new Error("not implemented");
            return t3;
          }
          asyncToJSON() {
            throw new Error("not implemented");
          }
          clone() {
            return this.cloneByJSON();
          }
          cloneByBuffer() {
            return new this.constructor().fromBuffer(this.toBuffer());
          }
          cloneByFastBuffer() {
            return new this.constructor().fromFastBuffer(this.toFastBuffer());
          }
          cloneByHex() {
            return new this.constructor().fromHex(this.toHex());
          }
          cloneByString() {
            return new this.constructor().fromString(this.toString());
          }
          cloneByJSON() {
            return new this.constructor().fromJSON(this.toJSON());
          }
        }
        class _ extends S {
          constructor(t3) {
            super({ buf: t3 });
          }
          fromHex(t3) {
            return this.fromBuffer(import_buffer.Buffer.from(t3, "hex"));
          }
          toHex() {
            return this.toBuffer().toString("hex");
          }
          static encode(t3) {
            if (!import_buffer.Buffer.isBuffer(t3))
              throw new Error("Input should be a buffer");
            return h().encode(t3);
          }
          static decode(t3) {
            if ("string" != typeof t3)
              throw new Error("Input should be a string");
            return import_buffer.Buffer.from(h().decode(t3));
          }
          fromBuffer(t3) {
            return this.buf = t3, this;
          }
          fromString(t3) {
            const e3 = _.decode(t3);
            return this.buf = e3, this;
          }
          toBuffer() {
            return this.buf;
          }
          toString() {
            return _.encode(this.buf);
          }
        }
        const B = (t3, e3) => {
          if (!import_buffer.Buffer.isBuffer(t3) || !import_buffer.Buffer.isBuffer(e3))
            throw new Error("buf1 and buf2 must be buffers");
          if (t3.length !== e3.length)
            return false;
          let r3 = 0;
          for (let i3 = 0; i3 < t3.length; i3++)
            r3 |= t3[i3] ^ e3[i3];
          return 0 === r3;
        };
        class I extends S {
          constructor(t3, e3, r3) {
            super({ resbuf: t3, isError: e3, id: r3 });
          }
          fromResult(t3, e3) {
            return t3.toFastBuffer ? this.resbuf = t3.toFastBuffer() : import_buffer.Buffer.isBuffer(t3) ? this.resbuf = t3 : this.resbuf = import_buffer.Buffer.from(JSON.stringify(t3)), this.isError = false, this.id = e3, this;
          }
          static fromResult(t3, e3) {
            return new this().fromResult(t3, e3);
          }
          fromError(t3, e3) {
            return this.resbuf = import_buffer.Buffer.from(JSON.stringify(t3.message)), this.isError = true, this.id = e3, this;
          }
          toBw(t3) {
            return t3 || (t3 = new y()), t3.writeVarIntNum(this.resbuf.length), t3.write(this.resbuf), t3.writeUInt8(Number(this.isError)), t3.writeVarIntNum(this.id), t3;
          }
          fromBr(t3) {
            const e3 = t3.readVarIntNum();
            return this.resbuf = t3.read(e3), this.isError = Boolean(t3.readUInt8()), this.id = t3.readVarIntNum(), this;
          }
        }
        let O;
        class E {
          constructor(t3 = [], e3 = 0, r3 = [], i3 = /* @__PURE__ */ new Map()) {
            this.nativeWorkers = t3, this.lastid = e3, this.incompconsteRes = r3, this.promisemap = i3;
          }
          asyncObjectMethod(t3, e3, r3, i3 = this.lastid + 1) {
            if (!r3)
              throw new Error("must specify args");
            const s2 = t3[e3](...r3);
            return new I().fromResult(s2, i3);
          }
          static asyncObjectMethod(t3, e3, r3, i3) {
            return O || (O = new E()), O.asyncObjectMethod(t3, e3, r3, i3);
          }
          asyncClassMethod(t3, e3, r3, i3 = this.lastid + 1) {
            if (!r3)
              throw new Error("must specify args");
            const s2 = t3[e3](...r3);
            return new I().fromResult(s2, i3);
          }
          static asyncClassMethod(t3, e3, r3, i3) {
            return O || (O = new E()), O.asyncClassMethod(t3, e3, r3, i3);
          }
          static endGlobalWorkers() {
            O && !import_process.default.browser && (O = void 0);
          }
        }
        class P {
        }
        P.sha1 = function(t3) {
          if (!import_buffer.Buffer.isBuffer(t3))
            throw new Error("sha1 hash must be of a buffer");
          const e3 = new (0, d().sha1)().update(t3).digest();
          return import_buffer.Buffer.from(e3);
        }, P.sha1.blockSize = 512, P.asyncSha1 = async function(t3) {
          const e3 = [t3];
          return (await E.asyncClassMethod(P, "sha1", e3)).resbuf;
        }, P.sha256 = function(t3) {
          if (!import_buffer.Buffer.isBuffer(t3))
            throw new Error("sha256 hash must be of a buffer");
          const e3 = new (0, d().sha256)().update(t3).digest();
          return import_buffer.Buffer.from(e3);
        }, P.sha256.blockSize = 512, P.asyncSha256 = async function(t3) {
          const e3 = [t3];
          return (await E.asyncClassMethod(P, "sha256", e3)).resbuf;
        }, P.sha256Sha256 = function(t3) {
          try {
            return P.sha256(P.sha256(t3));
          } catch (t4) {
            throw new Error("sha256Sha256 hash must be of a buffer: " + t4);
          }
        }, P.asyncSha256Sha256 = async function(t3) {
          const e3 = [t3];
          return (await E.asyncClassMethod(P, "sha256Sha256", e3)).resbuf;
        }, P.ripemd160 = function(t3) {
          if (!import_buffer.Buffer.isBuffer(t3))
            throw new Error("ripemd160 hash must be of a buffer");
          const e3 = new (0, d().ripemd160)().update(t3).digest();
          return import_buffer.Buffer.from(e3);
        }, P.asyncRipemd160 = async function(t3) {
          const e3 = [t3];
          return (await E.asyncClassMethod(P, "ripemd160", e3)).resbuf;
        }, P.sha256Ripemd160 = function(t3) {
          try {
            return P.ripemd160(P.sha256(t3));
          } catch (t4) {
            throw new Error("sha256Ripemd160 hash must be of a buffer: " + t4);
          }
        }, P.asyncSha256Ripemd160 = async function(t3) {
          const e3 = [t3];
          return (await E.asyncClassMethod(P, "sha256Ripemd160", e3)).resbuf;
        }, P.sha512 = function(t3) {
          if (!import_buffer.Buffer.isBuffer(t3))
            throw new Error("sha512 hash must be of a buffer");
          const e3 = new (0, d().sha512)().update(t3).digest();
          return import_buffer.Buffer.from(e3);
        }, P.asyncSha512 = async function(t3) {
          const e3 = [t3];
          return (await E.asyncClassMethod(P, "sha512", e3)).resbuf;
        }, P.sha512.blockSize = 1024, P.hmac = function(t3, e3, r3) {
          if ("sha1" !== t3 && "sha256" !== t3 && "sha512" !== t3)
            throw new Error("invalid choice of hash function");
          const i3 = P[t3];
          if (!import_buffer.Buffer.isBuffer(e3) || !import_buffer.Buffer.isBuffer(r3))
            throw new Error("data and key must be buffers");
          const s2 = i3.blockSize / 8;
          if (r3.length > s2 && (r3 = i3(r3)), r3.length < s2) {
            const t4 = import_buffer.Buffer.alloc(s2);
            t4.fill(0, r3.length), r3.copy(t4), r3 = t4;
          }
          const n2 = import_buffer.Buffer.alloc(s2), a2 = import_buffer.Buffer.alloc(s2);
          for (let t4 = 0; t4 < s2; t4++)
            n2[t4] = 92 ^ r3[t4], a2[t4] = 54 ^ r3[t4];
          return i3(import_buffer.Buffer.concat([n2, i3(import_buffer.Buffer.concat([a2, e3]))]));
        }, P.sha1Hmac = function(t3, e3) {
          return P.hmac("sha1", t3, e3);
        }, P.asyncSha1Hmac = async function(t3, e3) {
          const r3 = [t3, e3];
          return (await E.asyncClassMethod(P, "sha1Hmac", r3)).resbuf;
        }, P.sha1Hmac.bitsize = 160, P.sha256Hmac = function(t3, e3) {
          return P.hmac("sha256", t3, e3);
        }, P.asyncSha256Hmac = async function(t3, e3) {
          const r3 = [t3, e3];
          return (await E.asyncClassMethod(P, "sha256Hmac", r3)).resbuf;
        }, P.sha256Hmac.bitsize = 256, P.sha512Hmac = function(t3, e3) {
          return P.hmac("sha512", t3, e3);
        }, P.asyncSha512Hmac = async function(t3, e3) {
          const r3 = [t3, e3];
          return (await E.asyncClassMethod(P, "sha512Hmac", r3)).resbuf;
        }, P.sha512Hmac.bitsize = 512;
        class k extends S {
          constructor(t3) {
            super({ buf: t3 });
          }
          fromHex(t3) {
            return this.fromBuffer(import_buffer.Buffer.from(t3, "hex"));
          }
          toHex() {
            return this.toBuffer().toString("hex");
          }
          static decode(t3) {
            if ("string" != typeof t3)
              throw new Error("Input must be a string");
            const e3 = _.decode(t3);
            if (e3.length < 4)
              throw new Error("Input string too short");
            const r3 = e3.slice(0, -4), i3 = e3.slice(-4), s2 = P.sha256Sha256(r3).slice(0, 4);
            if (!B(i3, s2))
              throw new Error("Checksum mismatch");
            return r3;
          }
          static encode(t3) {
            if (!import_buffer.Buffer.isBuffer(t3))
              throw new Error("Input must be a buffer");
            const e3 = import_buffer.Buffer.alloc(t3.length + 4), r3 = P.sha256Sha256(t3);
            return t3.copy(e3), r3.copy(e3, t3.length), _.encode(e3);
          }
          fromBuffer(t3) {
            return this.buf = t3, this;
          }
          fromString(t3) {
            const e3 = k.decode(t3);
            return this.buf = e3, this;
          }
          toBuffer() {
            return this.buf;
          }
          toString() {
            return k.encode(this.buf);
          }
        }
        class N {
          constructor(t3) {
            this.keyDefined = (e3) => e3 in t3, this.getValue = (e3) => t3[e3];
          }
          get(t3) {
            if (this.keyDefined(t3))
              return this.getValue(t3);
            throw new Error(`Unknown configuration: ${t3}`);
          }
        }
        const A = new class {
          constructor() {
            this.variables = {};
          }
          build() {
            return new N(this.variables);
          }
          addValue(t3, e3) {
            if (void 0 === e3)
              throw new Error(`Failed to add "${t3}" property. The value cannot be undefined`);
            if (t3 in this.variables)
              throw new Error(`"${t3}" already has a value defined.`);
            return this.variables[t3] = e3, this;
          }
          addValueWithDefault(t3, e3, r3) {
            if (void 0 === r3)
              throw new Error(`Failed to add "${t3}" property. Default value cannot be undefined`);
            return this.addValue(t3, void 0 === e3 ? r3 : e3);
          }
        }().addValue("NETWORK", import_process.default.env.NETWORK || "mainnet").build(), x = { Mainnet: { MaxSize: 33554432, Port: 8333, Address: { pubKeyHash: 0, payToScriptHash: 5 }, Bip32: { pubKey: 76067358, privKey: 76066276 }, Block: { maxNBits: 486604799, magicNum: 3823236072 }, Msg: { magicNum: 3823236072, versionBytesNum: 70015 }, PrivKey: { versionByteNum: 128 }, TxBuilder: { dust: 546, feePerKbNum: 500 }, Workers: { timeout: 6e4 } } };
        if (x.Testnet = Object.assign({}, x.Mainnet, { Port: 18333, Address: { pubKeyHash: 111, payToScriptHash: 196 }, Bip32: { pubKey: 70617039, privKey: 70615956 }, Block: { maxNBits: 486604799, magicNum: 4108710900 }, Msg: { magicNum: 4108710900, versionBytesNum: 70015 }, PrivKey: { versionByteNum: 239 } }), x.Regtest = Object.assign({}, x.Mainnet, { Port: 18444, Address: { pubKeyHash: 111, payToScriptHash: 196 }, Bip32: { pubKey: 70617039, privKey: 70615956 }, Block: { maxNBits: 545259519, magicNum: 3669344250 }, Msg: { magicNum: 3669344250, versionBytesNum: 70015 }, PrivKey: { versionByteNum: 239 } }), x.STN = Object.assign({}, x.Mainnet, { Port: 9333, Address: { pubKeyHash: 111, payToScriptHash: 196 }, Bip32: { pubKey: 70617039, privKey: 70615956 }, Block: { maxNBits: 486604799, magicNum: 4224632057 }, Msg: { magicNum: 4224632057, versionBytesNum: 70015 }, PrivKey: { versionByteNum: 239 } }), "testnet" === A.get("NETWORK"))
          x.Default = Object.assign({}, x.Testnet);
        else if ("mainnet" === A.get("NETWORK"))
          x.Default = Object.assign({}, x.Mainnet);
        else if ("regtest" === A.get("NETWORK"))
          x.Default = Object.assign({}, x.Regtest);
        else {
          if ("stn" !== A.get("NETWORK"))
            throw new Error(`must set network in environment variable - mainnet, testnet, regtest or stn?, received ${A.get("NETWORK")}`);
          x.Default = Object.assign({}, x.STN);
        }
        const R = (t3) => x.Mainnet.Msg.magicNum === t3 ? x.Mainnet : x.Testnet.Msg.magicNum === t3 ? x.Testnet : x.Regtest.Msg.magicNum === t3 ? x.Regtest : x.STN.Msg.magicNum === t3 ? x.STN : x.Default, M = { OP_FALSE: 0, OP_0: 0, OP_PUSHDATA1: 76, OP_PUSHDATA2: 77, OP_PUSHDATA4: 78, OP_1NEGATE: 79, OP_RESERVED: 80, OP_TRUE: 81, OP_1: 81, OP_2: 82, OP_3: 83, OP_4: 84, OP_5: 85, OP_6: 86, OP_7: 87, OP_8: 88, OP_9: 89, OP_10: 90, OP_11: 91, OP_12: 92, OP_13: 93, OP_14: 94, OP_15: 95, OP_16: 96, OP_NOP: 97, OP_VER: 98, OP_IF: 99, OP_NOTIF: 100, OP_VERIF: 101, OP_VERNOTIF: 102, OP_ELSE: 103, OP_ENDIF: 104, OP_VERIFY: 105, OP_RETURN: 106, OP_TOALTSTACK: 107, OP_FROMALTSTACK: 108, OP_2DROP: 109, OP_2DUP: 110, OP_3DUP: 111, OP_2OVER: 112, OP_2ROT: 113, OP_2SWAP: 114, OP_IFDUP: 115, OP_DEPTH: 116, OP_DROP: 117, OP_DUP: 118, OP_NIP: 119, OP_OVER: 120, OP_PICK: 121, OP_ROLL: 122, OP_ROT: 123, OP_SWAP: 124, OP_TUCK: 125, OP_CAT: 126, OP_SUBSTR: 127, OP_SPLIT: 127, OP_LEFT: 128, OP_NUM2BIN: 128, OP_RIGHT: 129, OP_BIN2NUM: 129, OP_SIZE: 130, OP_INVERT: 131, OP_AND: 132, OP_OR: 133, OP_XOR: 134, OP_EQUAL: 135, OP_EQUALVERIFY: 136, OP_RESERVED1: 137, OP_RESERVED2: 138, OP_1ADD: 139, OP_1SUB: 140, OP_2MUL: 141, OP_2DIV: 142, OP_NEGATE: 143, OP_ABS: 144, OP_NOT: 145, OP_0NOTEQUAL: 146, OP_ADD: 147, OP_SUB: 148, OP_MUL: 149, OP_DIV: 150, OP_MOD: 151, OP_LSHIFT: 152, OP_RSHIFT: 153, OP_BOOLAND: 154, OP_BOOLOR: 155, OP_NUMEQUAL: 156, OP_NUMEQUALVERIFY: 157, OP_NUMNOTEQUAL: 158, OP_LESSTHAN: 159, OP_GREATERTHAN: 160, OP_LESSTHANOREQUAL: 161, OP_GREATERTHANOREQUAL: 162, OP_MIN: 163, OP_MAX: 164, OP_WITHIN: 165, OP_RIPEMD160: 166, OP_SHA1: 167, OP_SHA256: 168, OP_HASH160: 169, OP_HASH256: 170, OP_CODESEPARATOR: 171, OP_CHECKSIG: 172, OP_CHECKSIGVERIFY: 173, OP_CHECKMULTISIG: 174, OP_CHECKMULTISIGVERIFY: 175, OP_NOP1: 176, OP_NOP2: 177, OP_CHECKLOCKTIMEVERIFY: 177, OP_NOP3: 178, OP_CHECKSEQUENCEVERIFY: 178, OP_NOP4: 179, OP_NOP5: 180, OP_NOP6: 181, OP_NOP7: 182, OP_NOP8: 183, OP_NOP9: 184, OP_NOP10: 185, OP_SMALLDATA: 249, OP_SMALLINTEGER: 250, OP_PUBKEYS: 251, OP_PUBKEYHASH: 253, OP_PUBKEY: 254, OP_INVALIDOPCODE: 255 };
        class T extends S {
          constructor(t3) {
            super({ num: t3 });
          }
          fromNumber(t3) {
            return this.num = t3, this;
          }
          static fromNumber(t3) {
            return new this().fromNumber(t3);
          }
          toNumber() {
            return this.num;
          }
          fromString(t3) {
            const e3 = M[t3];
            if (void 0 === e3)
              throw new Error("Invalid opCodeStr");
            return this.num = e3, this;
          }
          static fromString(t3) {
            return new this().fromString(t3);
          }
          toString() {
            const t3 = T.str[this.num];
            if (void 0 === t3) {
              if (this.num > 0 && this.num < T.OP_PUSHDATA1)
                return this.num.toString();
              throw new Error("OpCode does not have a string representation");
            }
            return t3;
          }
        }
        T.str = {};
        for (const t3 in M)
          T[t3] = M[t3], Object.prototype.hasOwnProperty.call(M, t3) && (T.str[M[t3]] = t3);
        const C = c().curves.secp256k1, H = C.curve.point().constructor;
        class L extends H {
          constructor(t3, e3, r3) {
            super(C.curve, t3, e3, r3);
          }
          static fromX(t3, e3) {
            const r3 = C.curve.pointFromX(e3, t3);
            return Object.create(L.prototype).copyFrom(r3);
          }
          copyFrom(t3) {
            if (!(t3 instanceof H))
              throw new Error("point should be an external point");
            return Object.keys(t3).forEach(function(e3) {
              this[e3] = t3[e3];
            }.bind(this)), this;
          }
          add(t3) {
            return t3 = H.prototype.add.call(this, t3), Object.create(L.prototype).copyFrom(t3);
          }
          mul(t3) {
            if (!t3.lt(L.getN()))
              throw new Error("point mul out of range");
            const e3 = H.prototype.mul.call(this, t3);
            return Object.create(L.prototype).copyFrom(e3);
          }
          mulAdd(t3, e3, r3) {
            const i3 = H.prototype.mulAdd.call(this, t3, e3, r3);
            return (e3 = Object.create(L.prototype)).copyFrom(i3);
          }
          getX() {
            const t3 = H.prototype.getX.call(this), e3 = Object.create(p.prototype);
            return t3.copy(e3), e3;
          }
          getY() {
            const t3 = H.prototype.getY.call(this), e3 = Object.create(p.prototype);
            return t3.copy(e3), e3;
          }
          fromX(t3, e3) {
            const r3 = L.fromX(t3, e3);
            return this.copyFrom(r3);
          }
          toJSON() {
            return { x: this.getX().toString(), y: this.getY().toString() };
          }
          fromJSON(t3) {
            const e3 = new p().fromString(t3.x), r3 = new p().fromString(t3.y), i3 = new L(e3, r3);
            return this.copyFrom(i3);
          }
          toString() {
            return JSON.stringify(this.toJSON());
          }
          fromString(t3) {
            const e3 = JSON.parse(t3), r3 = new L().fromJSON(e3);
            return this.copyFrom(r3);
          }
          static getG() {
            const t3 = C.curve.g;
            return Object.create(L.prototype).copyFrom(t3);
          }
          static getN() {
            return new p(C.curve.n.toArray());
          }
          validate() {
            if (0 !== L.fromX(this.getY().isOdd(), this.getX()).getY().cmp(this.getY()))
              throw new Error("Invalid y value of public key");
            if (!(this.getX().gt(-1) && this.getX().lt(L.getN()) && this.getY().gt(-1) && this.getY().lt(L.getN())))
              throw new Error("Point does not lie on the curve");
            return this;
          }
        }
        class K extends S {
          constructor(t3, e3) {
            super({ point: t3, compressed: e3 });
          }
          fromJSON(t3) {
            return this.fromFastHex(t3), this;
          }
          toJSON() {
            return this.toFastHex();
          }
          fromPrivKey(t3) {
            return this.fromObject({ point: L.getG().mul(t3.bn), compressed: t3.compressed }), this;
          }
          static fromPrivKey(t3) {
            return new this().fromPrivKey(t3);
          }
          async asyncFromPrivKey(t3) {
            const e3 = await E.asyncObjectMethod(this, "fromPrivKey", [t3]);
            return this.fromFastBuffer(e3.resbuf);
          }
          static asyncFromPrivKey(t3) {
            return new this().asyncFromPrivKey(t3);
          }
          fromBuffer(t3, e3) {
            return this.fromDer(t3, e3);
          }
          async asyncFromBuffer(t3, e3) {
            const r3 = [t3, e3], i3 = await E.asyncObjectMethod(this, "fromBuffer", r3);
            return this.fromFastBuffer(i3.resbuf);
          }
          fromFastBuffer(t3) {
            if (0 === t3.length)
              return this;
            const e3 = Boolean(t3[0]);
            return t3 = t3.slice(1), this.fromDer(t3), this.compressed = e3, this;
          }
          fromDer(t3, e3) {
            if (e3 = void 0 === e3, 4 !== t3[0] && (e3 || 6 !== t3[0] && 7 !== t3[0]))
              if (3 === t3[0]) {
                const e4 = new p(t3.slice(1));
                this.fromX(true, e4), this.compressed = true;
              } else {
                if (2 !== t3[0])
                  throw new Error("Invalid DER format pubKey");
                {
                  const e4 = new p(t3.slice(1));
                  this.fromX(false, e4), this.compressed = true;
                }
              }
            else {
              const e4 = t3.slice(1, 33), r3 = t3.slice(33, 65);
              if (32 !== e4.length || 32 !== r3.length || 65 !== t3.length)
                throw new Error("LEngth of x and y must be 32 bytes");
              const i3 = new p(e4), s2 = new p(r3);
              this.point = new L(i3, s2), this.compressed = false;
            }
            return this;
          }
          static fromDer(t3, e3) {
            return new this().fromDer(t3, e3);
          }
          fromString(t3) {
            return this.fromDer(import_buffer.Buffer.from(t3, "hex")), this;
          }
          fromX(t3, e3) {
            if ("boolean" != typeof t3)
              throw new Error("Must specify whether y is odd or not (true or false)");
            return this.point = L.fromX(t3, e3), this;
          }
          static fromX(t3, e3) {
            return new this().fromX(t3, e3);
          }
          toBuffer() {
            const t3 = void 0 === this.compressed || this.compressed;
            return this.toDer(t3);
          }
          toFastBuffer() {
            if (!this.point)
              return import_buffer.Buffer.alloc(0);
            const t3 = new y(), e3 = void 0 === this.compressed || Boolean(this.compressed);
            return t3.writeUInt8(Number(e3)), t3.write(this.toDer(false)), t3.toBuffer();
          }
          toDer(t3) {
            if ("boolean" != typeof (t3 = void 0 === t3 ? this.compressed : t3))
              throw new Error("Must specify whether the public key is compressed or not (true or false)");
            const e3 = this.point.getX(), r3 = this.point.getY(), i3 = e3.toBuffer({ size: 32 }), s2 = r3.toBuffer({ size: 32 });
            let n2;
            return t3 ? (n2 = s2[s2.length - 1] % 2 ? import_buffer.Buffer.from([3]) : import_buffer.Buffer.from([2]), import_buffer.Buffer.concat([n2, i3])) : (n2 = import_buffer.Buffer.from([4]), import_buffer.Buffer.concat([n2, i3, s2]));
          }
          toString() {
            const t3 = void 0 === this.compressed || this.compressed;
            return this.toDer(t3).toString("hex");
          }
          static isCompressedOrUncompressed(t3) {
            if (t3.length < 33)
              return false;
            if (4 === t3[0]) {
              if (65 !== t3.length)
                return false;
            } else {
              if (2 !== t3[0] && 3 !== t3[0])
                return false;
              if (33 !== t3.length)
                return false;
            }
            return true;
          }
          validate() {
            if (this.point.isInfinity())
              throw new Error("point: Point cannot be equal to Infinity");
            if (this.point.eq(new L(new p(0), new p(0))))
              throw new Error("point: Point cannot be equal to 0, 0");
            return this.point.validate(), this;
          }
        }
        var F = r2(353), U = r2.n(F);
        class D {
        }
        D.getRandomBuffer = function(t3) {
          return U()(t3);
        };
        class V extends S {
          constructor(t3, e3, r3 = null) {
            super({ bn: t3, compressed: e3 }), r3 = r3 || x.Default.PrivKey, this.Constants = r3;
          }
          fromJSON(t3) {
            return this.fromHex(t3), this;
          }
          toJSON() {
            return this.toHex();
          }
          fromRandom() {
            let t3, e3, r3;
            do {
              t3 = D.getRandomBuffer(32), e3 = new p().fromBuffer(t3), r3 = e3.lt(L.getN());
            } while (!r3);
            return this.fromObject({ bn: e3, compressed: true }), this;
          }
          static fromRandom() {
            return new this().fromRandom();
          }
          toBuffer() {
            let t3 = this.compressed;
            void 0 === t3 && (t3 = true);
            const e3 = this.bn.toBuffer({ size: 32 });
            let r3;
            return r3 = t3 ? import_buffer.Buffer.concat([import_buffer.Buffer.from([this.Constants.versionByteNum]), e3, import_buffer.Buffer.from([1])]) : import_buffer.Buffer.concat([import_buffer.Buffer.from([this.Constants.versionByteNum]), e3]), r3;
          }
          fromBuffer(t3) {
            if (34 === t3.length && 1 === t3[33])
              this.compressed = true;
            else {
              if (33 !== t3.length)
                throw new Error("Length of privKey buffer must be 33 (uncompressed pubKey) or 34 (compressed pubKey)");
              this.compressed = false;
            }
            if (t3[0] !== this.Constants.versionByteNum)
              throw new Error("Invalid versionByteNum byte");
            return this.fromBn(new p().fromBuffer(t3.slice(1, 33)));
          }
          toBn() {
            return this.bn;
          }
          fromBn(t3) {
            return this.bn = t3, this;
          }
          static fromBn(t3) {
            return new this().fromBn(t3);
          }
          validate() {
            if (!this.bn.lt(L.getN()))
              throw new Error("Number must be less than N");
            if ("boolean" != typeof this.compressed)
              throw new Error("Must specify whether the corresponding public key is compressed or not (true or false)");
            return this;
          }
          toWif() {
            return k.encode(this.toBuffer());
          }
          fromWif(t3) {
            return this.fromBuffer(k.decode(t3));
          }
          static fromWif(t3) {
            return new this().fromWif(t3);
          }
          toString() {
            return this.toWif();
          }
          fromString(t3) {
            return this.fromWif(t3);
          }
        }
        V.Mainnet = class extends V {
          constructor(t3, e3) {
            super(t3, e3, x.Mainnet.PrivKey);
          }
        }, V.Testnet = class extends V {
          constructor(t3, e3) {
            super(t3, e3, x.Testnet.PrivKey);
          }
        };
        class j extends S {
          constructor(t3, e3, r3, i3, s2) {
            super({ r: t3, s: e3, nHashType: r3, recovery: i3, compressed: s2 });
          }
          fromBuffer(t3) {
            try {
              return this.fromDer(t3, true);
            } catch (t4) {
            }
            try {
              return this.fromCompact(t3);
            } catch (t4) {
            }
            return this.fromTxFormat(t3);
          }
          toBuffer() {
            return void 0 !== this.nHashType ? this.toTxFormat() : void 0 !== this.recovery ? this.toCompact() : this.toDer();
          }
          fromCompact(t3) {
            let e3 = true, r3 = t3.slice(0, 1)[0] - 27 - 4;
            if (r3 < 0 && (e3 = false, r3 += 4), 0 !== r3 && 1 !== r3 && 2 !== r3 && 3 !== r3)
              throw new Error("i must be 0, 1, 2, or 3");
            this.compressed = e3, this.recovery = r3;
            const i3 = t3.slice(1);
            return this.fromRS(i3), this;
          }
          static fromCompact(t3) {
            return new this().fromCompact(t3);
          }
          fromRS(t3) {
            const e3 = t3.slice(0, 32), r3 = t3.slice(32, 64);
            if (32 !== e3.length)
              throw new Error("r must be 32 bytes");
            if (32 !== r3.length || t3.length > 64)
              throw new Error("s must be 32 bytes");
            return this.r = new p().fromBuffer(e3), this.s = new p().fromBuffer(r3), this;
          }
          static fromRS(t3) {
            return new this().fromRS(t3);
          }
          fromDer(t3, e3) {
            const r3 = j.parseDer(t3, e3);
            return this.r = r3.r, this.s = r3.s, this;
          }
          static fromDer(t3, e3) {
            return new this().fromDer(t3, e3);
          }
          fromTxFormat(t3) {
            if (0 === t3.length)
              return this.r = new p(1), this.s = new p(1), this.nHashType = 1, this;
            const e3 = t3.readUInt8(t3.length - 1), r3 = t3.slice(0, t3.length - 1);
            return this.fromDer(r3, false), this.nHashType = e3, this;
          }
          static fromTxFormat(t3) {
            return new this().fromTxFormat(t3);
          }
          fromString(t3) {
            return this.fromHex(t3);
          }
          static parseDer(t3, e3) {
            if (void 0 === e3 && (e3 = true), !import_buffer.Buffer.isBuffer(t3))
              throw new Error("DER formatted signature should be a buffer");
            const r3 = t3[0];
            if (48 !== r3)
              throw new Error("Header byte should be 0x30");
            let i3 = t3[1];
            const s2 = t3.slice(2).length;
            if (e3 && i3 !== s2)
              throw new Error("LEngth byte should length of what follows");
            i3 = i3 < s2 ? i3 : s2;
            const n2 = t3[2];
            if (2 !== n2)
              throw new Error("Integer byte for r should be 0x02");
            const a2 = t3[3], o2 = t3.slice(4, 4 + a2), h2 = new p().fromBuffer(o2), f3 = 0 === t3[4];
            if (a2 !== o2.length)
              throw new Error("LEngth of r incorrect");
            const c2 = t3[4 + a2 + 0];
            if (2 !== c2)
              throw new Error("Integer byte for s should be 0x02");
            const u2 = t3[4 + a2 + 1], d2 = t3.slice(4 + a2 + 2, 4 + a2 + 2 + u2), l2 = new p().fromBuffer(d2), b2 = 0 === t3[4 + a2 + 2 + 2];
            if (u2 !== d2.length)
              throw new Error("LEngth of s incorrect");
            if (i3 !== 4 + a2 + 2 + u2 - 2)
              throw new Error("LEngth of signature incorrect");
            return { header: r3, length: i3, rheader: n2, rlength: a2, rneg: f3, rbuf: o2, r: h2, sheader: c2, slength: u2, sneg: b2, sbuf: d2, s: l2 };
          }
          static IsTxDer(t3) {
            if (t3.length < 9)
              return false;
            if (t3.length > 73)
              return false;
            if (48 !== t3[0])
              return false;
            if (t3[1] !== t3.length - 3)
              return false;
            const e3 = t3[3];
            if (5 + e3 >= t3.length)
              return false;
            const r3 = t3[5 + e3];
            if (e3 + r3 + 7 !== t3.length)
              return false;
            const i3 = t3.slice(4);
            if (2 !== t3[2])
              return false;
            if (0 === e3)
              return false;
            if (128 & i3[0])
              return false;
            if (e3 > 1 && 0 === i3[0] && !(128 & i3[1]))
              return false;
            const s2 = t3.slice(6 + e3);
            return !(2 !== t3[6 + e3 - 2] || 0 === r3 || 128 & s2[0] || r3 > 1 && 0 === s2[0] && !(128 & s2[1]));
          }
          hasLowS() {
            return !this.s.lt(1) && !this.s.gt(p.fromBuffer(import_buffer.Buffer.from("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0", "hex")));
          }
          hasDefinedHashType() {
            return !(this.nHashType < j.SIGHASH_ALL || this.nHashType > j.SIGHASH_SINGLE);
          }
          toCompact(t3, e3) {
            if (t3 = "number" == typeof t3 ? t3 : this.recovery, e3 = "boolean" == typeof e3 ? e3 : this.compressed, 0 !== t3 && 1 !== t3 && 2 !== t3 && 3 !== t3)
              throw new Error("recovery must be equal to 0, 1, 2, or 3");
            let r3 = t3 + 27 + 4;
            false === e3 && (r3 -= 4);
            const i3 = import_buffer.Buffer.from([r3]), s2 = this.r.toBuffer({ size: 32 }), n2 = this.s.toBuffer({ size: 32 });
            return import_buffer.Buffer.concat([i3, s2, n2]);
          }
          toRS() {
            return import_buffer.Buffer.concat([this.r.toBuffer({ size: 32 }), this.s.toBuffer({ size: 32 })]);
          }
          toDer() {
            const t3 = this.r.toBuffer(), e3 = this.s.toBuffer(), r3 = 128 & t3[0], i3 = 128 & e3[0], s2 = r3 ? import_buffer.Buffer.concat([import_buffer.Buffer.from([0]), t3]) : t3, n2 = i3 ? import_buffer.Buffer.concat([import_buffer.Buffer.from([0]), e3]) : e3, a2 = 2 + s2.length + 2 + n2.length, o2 = s2.length, h2 = n2.length;
            return import_buffer.Buffer.concat([import_buffer.Buffer.from([48, a2, 2, o2]), s2, import_buffer.Buffer.from([2, h2]), n2]);
          }
          toTxFormat() {
            const t3 = this.toDer(), e3 = import_buffer.Buffer.alloc(1);
            return e3.writeUInt8(this.nHashType, 0), import_buffer.Buffer.concat([t3, e3]);
          }
          toString() {
            return this.toHex();
          }
        }
        j.SIGHASH_ALL = 1, j.SIGHASH_NONE = 2, j.SIGHASH_SINGLE = 3, j.SIGHASH_FORKID = 64, j.SIGHASH_ANYONECANPAY = 128;
        class q extends S {
          constructor(t3 = []) {
            super({ chunks: t3 });
          }
          fromJSON(t3) {
            return this.fromString(t3);
          }
          toJSON() {
            return this.toString();
          }
          fromBuffer(t3) {
            this.chunks = [];
            const e3 = new g(t3);
            for (; !e3.eof(); ) {
              const t4 = e3.readUInt8();
              let r3 = 0, i3 = import_buffer.Buffer.from([]);
              if (t4 > 0 && t4 < T.OP_PUSHDATA1)
                r3 = t4, this.chunks.push({ buf: e3.read(r3), len: r3, opCodeNum: t4 });
              else if (t4 === T.OP_PUSHDATA1) {
                try {
                  r3 = e3.readUInt8(), i3 = e3.read(r3);
                } catch (t5) {
                  e3.read();
                }
                this.chunks.push({ buf: i3, len: r3, opCodeNum: t4 });
              } else if (t4 === T.OP_PUSHDATA2) {
                try {
                  r3 = e3.readUInt16LE(), i3 = e3.read(r3);
                } catch (t5) {
                  e3.read();
                }
                this.chunks.push({ buf: i3, len: r3, opCodeNum: t4 });
              } else if (t4 === T.OP_PUSHDATA4) {
                try {
                  r3 = e3.readUInt32LE(), i3 = e3.read(r3);
                } catch (t5) {
                  e3.read();
                }
                this.chunks.push({ buf: i3, len: r3, opCodeNum: t4 });
              } else
                this.chunks.push({ opCodeNum: t4 });
            }
            return this;
          }
          toBuffer() {
            const t3 = new y();
            for (let e3 = 0; e3 < this.chunks.length; e3++) {
              const r3 = this.chunks[e3], i3 = r3.opCodeNum;
              t3.writeUInt8(i3), r3.buf && (i3 < T.OP_PUSHDATA1 ? t3.write(r3.buf) : i3 === T.OP_PUSHDATA1 ? (t3.writeUInt8(r3.len), t3.write(r3.buf)) : i3 === T.OP_PUSHDATA2 ? (t3.writeUInt16LE(r3.len), t3.write(r3.buf)) : i3 === T.OP_PUSHDATA4 && (t3.writeUInt32LE(r3.len), t3.write(r3.buf)));
            }
            return t3.toBuffer();
          }
          fromString(t3) {
            if (this.chunks = [], "" === t3 || void 0 === t3)
              return this;
            const e3 = t3.split(" ");
            let r3 = 0;
            for (; r3 < e3.length; ) {
              const t4 = e3[r3];
              let i3;
              try {
                i3 = new T().fromString(t4).toNumber();
              } catch (t5) {
              }
              if (void 0 === i3)
                if (i3 = parseInt(t4, 10), i3 > 0 && i3 < T.OP_PUSHDATA1)
                  this.chunks.push({ buf: import_buffer.Buffer.from(e3[r3 + 1].slice(2), "hex"), len: i3, opCodeNum: i3 }), r3 += 2;
                else {
                  if (0 !== i3)
                    throw new Error("Invalid script");
                  this.chunks.push({ opCodeNum: 0 }), r3 += 1;
                }
              else if (i3 === T.OP_PUSHDATA1 || i3 === T.OP_PUSHDATA2 || i3 === T.OP_PUSHDATA4) {
                if ("0x" !== e3[r3 + 2].slice(0, 2))
                  throw new Error("Pushdata data must start with 0x");
                this.chunks.push({ buf: import_buffer.Buffer.from(e3[r3 + 2].slice(2), "hex"), len: parseInt(e3[r3 + 1], 10), opCodeNum: i3 }), r3 += 3;
              } else
                this.chunks.push({ opCodeNum: i3 }), r3 += 1;
            }
            return this;
          }
          toString() {
            let t3 = "";
            for (let e3 = 0; e3 < this.chunks.length; e3++) {
              const r3 = this.chunks[e3], i3 = r3.opCodeNum;
              r3.buf ? (i3 !== T.OP_PUSHDATA1 && i3 !== T.OP_PUSHDATA2 && i3 !== T.OP_PUSHDATA4 || (t3 = t3 + " " + new T(i3).toString()), t3 = t3 + " " + r3.len, t3 = t3 + " 0x" + r3.buf.toString("hex")) : t3 = void 0 !== T.str[i3] ? t3 + " " + new T(i3).toString() : t3 + " 0x" + i3.toString(16);
            }
            return t3.substr(1);
          }
          fromBitcoindString(t3) {
            const e3 = new y(), r3 = t3.split(" ");
            let i3;
            for (i3 = 0; i3 < r3.length; i3++) {
              const t4 = r3[i3];
              if ("" !== t4)
                if ("0" === t4[0] && "x" === t4[1]) {
                  const r4 = t4.slice(2);
                  e3.write(import_buffer.Buffer.from(r4, "hex"));
                } else if ("'" === t4[0]) {
                  const r4 = t4.slice(1, t4.length - 1), i4 = import_buffer.Buffer.from(r4), s3 = new q().writeBuffer(i4).toBuffer();
                  e3.write(s3);
                } else if (void 0 !== T["OP_" + t4]) {
                  const r4 = T["OP_" + t4];
                  e3.writeUInt8(r4);
                } else if ("number" == typeof T[t4]) {
                  const r4 = T[t4];
                  e3.writeUInt8(r4);
                } else {
                  if (isNaN(parseInt(t4, 10)))
                    throw new Error("Could not determine type of script value");
                  {
                    const r4 = new p(t4), i4 = new q().writeBn(r4).toBuffer();
                    e3.write(i4);
                  }
                }
            }
            const s2 = e3.toBuffer();
            return this.fromBuffer(s2);
          }
          static fromBitcoindString(t3) {
            return new this().fromBitcoindString(t3);
          }
          toBitcoindString() {
            let t3 = "";
            for (let e3 = 0; e3 < this.chunks.length; e3++) {
              const r3 = this.chunks[e3];
              t3 = r3.buf ? t3 + " 0x" + new q([r3]).toBuffer().toString("hex") : void 0 !== T.str[r3.opCodeNum] ? t3 + " " + new T(r3.opCodeNum).toString().slice(3) : t3 + " 0x" + r3.opCodeNum.toString(16);
            }
            return t3.substr(1);
          }
          fromAsmString(t3) {
            this.chunks = [];
            const e3 = t3.split(" ");
            let r3 = 0;
            for (; r3 < e3.length; ) {
              const t4 = e3[r3];
              let i3, s2;
              try {
                i3 = T.fromString(t4), s2 = i3.toNumber();
              } catch (t5) {
                i3 = void 0, s2 = void 0;
              }
              if ("0" === t4)
                s2 = 0, this.chunks.push({ opCodeNum: s2 }), r3 += 1;
              else if ("-1" === t4)
                s2 = T.OP_1NEGATE, this.chunks.push({ opCodeNum: s2 }), r3 += 1;
              else if (void 0 === i3) {
                const t5 = e3[r3], i4 = import_buffer.Buffer.from(t5, "hex");
                if (i4.toString("hex") !== t5)
                  throw new Error("invalid hex string in script");
                const n2 = i4.length;
                n2 >= 0 && n2 < T.OP_PUSHDATA1 ? s2 = n2 : n2 < Math.pow(2, 8) ? s2 = T.OP_PUSHDATA1 : n2 < Math.pow(2, 16) ? s2 = T.OP_PUSHDATA2 : n2 < Math.pow(2, 32) && (s2 = T.OP_PUSHDATA4), this.chunks.push({ buf: i4, len: i4.length, opCodeNum: s2 }), r3 += 1;
              } else
                this.chunks.push({ opCodeNum: s2 }), r3 += 1;
            }
            return this;
          }
          static fromAsmString(t3) {
            return new this().fromAsmString(t3);
          }
          toAsmString() {
            for (var t3 = "", e3 = 0; e3 < this.chunks.length; e3++) {
              var r3 = this.chunks[e3];
              t3 += this._chunkToString(r3);
            }
            return t3.substr(1);
          }
          _chunkToString(t3, e3) {
            var r3 = t3.opCodeNum, i3 = "";
            if (t3.buf)
              t3.len > 0 && (i3 = i3 + " " + t3.buf.toString("hex"));
            else if (void 0 !== T.str[r3])
              0 === r3 ? i3 += " 0" : 79 === r3 ? i3 += " -1" : i3 = i3 + " " + new T(r3).toString();
            else {
              var s2 = r3.toString(16);
              s2.length % 2 != 0 && (s2 = "0" + s2), i3 = i3 + " " + s2;
            }
            return i3;
          }
          fromOpReturnData(t3) {
            return this.writeOpCode(T.OP_RETURN), this.writeBuffer(t3), this;
          }
          static fromOpReturnData(t3) {
            return new this().fromOpReturnData(t3);
          }
          fromSafeData(t3) {
            return this.writeOpCode(T.OP_FALSE), this.writeOpCode(T.OP_RETURN), this.writeBuffer(t3), this;
          }
          static fromSafeData(t3) {
            return new this().fromSafeData(t3);
          }
          fromSafeDataArray(t3) {
            this.writeOpCode(T.OP_FALSE), this.writeOpCode(T.OP_RETURN);
            for (const e3 in t3) {
              const r3 = t3[e3];
              this.writeBuffer(r3);
            }
            return this;
          }
          static fromSafeDataArray(t3) {
            return new this().fromSafeDataArray(t3);
          }
          getData() {
            if (this.isSafeDataOut())
              return this.chunks.slice(2).map((t3) => t3.buf);
            if (this.isOpReturn())
              return this.chunks.slice(1).map((t3) => t3.buf);
            throw new Error("Unrecognized script type to get data from");
          }
          fromPubKeyHash(t3) {
            if (20 !== t3.length)
              throw new Error("hashBuf must be a 20 byte buffer");
            return this.writeOpCode(T.OP_DUP), this.writeOpCode(T.OP_HASH160), this.writeBuffer(t3), this.writeOpCode(T.OP_EQUALVERIFY), this.writeOpCode(T.OP_CHECKSIG), this;
          }
          static fromPubKeyHash(t3) {
            return new this().fromPubKeyHash(t3);
          }
          static sortPubKeys(t3) {
            return t3.slice().sort((t4, e3) => {
              const r3 = t4.toBuffer(), i3 = e3.toBuffer(), s2 = Math.max(r3.length, i3.length);
              for (let t5 = 0; t5 <= s2; t5++) {
                if (void 0 === r3[t5])
                  return -1;
                if (void 0 === i3[t5])
                  return 1;
                if (r3[t5] < i3[t5])
                  return -1;
                if (r3[t5] > i3[t5])
                  return 1;
              }
            });
          }
          fromPubKeys(t3, e3, r3 = true) {
            if ("number" != typeof t3)
              throw new Error("m must be a number");
            true === r3 && (e3 = q.sortPubKeys(e3)), this.writeOpCode(t3 + T.OP_1 - 1);
            for (const t4 in e3)
              this.writeBuffer(e3[t4].toBuffer());
            return this.writeOpCode(e3.length + T.OP_1 - 1), this.writeOpCode(T.OP_CHECKMULTISIG), this;
          }
          static fromPubKeys(t3, e3, r3) {
            return new this().fromPubKeys(t3, e3, r3);
          }
          removeCodeseparators() {
            const t3 = [];
            for (let e3 = 0; e3 < this.chunks.length; e3++)
              this.chunks[e3].opCodeNum !== T.OP_CODESEPARATOR && t3.push(this.chunks[e3]);
            return this.chunks = t3, this;
          }
          isPushOnly() {
            for (let t3 = 0; t3 < this.chunks.length; t3++)
              if (this.chunks[t3].opCodeNum > T.OP_16)
                return false;
            return true;
          }
          isNonSpendable() {
            const t3 = this.chunks[0].opCodeNum === T.OP_FALSE, e3 = this.chunks[1] && this.chunks[1].opCodeNum === T.OP_RETURN;
            return !!t3 && !!e3;
          }
          isOpReturn() {
            return this.chunks[0].opCodeNum === T.OP_RETURN && this.chunks.filter((t3) => import_buffer.Buffer.isBuffer(t3.buf)).length === this.chunks.slice(1).length;
          }
          isSafeDataOut() {
            if (this.chunks.length < 2)
              return false;
            if (this.chunks[0].opCodeNum !== T.OP_FALSE)
              return false;
            var t3 = this.chunks.slice(1);
            return new q(t3).isOpReturn();
          }
          isPubKeyHashOut() {
            return !!(this.chunks[0] && this.chunks[0].opCodeNum === T.OP_DUP && this.chunks[1] && this.chunks[1].opCodeNum === T.OP_HASH160 && this.chunks[2].buf && this.chunks[3] && this.chunks[3].opCodeNum === T.OP_EQUALVERIFY && this.chunks[4] && this.chunks[4].opCodeNum === T.OP_CHECKSIG);
          }
          isPubKeyHashIn() {
            return !(2 !== this.chunks.length || !this.chunks[0].buf && this.chunks[0].opCodeNum !== T.OP_0 || !this.chunks[1].buf && this.chunks[0].opCodeNum !== T.OP_0);
          }
          isScriptHashOut() {
            const t3 = this.toBuffer();
            return 23 === t3.length && t3[0] === T.OP_HASH160 && 20 === t3[1] && t3[22] === T.OP_EQUAL;
          }
          isScriptHashIn() {
            if (!this.isPushOnly())
              return false;
            try {
              new q().fromBuffer(this.chunks[this.chunks.length - 1].buf);
            } catch (t3) {
              return false;
            }
            return true;
          }
          isMultiSigOut() {
            const t3 = this.chunks[0].opCodeNum - T.OP_1 + 1;
            if (!(t3 >= 1 && t3 <= 16))
              return false;
            if (!this.chunks.slice(1, this.chunks.length - 2).every((t4) => {
              try {
                const e4 = t4.buf;
                return new K().fromDer(e4).validate(), true;
              } catch (t5) {
                return false;
              }
            }))
              return false;
            const e3 = this.chunks[this.chunks.length - 2].opCodeNum - T.OP_1 + 1;
            return e3 >= t3 && e3 <= 16 && this.chunks[1 + e3 + 1].opCodeNum === T.OP_CHECKMULTISIG;
          }
          isMultiSigIn() {
            if (this.chunks[0].opCodeNum !== T.OP_0)
              return false;
            const t3 = this.chunks.slice(1);
            return !(t3.length < 1) && t3.every((t4) => import_buffer.Buffer.isBuffer(t4.buf) && j.IsTxDer(t4.buf));
          }
          findAndDelete(t3) {
            const e3 = t3.toBuffer();
            for (let t4 = 0; t4 < this.chunks.length; t4++) {
              const r3 = new q([this.chunks[t4]]).toBuffer();
              B(e3, r3) && this.chunks.splice(t4, 1);
            }
            return this;
          }
          writeScript(t3) {
            return this.chunks = this.chunks.concat(t3.chunks), this;
          }
          static writeScript(t3) {
            return new this().writeScript(t3);
          }
          writeString(t3) {
            const e3 = new q().fromString(t3);
            return this.chunks = this.chunks.concat(e3.chunks), this;
          }
          static writeString(t3) {
            return new this().writeString(t3);
          }
          writeOpCode(t3) {
            return this.chunks.push({ opCodeNum: t3 }), this;
          }
          static writeOpCode(t3) {
            return new this().writeOpCode(t3);
          }
          setChunkOpCode(t3, e3) {
            return this.chunks[t3] = { opCodeNum: e3 }, this;
          }
          writeBn(t3) {
            if (t3.cmp(0) === T.OP_0)
              this.chunks.push({ opCodeNum: T.OP_0 });
            else if (0 === t3.cmp(-1))
              this.chunks.push({ opCodeNum: T.OP_1NEGATE });
            else if (t3.cmp(1) >= 0 && t3.cmp(16) <= 0)
              this.chunks.push({ opCodeNum: t3.toNumber() + T.OP_1 - 1 });
            else {
              const e3 = t3.toSm({ endian: "little" });
              this.writeBuffer(e3);
            }
            return this;
          }
          static writeBn(t3) {
            return new this().writeBn(t3);
          }
          writeNumber(t3) {
            return this.writeBn(new p().fromNumber(t3)), this;
          }
          static writeNumber(t3) {
            return new this().writeNumber(t3);
          }
          setChunkBn(t3, e3) {
            return this.chunks[t3] = new q().writeBn(e3).chunks[0], this;
          }
          writeBuffer(t3) {
            let e3;
            const r3 = t3.length;
            if (t3.length > 0 && t3.length < T.OP_PUSHDATA1)
              e3 = t3.length;
            else if (0 === t3.length)
              e3 = T.OP_0;
            else if (t3.length < Math.pow(2, 8))
              e3 = T.OP_PUSHDATA1;
            else if (t3.length < Math.pow(2, 16))
              e3 = T.OP_PUSHDATA2;
            else {
              if (!(t3.length < Math.pow(2, 32)))
                throw new Error("You can't push that much data");
              e3 = T.OP_PUSHDATA4;
            }
            return this.chunks.push({ buf: t3, len: r3, opCodeNum: e3 }), this;
          }
          static writeBuffer(t3) {
            return new this().writeBuffer(t3);
          }
          setChunkBuffer(t3, e3) {
            return this.chunks[t3] = new q().writeBuffer(e3).chunks[0], this;
          }
          checkMinimalPush(t3) {
            const e3 = this.chunks[t3], r3 = e3.buf, i3 = e3.opCodeNum;
            return !(r3 && (0 === r3.length ? i3 !== T.OP_0 : 1 === r3.length && r3[0] >= 1 && r3[0] <= 16 ? i3 !== T.OP_1 + (r3[0] - 1) : 1 === r3.length && 129 === r3[0] ? i3 !== T.OP_1NEGATE : r3.length <= 75 ? i3 !== r3.length : r3.length <= 255 ? i3 !== T.OP_PUSHDATA1 : r3.length <= 65535 && i3 !== T.OP_PUSHDATA2));
          }
        }
        class z extends S {
          constructor(t3, e3, r3 = null) {
            super({ versionByteNum: t3, hashBuf: e3 }), r3 = r3 || x.Default.Address, this.Constants = r3;
          }
          fromBuffer(t3) {
            if (21 !== t3.length)
              throw new Error("address buffers must be exactly 21 bytes");
            if (t3[0] !== this.Constants.pubKeyHash)
              throw new Error("address: invalid versionByteNum byte");
            return this.versionByteNum = t3[0], this.hashBuf = t3.slice(1), this;
          }
          fromPubKeyHashBuf(t3) {
            return this.hashBuf = t3, this.versionByteNum = this.Constants.pubKeyHash, this;
          }
          static fromPubKeyHashBuf(t3) {
            return new this().fromPubKeyHashBuf(t3);
          }
          fromPubKey(t3) {
            const e3 = P.sha256Ripemd160(t3.toBuffer());
            return this.fromPubKeyHashBuf(e3);
          }
          static fromPubKey(t3) {
            return new this().fromPubKey(t3);
          }
          async asyncFromPubKey(t3) {
            const e3 = [t3], r3 = await E.asyncObjectMethod(this, "fromPubKey", e3);
            return this.fromFastBuffer(r3.resbuf);
          }
          static asyncFromPubKey(t3) {
            return new this().asyncFromPubKey(t3);
          }
          fromPrivKey(t3) {
            const e3 = new K().fromPrivKey(t3), r3 = P.sha256Ripemd160(e3.toBuffer());
            return this.fromPubKeyHashBuf(r3);
          }
          static fromPrivKey(t3) {
            return new this().fromPrivKey(t3);
          }
          async asyncFromPrivKey(t3) {
            const e3 = [t3], r3 = await E.asyncObjectMethod(this, "fromPrivKey", e3);
            return this.fromFastBuffer(r3.resbuf);
          }
          static asyncFromPrivKey(t3) {
            return new this().fromPrivKey(t3);
          }
          fromRandom() {
            const t3 = new V().fromRandom();
            return this.fromPrivKey(t3);
          }
          static fromRandom() {
            return new this().fromRandom();
          }
          async asyncFromRandom() {
            const t3 = await E.asyncObjectMethod(this, "fromRandom", []);
            return this.fromFastBuffer(t3.resbuf);
          }
          static asyncFromRandom() {
            return new this().fromRandom();
          }
          fromString(t3) {
            const e3 = k.decode(t3);
            return this.fromBuffer(e3);
          }
          async asyncFromString(t3) {
            const e3 = [t3], r3 = await E.asyncObjectMethod(this, "fromString", e3);
            return this.fromFastBuffer(r3.resbuf);
          }
          static asyncFromString(t3) {
            return new this().asyncFromString(t3);
          }
          static isValid(t3) {
            let e3;
            try {
              e3 = new z().fromString(t3);
            } catch (t4) {
              return false;
            }
            return e3.isValid();
          }
          isValid() {
            try {
              return this.validate(), true;
            } catch (t3) {
              return false;
            }
          }
          toTxOutScript() {
            const t3 = new q();
            return t3.writeOpCode(T.OP_DUP), t3.writeOpCode(T.OP_HASH160), t3.writeBuffer(this.hashBuf), t3.writeOpCode(T.OP_EQUALVERIFY), t3.writeOpCode(T.OP_CHECKSIG), t3;
          }
          fromTxInScript(t3) {
            const e3 = P.sha256Ripemd160(t3.chunks[1].buf || import_buffer.Buffer.from("00".repeat(32), "hex"));
            return this.fromPubKeyHashBuf(e3);
          }
          static fromTxInScript(t3) {
            return new this().fromTxInScript(t3);
          }
          fromTxOutScript(t3) {
            return this.fromPubKeyHashBuf(t3.chunks[2].buf);
          }
          static fromTxOutScript(t3) {
            return new this().fromTxOutScript(t3);
          }
          toBuffer() {
            const t3 = import_buffer.Buffer.from([this.versionByteNum]);
            return import_buffer.Buffer.concat([t3, this.hashBuf]);
          }
          toJSON() {
            const t3 = {};
            return this.hashBuf && (t3.hashBuf = this.hashBuf.toString("hex")), void 0 !== this.versionByteNum && (t3.versionByteNum = this.versionByteNum), t3;
          }
          fromJSON(t3) {
            return t3.hashBuf && (this.hashBuf = import_buffer.Buffer.from(t3.hashBuf, "hex")), void 0 !== t3.versionByteNum && (this.versionByteNum = t3.versionByteNum), this;
          }
          toString() {
            return k.encode(this.toBuffer());
          }
          async asyncToString() {
            const t3 = await E.asyncObjectMethod(this, "toString", []);
            return JSON.parse(t3.resbuf.toString());
          }
          validate() {
            if (!import_buffer.Buffer.isBuffer(this.hashBuf) || 20 !== this.hashBuf.length)
              throw new Error("hashBuf must be a buffer of 20 bytes");
            if (this.versionByteNum !== this.Constants.pubKeyHash)
              throw new Error("invalid versionByteNum");
            return this;
          }
        }
        z.Mainnet = class extends z {
          constructor(t3, e3) {
            super(t3, e3, x.Mainnet.Address);
          }
        }, z.Testnet = class extends z {
          constructor(t3, e3) {
            super(t3, e3, x.Testnet.Address);
          }
        };
        class G extends S {
          constructor(t3, e3, r3, i3, s2, n2, a2, o2 = null, h2 = V) {
            super({ versionBytesNum: t3, depth: e3, parentFingerPrint: r3, childIndex: i3, chainCode: s2, privKey: n2, pubKey: a2 }), o2 = o2 || x.Default.Bip32, this.Constants = o2, this.PrivKey = h2;
          }
          fromRandom() {
            return this.versionBytesNum = this.Constants.privKey, this.depth = 0, this.parentFingerPrint = import_buffer.Buffer.from([0, 0, 0, 0]), this.childIndex = 0, this.chainCode = D.getRandomBuffer(32), this.privKey = new this.PrivKey().fromRandom(), this.pubKey = new K().fromPrivKey(this.privKey), this;
          }
          static fromRandom() {
            return new this().fromRandom();
          }
          fromString(t3) {
            return this.fromBuffer(k.decode(t3));
          }
          async asyncFromString(t3) {
            const e3 = [t3], r3 = await E.asyncObjectMethod(this, "fromString", e3);
            return this.fromFastBuffer(r3.resbuf);
          }
          fromSeed(t3) {
            if (!import_buffer.Buffer.isBuffer(t3))
              throw new Error("bytes must be a buffer");
            if (t3.length < 16)
              throw new Error("Need more than 128 bits of entropy");
            if (t3.length > 64)
              throw new Error("More than 512 bits of entropy is nonstandard");
            const e3 = P.sha512Hmac(t3, import_buffer.Buffer.from("Bitcoin seed"));
            return this.depth = 0, this.parentFingerPrint = import_buffer.Buffer.from([0, 0, 0, 0]), this.childIndex = 0, this.chainCode = e3.slice(32, 64), this.versionBytesNum = this.Constants.privKey, this.privKey = new this.PrivKey().fromBn(p().fromBuffer(e3.slice(0, 32))), this.pubKey = new K().fromPrivKey(this.privKey), this;
          }
          static fromSeed(t3) {
            return new this().fromSeed(t3);
          }
          async asyncFromSeed(t3) {
            const e3 = await E.asyncObjectMethod(this, "fromSeed", [t3]);
            return this.fromFastBuffer(e3.resbuf);
          }
          static asyncFromSeed(t3) {
            return new this().asyncFromSeed(t3);
          }
          fromBuffer(t3) {
            if (78 !== t3.length)
              throw new Error("incorrect bip32 data length");
            this.versionBytesNum = t3.slice(0, 4).readUInt32BE(0), this.depth = t3.slice(4, 5).readUInt8(0), this.parentFingerPrint = t3.slice(5, 9), this.childIndex = t3.slice(9, 13).readUInt32BE(0), this.chainCode = t3.slice(13, 45);
            const e3 = t3.slice(45, 78), r3 = this.versionBytesNum === this.Constants.privKey, i3 = this.versionBytesNum === this.Constants.pubKey;
            if (r3 && 0 === e3[0])
              this.privKey = new this.PrivKey().fromBn(p().fromBuffer(e3.slice(1, 33))), this.pubKey = new K().fromPrivKey(this.privKey);
            else {
              if (!i3 || 2 !== e3[0] && 3 !== e3[0])
                throw new Error("Invalid key");
              this.pubKey = new K().fromDer(e3);
            }
            return this;
          }
          fromFastBuffer(t3) {
            if (0 === t3.length)
              return this;
            if (78 !== t3.length && 111 !== t3.length)
              throw new Error("incorrect bip32 fastBuffer data length: " + t3.length);
            this.versionBytesNum = t3.slice(0, 4).readUInt32BE(0), this.depth = t3.slice(4, 5).readUInt8(0), this.parentFingerPrint = t3.slice(5, 9), this.childIndex = t3.slice(9, 13).readUInt32BE(0), this.chainCode = t3.slice(13, 45);
            const e3 = t3.slice(45, t3.length), r3 = this.versionBytesNum === this.Constants.privKey, i3 = this.versionBytesNum === this.Constants.pubKey;
            if (r3 && 0 === e3[0] && 78 === t3.length)
              this.privKey = new this.PrivKey().fromBn(p().fromBuffer(e3.slice(1, 33))), this.pubKey = new K().fromPrivKey(this.privKey);
            else {
              if (!i3 || 111 !== t3.length)
                throw new Error("Invalid key");
              this.pubKey = new K().fromFastBuffer(e3), this.pubKey.compressed = true;
            }
            return this;
          }
          derive(t3) {
            const e3 = t3.split("/");
            if ("m" === t3)
              return this;
            let r3 = this;
            for (const t4 in e3) {
              const i3 = e3[t4];
              if ("0" === t4) {
                if ("m" !== i3)
                  throw new Error("invalid path");
                continue;
              }
              if (parseInt(i3.replace("'", ""), 10).toString() !== i3.replace("'", ""))
                throw new Error("invalid path");
              const s2 = i3.length > 1 && "'" === i3[i3.length - 1];
              let n2 = 2147483647 & parseInt(s2 ? i3.slice(0, i3.length - 1) : i3, 10);
              s2 && (n2 += 2147483648), r3 = r3.deriveChild(n2);
            }
            return r3;
          }
          async asyncDerive(t3) {
            const e3 = await E.asyncObjectMethod(this, "derive", [t3]);
            return new this.constructor().fromFastBuffer(e3.resbuf);
          }
          deriveChild(t3) {
            if ("number" != typeof t3)
              throw new Error("i must be a number");
            let e3 = [];
            e3.push(t3 >> 24 & 255), e3.push(t3 >> 16 & 255), e3.push(t3 >> 8 & 255), e3.push(255 & t3), e3 = import_buffer.Buffer.from(e3);
            const r3 = 0 != (2147483648 & t3), i3 = this.versionBytesNum === this.Constants.privKey;
            if (r3 && (!this.privKey || !i3))
              throw new Error("Cannot do private key derivation without private key");
            let s2 = null;
            if (this.privKey) {
              let t4 = null;
              t4 = r3 ? import_buffer.Buffer.concat([import_buffer.Buffer.from([0]), this.privKey.bn.toBuffer({ size: 32 }), e3]) : import_buffer.Buffer.concat([this.pubKey.toBuffer({ size: 32 }), e3]);
              const i4 = P.sha512Hmac(t4, this.chainCode), n3 = p().fromBuffer(i4.slice(0, 32), { size: 32 }), a2 = i4.slice(32, 64), o2 = n3.add(this.privKey.bn).mod(L.getN());
              s2 = new this.constructor(), s2.chainCode = a2, s2.privKey = new this.PrivKey().fromBn(o2), s2.pubKey = new K().fromPrivKey(s2.privKey);
            } else {
              const t4 = import_buffer.Buffer.concat([this.pubKey.toBuffer(), e3]), r4 = P.sha512Hmac(t4, this.chainCode), i4 = p().fromBuffer(r4.slice(0, 32)), n3 = r4.slice(32, 64), a2 = L.getG().mul(i4), o2 = this.pubKey.point, h2 = a2.add(o2), f3 = new K();
              f3.point = h2, s2 = new this.constructor(), s2.chainCode = n3, s2.pubKey = f3;
            }
            s2.childIndex = t3;
            const n2 = P.sha256Ripemd160(this.pubKey.toBuffer());
            return s2.parentFingerPrint = n2.slice(0, 4), s2.versionBytesNum = this.versionBytesNum, s2.depth = this.depth + 1, s2;
          }
          toPublic() {
            const t3 = new this.constructor().fromObject(this);
            return t3.versionBytesNum = this.Constants.pubKey, t3.privKey = void 0, t3;
          }
          toBuffer() {
            const t3 = this.versionBytesNum === this.Constants.privKey, e3 = this.versionBytesNum === this.Constants.pubKey;
            if (t3)
              return new y().writeUInt32BE(this.versionBytesNum).writeUInt8(this.depth).write(this.parentFingerPrint).writeUInt32BE(this.childIndex).write(this.chainCode).writeUInt8(0).write(this.privKey.bn.toBuffer({ size: 32 })).toBuffer();
            if (e3) {
              if (false === this.pubKey.compressed)
                throw new Error("cannot convert bip32 to buffer if pubKey is not compressed");
              return new y().writeUInt32BE(this.versionBytesNum).writeUInt8(this.depth).write(this.parentFingerPrint).writeUInt32BE(this.childIndex).write(this.chainCode).write(this.pubKey.toBuffer()).toBuffer();
            }
            throw new Error("bip32: invalid versionBytesNum byte");
          }
          toFastBuffer() {
            if (!this.versionBytesNum)
              return import_buffer.Buffer.alloc(0);
            const t3 = this.versionBytesNum === this.Constants.privKey, e3 = this.versionBytesNum === this.Constants.pubKey;
            if (t3)
              return new y().writeUInt32BE(this.versionBytesNum).writeUInt8(this.depth).write(this.parentFingerPrint).writeUInt32BE(this.childIndex).write(this.chainCode).writeUInt8(0).write(this.privKey.bn.toBuffer({ size: 32 })).toBuffer();
            if (e3)
              return new y().writeUInt32BE(this.versionBytesNum).writeUInt8(this.depth).write(this.parentFingerPrint).writeUInt32BE(this.childIndex).write(this.chainCode).write(this.pubKey.toFastBuffer()).toBuffer();
            throw new Error("bip32: invalid versionBytesNum byte");
          }
          toString() {
            return k.encode(this.toBuffer());
          }
          async asyncToString() {
            const t3 = await E.asyncObjectMethod(this, "toString", []);
            return JSON.parse(t3.resbuf.toString());
          }
          toJSON() {
            return this.toFastHex();
          }
          fromJSON(t3) {
            return this.fromFastHex(t3);
          }
          isPrivate() {
            return this.versionBytesNum === this.Constants.privKey;
          }
        }
        G.Mainnet = class extends G {
          constructor(t3, e3, r3, i3, s2, n2, a2) {
            super(t3, e3, r3, i3, s2, n2, a2, x.Mainnet.Bip32, V.Mainnet);
          }
        }, G.Testnet = class extends G {
          constructor(t3, e3, r3, i3, s2, n2, a2) {
            super(t3, e3, r3, i3, s2, n2, a2, x.Testnet.Bip32, V.Testnet);
          }
        };
        const J = ["abandon", "ability", "able", "about", "above", "absent", "absorb", "abstract", "absurd", "abuse", "access", "accident", "account", "accuse", "achieve", "acid", "acoustic", "acquire", "across", "act", "action", "actor", "actress", "actual", "adapt", "add", "addict", "address", "adjust", "admit", "adult", "advance", "advice", "aerobic", "affair", "afford", "afraid", "again", "age", "agent", "agree", "ahead", "aim", "air", "airport", "aisle", "alarm", "album", "alcohol", "alert", "alien", "all", "alley", "allow", "almost", "alone", "alpha", "already", "also", "alter", "always", "amateur", "amazing", "among", "amount", "amused", "analyst", "anchor", "ancient", "anger", "angle", "angry", "animal", "ankle", "announce", "annual", "another", "answer", "antenna", "antique", "anxiety", "any", "apart", "apology", "appear", "apple", "approve", "april", "arch", "arctic", "area", "arena", "argue", "arm", "armed", "armor", "army", "around", "arrange", "arrest", "arrive", "arrow", "art", "artefact", "artist", "artwork", "ask", "aspect", "assault", "asset", "assist", "assume", "asthma", "athlete", "atom", "attack", "attend", "attitude", "attract", "auction", "audit", "august", "aunt", "author", "auto", "autumn", "average", "avocado", "avoid", "awake", "aware", "away", "awesome", "awful", "awkward", "axis", "baby", "bachelor", "bacon", "badge", "bag", "balance", "balcony", "ball", "bamboo", "banana", "banner", "bar", "barely", "bargain", "barrel", "base", "basic", "basket", "battle", "beach", "bean", "beauty", "because", "become", "beef", "before", "begin", "behave", "behind", "believe", "below", "belt", "bench", "benefit", "best", "betray", "better", "between", "beyond", "bicycle", "bid", "bike", "bind", "biology", "bird", "birth", "bitter", "black", "blade", "blame", "blanket", "blast", "bleak", "bless", "blind", "blood", "blossom", "blouse", "blue", "blur", "blush", "board", "boat", "body", "boil", "bomb", "bone", "bonus", "book", "boost", "border", "boring", "borrow", "boss", "bottom", "bounce", "box", "boy", "bracket", "brain", "brand", "brass", "brave", "bread", "breeze", "brick", "bridge", "brief", "bright", "bring", "brisk", "broccoli", "broken", "bronze", "broom", "brother", "brown", "brush", "bubble", "buddy", "budget", "buffalo", "build", "bulb", "bulk", "bullet", "bundle", "bunker", "burden", "burger", "burst", "bus", "business", "busy", "butter", "buyer", "buzz", "cabbage", "cabin", "cable", "cactus", "cage", "cake", "call", "calm", "camera", "camp", "can", "canal", "cancel", "candy", "cannon", "canoe", "canvas", "canyon", "capable", "capital", "captain", "car", "carbon", "card", "cargo", "carpet", "carry", "cart", "case", "cash", "casino", "castle", "casual", "cat", "catalog", "catch", "category", "cattle", "caught", "cause", "caution", "cave", "ceiling", "celery", "cement", "census", "century", "cereal", "certain", "chair", "chalk", "champion", "change", "chaos", "chapter", "charge", "chase", "chat", "cheap", "check", "cheese", "chef", "cherry", "chest", "chicken", "chief", "child", "chimney", "choice", "choose", "chronic", "chuckle", "chunk", "churn", "cigar", "cinnamon", "circle", "citizen", "city", "civil", "claim", "clap", "clarify", "claw", "clay", "clean", "clerk", "clever", "click", "client", "cliff", "climb", "clinic", "clip", "clock", "clog", "close", "cloth", "cloud", "clown", "club", "clump", "cluster", "clutch", "coach", "coast", "coconut", "code", "coffee", "coil", "coin", "collect", "color", "column", "combine", "come", "comfort", "comic", "common", "company", "concert", "conduct", "confirm", "congress", "connect", "consider", "control", "convince", "cook", "cool", "copper", "copy", "coral", "core", "corn", "correct", "cost", "cotton", "couch", "country", "couple", "course", "cousin", "cover", "coyote", "crack", "cradle", "craft", "cram", "crane", "crash", "crater", "crawl", "crazy", "cream", "credit", "creek", "crew", "cricket", "crime", "crisp", "critic", "crop", "cross", "crouch", "crowd", "crucial", "cruel", "cruise", "crumble", "crunch", "crush", "cry", "crystal", "cube", "culture", "cup", "cupboard", "curious", "current", "curtain", "curve", "cushion", "custom", "cute", "cycle", "dad", "damage", "damp", "dance", "danger", "daring", "dash", "daughter", "dawn", "day", "deal", "debate", "debris", "decade", "december", "decide", "decline", "decorate", "decrease", "deer", "defense", "define", "defy", "degree", "delay", "deliver", "demand", "demise", "denial", "dentist", "deny", "depart", "depend", "deposit", "depth", "deputy", "derive", "describe", "desert", "design", "desk", "despair", "destroy", "detail", "detect", "develop", "device", "devote", "diagram", "dial", "diamond", "diary", "dice", "diesel", "diet", "differ", "digital", "dignity", "dilemma", "dinner", "dinosaur", "direct", "dirt", "disagree", "discover", "disease", "dish", "dismiss", "disorder", "display", "distance", "divert", "divide", "divorce", "dizzy", "doctor", "document", "dog", "doll", "dolphin", "domain", "donate", "donkey", "donor", "door", "dose", "double", "dove", "draft", "dragon", "drama", "drastic", "draw", "dream", "dress", "drift", "drill", "drink", "drip", "drive", "drop", "drum", "dry", "duck", "dumb", "dune", "during", "dust", "dutch", "duty", "dwarf", "dynamic", "eager", "eagle", "early", "earn", "earth", "easily", "east", "easy", "echo", "ecology", "economy", "edge", "edit", "educate", "effort", "egg", "eight", "either", "elbow", "elder", "electric", "elegant", "element", "elephant", "elevator", "elite", "else", "embark", "embody", "embrace", "emerge", "emotion", "employ", "empower", "empty", "enable", "enact", "end", "endless", "endorse", "enemy", "energy", "enforce", "engage", "engine", "enhance", "enjoy", "enlist", "enough", "enrich", "enroll", "ensure", "enter", "entire", "entry", "envelope", "episode", "equal", "equip", "era", "erase", "erode", "erosion", "error", "erupt", "escape", "essay", "essence", "estate", "eternal", "ethics", "evidence", "evil", "evoke", "evolve", "exact", "example", "excess", "exchange", "excite", "exclude", "excuse", "execute", "exercise", "exhaust", "exhibit", "exile", "exist", "exit", "exotic", "expand", "expect", "expire", "explain", "expose", "express", "extend", "extra", "eye", "eyebrow", "fabric", "face", "faculty", "fade", "faint", "faith", "fall", "false", "fame", "family", "famous", "fan", "fancy", "fantasy", "farm", "fashion", "fat", "fatal", "father", "fatigue", "fault", "favorite", "feature", "february", "federal", "fee", "feed", "feel", "female", "fence", "festival", "fetch", "fever", "few", "fiber", "fiction", "field", "figure", "file", "film", "filter", "final", "find", "fine", "finger", "finish", "fire", "firm", "first", "fiscal", "fish", "fit", "fitness", "fix", "flag", "flame", "flash", "flat", "flavor", "flee", "flight", "flip", "float", "flock", "floor", "flower", "fluid", "flush", "fly", "foam", "focus", "fog", "foil", "fold", "follow", "food", "foot", "force", "forest", "forget", "fork", "fortune", "forum", "forward", "fossil", "foster", "found", "fox", "fragile", "frame", "frequent", "fresh", "friend", "fringe", "frog", "front", "frost", "frown", "frozen", "fruit", "fuel", "fun", "funny", "furnace", "fury", "future", "gadget", "gain", "galaxy", "gallery", "game", "gap", "garage", "garbage", "garden", "garlic", "garment", "gas", "gasp", "gate", "gather", "gauge", "gaze", "general", "genius", "genre", "gentle", "genuine", "gesture", "ghost", "giant", "gift", "giggle", "ginger", "giraffe", "girl", "give", "glad", "glance", "glare", "glass", "glide", "glimpse", "globe", "gloom", "glory", "glove", "glow", "glue", "goat", "goddess", "gold", "good", "goose", "gorilla", "gospel", "gossip", "govern", "gown", "grab", "grace", "grain", "grant", "grape", "grass", "gravity", "great", "green", "grid", "grief", "grit", "grocery", "group", "grow", "grunt", "guard", "guess", "guide", "guilt", "guitar", "gun", "gym", "habit", "hair", "half", "hammer", "hamster", "hand", "happy", "harbor", "hard", "harsh", "harvest", "hat", "have", "hawk", "hazard", "head", "health", "heart", "heavy", "hedgehog", "height", "hello", "helmet", "help", "hen", "hero", "hidden", "high", "hill", "hint", "hip", "hire", "history", "hobby", "hockey", "hold", "hole", "holiday", "hollow", "home", "honey", "hood", "hope", "horn", "horror", "horse", "hospital", "host", "hotel", "hour", "hover", "hub", "huge", "human", "humble", "humor", "hundred", "hungry", "hunt", "hurdle", "hurry", "hurt", "husband", "hybrid", "ice", "icon", "idea", "identify", "idle", "ignore", "ill", "illegal", "illness", "image", "imitate", "immense", "immune", "impact", "impose", "improve", "impulse", "inch", "include", "income", "increase", "index", "indicate", "indoor", "industry", "infant", "inflict", "inform", "inhale", "inherit", "initial", "inject", "injury", "inmate", "inner", "innocent", "input", "inquiry", "insane", "insect", "inside", "inspire", "install", "intact", "interest", "into", "invest", "invite", "involve", "iron", "island", "isolate", "issue", "item", "ivory", "jacket", "jaguar", "jar", "jazz", "jealous", "jeans", "jelly", "jewel", "job", "join", "joke", "journey", "joy", "judge", "juice", "jump", "jungle", "junior", "junk", "just", "kangaroo", "keen", "keep", "ketchup", "key", "kick", "kid", "kidney", "kind", "kingdom", "kiss", "kit", "kitchen", "kite", "kitten", "kiwi", "knee", "knife", "knock", "know", "lab", "label", "labor", "ladder", "lady", "lake", "lamp", "language", "laptop", "large", "later", "latin", "laugh", "laundry", "lava", "law", "lawn", "lawsuit", "layer", "lazy", "leader", "leaf", "learn", "leave", "lecture", "left", "leg", "legal", "legend", "leisure", "lemon", "lend", "length", "lens", "leopard", "lesson", "letter", "level", "liar", "liberty", "library", "license", "life", "lift", "light", "like", "limb", "limit", "link", "lion", "liquid", "list", "little", "live", "lizard", "load", "loan", "lobster", "local", "lock", "logic", "lonely", "long", "loop", "lottery", "loud", "lounge", "love", "loyal", "lucky", "luggage", "lumber", "lunar", "lunch", "luxury", "lyrics", "machine", "mad", "magic", "magnet", "maid", "mail", "main", "major", "make", "mammal", "man", "manage", "mandate", "mango", "mansion", "manual", "maple", "marble", "march", "margin", "marine", "market", "marriage", "mask", "mass", "master", "match", "material", "math", "matrix", "matter", "maximum", "maze", "meadow", "mean", "measure", "meat", "mechanic", "medal", "media", "melody", "melt", "member", "memory", "mention", "menu", "mercy", "merge", "merit", "merry", "mesh", "message", "metal", "method", "middle", "midnight", "milk", "million", "mimic", "mind", "minimum", "minor", "minute", "miracle", "mirror", "misery", "miss", "mistake", "mix", "mixed", "mixture", "mobile", "model", "modify", "mom", "moment", "monitor", "monkey", "monster", "month", "moon", "moral", "more", "morning", "mosquito", "mother", "motion", "motor", "mountain", "mouse", "move", "movie", "much", "muffin", "mule", "multiply", "muscle", "museum", "mushroom", "music", "must", "mutual", "myself", "mystery", "myth", "naive", "name", "napkin", "narrow", "nasty", "nation", "nature", "near", "neck", "need", "negative", "neglect", "neither", "nephew", "nerve", "nest", "net", "network", "neutral", "never", "news", "next", "nice", "night", "noble", "noise", "nominee", "noodle", "normal", "north", "nose", "notable", "note", "nothing", "notice", "novel", "now", "nuclear", "number", "nurse", "nut", "oak", "obey", "object", "oblige", "obscure", "observe", "obtain", "obvious", "occur", "ocean", "october", "odor", "off", "offer", "office", "often", "oil", "okay", "old", "olive", "olympic", "omit", "once", "one", "onion", "online", "only", "open", "opera", "opinion", "oppose", "option", "orange", "orbit", "orchard", "order", "ordinary", "organ", "orient", "original", "orphan", "ostrich", "other", "outdoor", "outer", "output", "outside", "oval", "oven", "over", "own", "owner", "oxygen", "oyster", "ozone", "pact", "paddle", "page", "pair", "palace", "palm", "panda", "panel", "panic", "panther", "paper", "parade", "parent", "park", "parrot", "party", "pass", "patch", "path", "patient", "patrol", "pattern", "pause", "pave", "payment", "peace", "peanut", "pear", "peasant", "pelican", "pen", "penalty", "pencil", "people", "pepper", "perfect", "permit", "person", "pet", "phone", "photo", "phrase", "physical", "piano", "picnic", "picture", "piece", "pig", "pigeon", "pill", "pilot", "pink", "pioneer", "pipe", "pistol", "pitch", "pizza", "place", "planet", "plastic", "plate", "play", "please", "pledge", "pluck", "plug", "plunge", "poem", "poet", "point", "polar", "pole", "police", "pond", "pony", "pool", "popular", "portion", "position", "possible", "post", "potato", "pottery", "poverty", "powder", "power", "practice", "praise", "predict", "prefer", "prepare", "present", "pretty", "prevent", "price", "pride", "primary", "print", "priority", "prison", "private", "prize", "problem", "process", "produce", "profit", "program", "project", "promote", "proof", "property", "prosper", "protect", "proud", "provide", "public", "pudding", "pull", "pulp", "pulse", "pumpkin", "punch", "pupil", "puppy", "purchase", "purity", "purpose", "purse", "push", "put", "puzzle", "pyramid", "quality", "quantum", "quarter", "question", "quick", "quit", "quiz", "quote", "rabbit", "raccoon", "race", "rack", "radar", "radio", "rail", "rain", "raise", "rally", "ramp", "ranch", "random", "range", "rapid", "rare", "rate", "rather", "raven", "raw", "razor", "ready", "real", "reason", "rebel", "rebuild", "recall", "receive", "recipe", "record", "recycle", "reduce", "reflect", "reform", "refuse", "region", "regret", "regular", "reject", "relax", "release", "relief", "rely", "remain", "remember", "remind", "remove", "render", "renew", "rent", "reopen", "repair", "repeat", "replace", "report", "require", "rescue", "resemble", "resist", "resource", "response", "result", "retire", "retreat", "return", "reunion", "reveal", "review", "reward", "rhythm", "rib", "ribbon", "rice", "rich", "ride", "ridge", "rifle", "right", "rigid", "ring", "riot", "ripple", "risk", "ritual", "rival", "river", "road", "roast", "robot", "robust", "rocket", "romance", "roof", "rookie", "room", "rose", "rotate", "rough", "round", "route", "royal", "rubber", "rude", "rug", "rule", "run", "runway", "rural", "sad", "saddle", "sadness", "safe", "sail", "salad", "salmon", "salon", "salt", "salute", "same", "sample", "sand", "satisfy", "satoshi", "sauce", "sausage", "save", "say", "scale", "scan", "scare", "scatter", "scene", "scheme", "school", "science", "scissors", "scorpion", "scout", "scrap", "screen", "script", "scrub", "sea", "search", "season", "seat", "second", "secret", "section", "security", "seed", "seek", "segment", "select", "sell", "seminar", "senior", "sense", "sentence", "series", "service", "session", "settle", "setup", "seven", "shadow", "shaft", "shallow", "share", "shed", "shell", "sheriff", "shield", "shift", "shine", "ship", "shiver", "shock", "shoe", "shoot", "shop", "short", "shoulder", "shove", "shrimp", "shrug", "shuffle", "shy", "sibling", "sick", "side", "siege", "sight", "sign", "silent", "silk", "silly", "silver", "similar", "simple", "since", "sing", "siren", "sister", "situate", "six", "size", "skate", "sketch", "ski", "skill", "skin", "skirt", "skull", "slab", "slam", "sleep", "slender", "slice", "slide", "slight", "slim", "slogan", "slot", "slow", "slush", "small", "smart", "smile", "smoke", "smooth", "snack", "snake", "snap", "sniff", "snow", "soap", "soccer", "social", "sock", "soda", "soft", "solar", "soldier", "solid", "solution", "solve", "someone", "song", "soon", "sorry", "sort", "soul", "sound", "soup", "source", "south", "space", "spare", "spatial", "spawn", "speak", "special", "speed", "spell", "spend", "sphere", "spice", "spider", "spike", "spin", "spirit", "split", "spoil", "sponsor", "spoon", "sport", "spot", "spray", "spread", "spring", "spy", "square", "squeeze", "squirrel", "stable", "stadium", "staff", "stage", "stairs", "stamp", "stand", "start", "state", "stay", "steak", "steel", "stem", "step", "stereo", "stick", "still", "sting", "stock", "stomach", "stone", "stool", "story", "stove", "strategy", "street", "strike", "strong", "struggle", "student", "stuff", "stumble", "style", "subject", "submit", "subway", "success", "such", "sudden", "suffer", "sugar", "suggest", "suit", "summer", "sun", "sunny", "sunset", "super", "supply", "supreme", "sure", "surface", "surge", "surprise", "surround", "survey", "suspect", "sustain", "swallow", "swamp", "swap", "swarm", "swear", "sweet", "swift", "swim", "swing", "switch", "sword", "symbol", "symptom", "syrup", "system", "table", "tackle", "tag", "tail", "talent", "talk", "tank", "tape", "target", "task", "taste", "tattoo", "taxi", "teach", "team", "tell", "ten", "tenant", "tennis", "tent", "term", "test", "text", "thank", "that", "theme", "then", "theory", "there", "they", "thing", "this", "thought", "three", "thrive", "throw", "thumb", "thunder", "ticket", "tide", "tiger", "tilt", "timber", "time", "tiny", "tip", "tired", "tissue", "title", "toast", "tobacco", "today", "toddler", "toe", "together", "toilet", "token", "tomato", "tomorrow", "tone", "tongue", "tonight", "tool", "tooth", "top", "topic", "topple", "torch", "tornado", "tortoise", "toss", "total", "tourist", "toward", "tower", "town", "toy", "track", "trade", "traffic", "tragic", "train", "transfer", "trap", "trash", "travel", "tray", "treat", "tree", "trend", "trial", "tribe", "trick", "trigger", "trim", "trip", "trophy", "trouble", "truck", "true", "truly", "trumpet", "trust", "truth", "try", "tube", "tuition", "tumble", "tuna", "tunnel", "turkey", "turn", "turtle", "twelve", "twenty", "twice", "twin", "twist", "two", "type", "typical", "ugly", "umbrella", "unable", "unaware", "uncle", "uncover", "under", "undo", "unfair", "unfold", "unhappy", "uniform", "unique", "unit", "universe", "unknown", "unlock", "until", "unusual", "unveil", "update", "upgrade", "uphold", "upon", "upper", "upset", "urban", "urge", "usage", "use", "used", "useful", "useless", "usual", "utility", "vacant", "vacuum", "vague", "valid", "valley", "valve", "van", "vanish", "vapor", "various", "vast", "vault", "vehicle", "velvet", "vendor", "venture", "venue", "verb", "verify", "version", "very", "vessel", "veteran", "viable", "vibrant", "vicious", "victory", "video", "view", "village", "vintage", "violin", "virtual", "virus", "visa", "visit", "visual", "vital", "vivid", "vocal", "voice", "void", "volcano", "volume", "vote", "voyage", "wage", "wagon", "wait", "walk", "wall", "walnut", "want", "warfare", "warm", "warrior", "wash", "wasp", "waste", "water", "wave", "way", "wealth", "weapon", "wear", "weasel", "weather", "web", "wedding", "weekend", "weird", "welcome", "west", "wet", "whale", "what", "wheat", "wheel", "when", "where", "whip", "whisper", "wide", "width", "wife", "wild", "will", "win", "window", "wine", "wing", "wink", "winner", "winter", "wire", "wisdom", "wise", "wish", "witness", "wolf", "woman", "wonder", "wood", "wool", "word", "work", "world", "worry", "worth", "wrap", "wreck", "wrestle", "wrist", "write", "wrong", "yard", "year", "yellow", "you", "young", "youth", "zebra", "zero", "zone", "zoo"];
        J.space = " ";
        class Y extends S {
          constructor(t3, e3, r3 = J) {
            super({ mnemonic: t3, seed: e3 }), this.Wordlist = r3;
          }
          toBw(t3) {
            if (t3 || (t3 = new y()), this.mnemonic) {
              const e3 = import_buffer.Buffer.from(this.mnemonic);
              t3.writeVarIntNum(e3.length), t3.write(e3);
            } else
              t3.writeVarIntNum(0);
            return this.seed ? (t3.writeVarIntNum(this.seed.length), t3.write(this.seed)) : t3.writeVarIntNum(0), t3;
          }
          fromBr(t3) {
            const e3 = t3.readVarIntNum();
            e3 > 0 && (this.mnemonic = t3.read(e3).toString());
            const r3 = t3.readVarIntNum();
            return r3 > 0 && (this.seed = t3.read(r3)), this;
          }
          fromRandom(t3) {
            if (t3 || (t3 = 128), t3 % 32 != 0)
              throw new Error("bits must be multiple of 32");
            if (t3 < 128)
              throw new Error("bits must be at least 128");
            const e3 = D.getRandomBuffer(t3 / 8);
            return this.entropy2Mnemonic(e3), this.mnemonic2Seed(), this;
          }
          static fromRandom(t3) {
            return new this().fromRandom(t3);
          }
          async asyncFromRandom(t3) {
            t3 || (t3 = 128);
            const e3 = D.getRandomBuffer(t3 / 8);
            let r3 = await E.asyncObjectMethod(this, "entropy2Mnemonic", [e3]);
            const i3 = new Y().fromFastBuffer(r3.resbuf);
            return r3 = await E.asyncObjectMethod(i3, "mnemonic2Seed", []), this.fromFastBuffer(r3.resbuf);
          }
          static asyncFromRandom(t3) {
            return new this().asyncFromRandom(t3);
          }
          fromEntropy(t3) {
            return this.entropy2Mnemonic(t3), this;
          }
          static fromEntropy(t3) {
            return new this().fromEntropy(t3);
          }
          async asyncFromEntropy(t3) {
            const e3 = await E.asyncObjectMethod(this, "fromEntropy", [t3]);
            return this.fromFastBuffer(e3.resbuf);
          }
          static asyncFromEntropy(t3) {
            return new this().asyncFromEntropy(t3);
          }
          fromString(t3) {
            return this.mnemonic = t3, this;
          }
          toString() {
            return this.mnemonic;
          }
          toSeed(t3) {
            return this.mnemonic2Seed(t3), this.seed;
          }
          async asyncToSeed(t3) {
            void 0 === t3 && (t3 = "");
            const e3 = [t3];
            return (await E.asyncObjectMethod(this, "toSeed", e3)).resbuf;
          }
          entropy2Mnemonic(t3) {
            if (!import_buffer.Buffer.isBuffer(t3) || t3.length < 16)
              throw new Error("Entropy is less than 128 bits. It must be 128 bits or more.");
            const e3 = P.sha256(t3);
            let r3 = "";
            const i3 = 8 * t3.length;
            for (let e4 = 0; e4 < t3.length; e4++)
              r3 += ("00000000" + t3[e4].toString(2)).slice(-8);
            let s2 = e3[0].toString(2);
            if (s2 = ("00000000" + s2).slice(-8).slice(0, i3 / 32), r3 += s2, r3.length % 11 != 0)
              throw new Error("internal error - entropy not an even multiple of 11 bits - " + r3.length);
            let n2 = "";
            for (let t4 = 0; t4 < r3.length / 11; t4++) {
              "" !== n2 && (n2 += this.Wordlist.space);
              const e4 = parseInt(r3.slice(11 * t4, 11 * (t4 + 1)), 2);
              n2 += this.Wordlist[e4];
            }
            return this.mnemonic = n2, this;
          }
          check() {
            const t3 = this.mnemonic.split(this.Wordlist.space);
            let e3 = "";
            for (let r4 = 0; r4 < t3.length; r4++) {
              const i4 = this.Wordlist.indexOf(t3[r4]);
              if (i4 < 0)
                return false;
              e3 += ("00000000000" + i4.toString(2)).slice(-11);
            }
            if (e3.length % 11 != 0)
              throw new Error("internal error - entropy not an even multiple of 11 bits - " + e3.length);
            const r3 = e3.length / 33, i3 = e3.slice(-r3), s2 = e3.slice(0, e3.length - r3), n2 = import_buffer.Buffer.alloc(s2.length / 8);
            for (let t4 = 0; t4 < s2.length / 8; t4++)
              n2.writeUInt8(parseInt(e3.slice(8 * t4, 8 * (t4 + 1)), 2), t4);
            let a2 = P.sha256(n2)[0].toString(2);
            return a2 = ("00000000" + a2).slice(-8).slice(0, r3), a2 === i3;
          }
          mnemonic2Seed(t3 = "") {
            let e3 = this.mnemonic;
            if (!this.check())
              throw new Error("Mnemonic does not pass the check - was the mnemonic typed incorrectly? Are there extra spaces?");
            if ("string" != typeof t3)
              throw new Error("passphrase must be a string or undefined");
            e3 = e3.normalize("NFKD"), t3 = t3.normalize("NFKD");
            const r3 = import_buffer.Buffer.from(e3), i3 = import_buffer.Buffer.concat([import_buffer.Buffer.from("mnemonic"), import_buffer.Buffer.from(t3)]);
            return this.seed = l.pbkdf2Sync(r3, i3, 2048, 64, "sha512"), this;
          }
          isValid(t3 = "") {
            let e3;
            try {
              e3 = !!this.mnemonic2Seed(t3);
            } catch (t4) {
              e3 = false;
            }
            return e3;
          }
          static isValid(t3, e3 = "") {
            return new Y(t3).isValid(e3);
          }
        }
        const W = ["\u3042\u3044\u3053\u304F\u3057\u3093", "\u3042\u3044\u3055\u3064", "\u3042\u3044\u3060", "\u3042\u304A\u305E\u3089", "\u3042\u304B\u3061\u3083\u3093", "\u3042\u304D\u308B", "\u3042\u3051\u304C\u305F", "\u3042\u3051\u308B", "\u3042\u3053\u304C\u308C\u308B", "\u3042\u3055\u3044", "\u3042\u3055\u3072", "\u3042\u3057\u3042\u3068", "\u3042\u3058\u308F\u3046", "\u3042\u305A\u304B\u308B", "\u3042\u305A\u304D", "\u3042\u305D\u3076", "\u3042\u305F\u3048\u308B", "\u3042\u305F\u305F\u3081\u308B", "\u3042\u305F\u308A\u307E\u3048", "\u3042\u305F\u308B", "\u3042\u3064\u3044", "\u3042\u3064\u304B\u3046", "\u3042\u3063\u3057\u3085\u304F", "\u3042\u3064\u307E\u308A", "\u3042\u3064\u3081\u308B", "\u3042\u3066\u306A", "\u3042\u3066\u306F\u307E\u308B", "\u3042\u3072\u308B", "\u3042\u3076\u3089", "\u3042\u3076\u308B", "\u3042\u3075\u308C\u308B", "\u3042\u307E\u3044", "\u3042\u307E\u3069", "\u3042\u307E\u3084\u304B\u3059", "\u3042\u307E\u308A", "\u3042\u307F\u3082\u306E", "\u3042\u3081\u308A\u304B", "\u3042\u3084\u307E\u308B", "\u3042\u3086\u3080", "\u3042\u3089\u3044\u3050\u307E", "\u3042\u3089\u3057", "\u3042\u3089\u3059\u3058", "\u3042\u3089\u305F\u3081\u308B", "\u3042\u3089\u3086\u308B", "\u3042\u3089\u308F\u3059", "\u3042\u308A\u304C\u3068\u3046", "\u3042\u308F\u305B\u308B", "\u3042\u308F\u3066\u308B", "\u3042\u3093\u3044", "\u3042\u3093\u304C\u3044", "\u3042\u3093\u3053", "\u3042\u3093\u305C\u3093", "\u3042\u3093\u3066\u3044", "\u3042\u3093\u306A\u3044", "\u3042\u3093\u307E\u308A", "\u3044\u3044\u3060\u3059", "\u3044\u304A\u3093", "\u3044\u304C\u3044", "\u3044\u304C\u304F", "\u3044\u304D\u304A\u3044", "\u3044\u304D\u306A\u308A", "\u3044\u304D\u3082\u306E", "\u3044\u304D\u308B", "\u3044\u304F\u3058", "\u3044\u304F\u3076\u3093", "\u3044\u3051\u3070\u306A", "\u3044\u3051\u3093", "\u3044\u3053\u3046", "\u3044\u3053\u304F", "\u3044\u3053\u3064", "\u3044\u3055\u307E\u3057\u3044", "\u3044\u3055\u3093", "\u3044\u3057\u304D", "\u3044\u3058\u3085\u3046", "\u3044\u3058\u3087\u3046", "\u3044\u3058\u308F\u308B", "\u3044\u305A\u307F", "\u3044\u305A\u308C", "\u3044\u305B\u3044", "\u3044\u305B\u3048\u3073", "\u3044\u305B\u304B\u3044", "\u3044\u305B\u304D", "\u3044\u305C\u3093", "\u3044\u305D\u3046\u308D\u3046", "\u3044\u305D\u304C\u3057\u3044", "\u3044\u3060\u3044", "\u3044\u3060\u304F", "\u3044\u305F\u305A\u3089", "\u3044\u305F\u307F", "\u3044\u305F\u308A\u3042", "\u3044\u3061\u304A\u3046", "\u3044\u3061\u3058", "\u3044\u3061\u3069", "\u3044\u3061\u3070", "\u3044\u3061\u3076", "\u3044\u3061\u308A\u3085\u3046", "\u3044\u3064\u304B", "\u3044\u3063\u3057\u3085\u3093", "\u3044\u3063\u305B\u3044", "\u3044\u3063\u305D\u3046", "\u3044\u3063\u305F\u3093", "\u3044\u3063\u3061", "\u3044\u3063\u3066\u3044", "\u3044\u3063\u307D\u3046", "\u3044\u3066\u3056", "\u3044\u3066\u3093", "\u3044\u3069\u3046", "\u3044\u3068\u3053", "\u3044\u306A\u3044", "\u3044\u306A\u304B", "\u3044\u306D\u3080\u308A", "\u3044\u306E\u3061", "\u3044\u306E\u308B", "\u3044\u306F\u3064", "\u3044\u3070\u308B", "\u3044\u306F\u3093", "\u3044\u3073\u304D", "\u3044\u3072\u3093", "\u3044\u3075\u304F", "\u3044\u3078\u3093", "\u3044\u307B\u3046", "\u3044\u307F\u3093", "\u3044\u3082\u3046\u3068", "\u3044\u3082\u305F\u308C", "\u3044\u3082\u308A", "\u3044\u3084\u304C\u308B", "\u3044\u3084\u3059", "\u3044\u3088\u304B\u3093", "\u3044\u3088\u304F", "\u3044\u3089\u3044", "\u3044\u3089\u3059\u3068", "\u3044\u308A\u3050\u3061", "\u3044\u308A\u3087\u3046", "\u3044\u308C\u3044", "\u3044\u308C\u3082\u306E", "\u3044\u308C\u308B", "\u3044\u308D\u3048\u3093\u3074\u3064", "\u3044\u308F\u3044", "\u3044\u308F\u3046", "\u3044\u308F\u304B\u3093", "\u3044\u308F\u3070", "\u3044\u308F\u3086\u308B", "\u3044\u3093\u3052\u3093\u307E\u3081", "\u3044\u3093\u3055\u3064", "\u3044\u3093\u3057\u3087\u3046", "\u3044\u3093\u3088\u3046", "\u3046\u3048\u304D", "\u3046\u3048\u308B", "\u3046\u304A\u3056", "\u3046\u304C\u3044", "\u3046\u304B\u3076", "\u3046\u304B\u3079\u308B", "\u3046\u304D\u308F", "\u3046\u304F\u3089\u3044\u306A", "\u3046\u304F\u308C\u308C", "\u3046\u3051\u305F\u307E\u308F\u308B", "\u3046\u3051\u3064\u3051", "\u3046\u3051\u3068\u308B", "\u3046\u3051\u3082\u3064", "\u3046\u3051\u308B", "\u3046\u3054\u304B\u3059", "\u3046\u3054\u304F", "\u3046\u3053\u3093", "\u3046\u3055\u304E", "\u3046\u3057\u306A\u3046", "\u3046\u3057\u308D\u304C\u307F", "\u3046\u3059\u3044", "\u3046\u3059\u304E", "\u3046\u3059\u3050\u3089\u3044", "\u3046\u3059\u3081\u308B", "\u3046\u305B\u3064", "\u3046\u3061\u3042\u308F\u305B", "\u3046\u3061\u304C\u308F", "\u3046\u3061\u304D", "\u3046\u3061\u3085\u3046", "\u3046\u3063\u304B\u308A", "\u3046\u3064\u304F\u3057\u3044", "\u3046\u3063\u305F\u3048\u308B", "\u3046\u3064\u308B", "\u3046\u3069\u3093", "\u3046\u306A\u304E", "\u3046\u306A\u3058", "\u3046\u306A\u305A\u304F", "\u3046\u306A\u308B", "\u3046\u306D\u308B", "\u3046\u306E\u3046", "\u3046\u3076\u3052", "\u3046\u3076\u3054\u3048", "\u3046\u307E\u308C\u308B", "\u3046\u3081\u308B", "\u3046\u3082\u3046", "\u3046\u3084\u307E\u3046", "\u3046\u3088\u304F", "\u3046\u3089\u304C\u3048\u3059", "\u3046\u3089\u3050\u3061", "\u3046\u3089\u306A\u3044", "\u3046\u308A\u3042\u3052", "\u3046\u308A\u304D\u308C", "\u3046\u308B\u3055\u3044", "\u3046\u308C\u3057\u3044", "\u3046\u308C\u3086\u304D", "\u3046\u308C\u308B", "\u3046\u308D\u3053", "\u3046\u308F\u304D", "\u3046\u308F\u3055", "\u3046\u3093\u3053\u3046", "\u3046\u3093\u3061\u3093", "\u3046\u3093\u3066\u3093", "\u3046\u3093\u3069\u3046", "\u3048\u3044\u3048\u3093", "\u3048\u3044\u304C", "\u3048\u3044\u304D\u3087\u3046", "\u3048\u3044\u3054", "\u3048\u3044\u305B\u3044", "\u3048\u3044\u3076\u3093", "\u3048\u3044\u3088\u3046", "\u3048\u3044\u308F", "\u3048\u304A\u308A", "\u3048\u304C\u304A", "\u3048\u304C\u304F", "\u3048\u304D\u305F\u3044", "\u3048\u304F\u305B\u308B", "\u3048\u3057\u3083\u304F", "\u3048\u3059\u3066", "\u3048\u3064\u3089\u3093", "\u3048\u306E\u3050", "\u3048\u307B\u3046\u307E\u304D", "\u3048\u307B\u3093", "\u3048\u307E\u304D", "\u3048\u3082\u3058", "\u3048\u3082\u306E", "\u3048\u3089\u3044", "\u3048\u3089\u3076", "\u3048\u308A\u3042", "\u3048\u3093\u3048\u3093", "\u3048\u3093\u304B\u3044", "\u3048\u3093\u304E", "\u3048\u3093\u3052\u304D", "\u3048\u3093\u3057\u3085\u3046", "\u3048\u3093\u305C\u3064", "\u3048\u3093\u305D\u304F", "\u3048\u3093\u3061\u3087\u3046", "\u3048\u3093\u3068\u3064", "\u304A\u3044\u304B\u3051\u308B", "\u304A\u3044\u3053\u3059", "\u304A\u3044\u3057\u3044", "\u304A\u3044\u3064\u304F", "\u304A\u3046\u3048\u3093", "\u304A\u3046\u3055\u307E", "\u304A\u3046\u3058", "\u304A\u3046\u305B\u3064", "\u304A\u3046\u305F\u3044", "\u304A\u3046\u3075\u304F", "\u304A\u3046\u3079\u3044", "\u304A\u3046\u3088\u3046", "\u304A\u3048\u308B", "\u304A\u304A\u3044", "\u304A\u304A\u3046", "\u304A\u304A\u3069\u304A\u308A", "\u304A\u304A\u3084", "\u304A\u304A\u3088\u305D", "\u304A\u304B\u3048\u308A", "\u304A\u304B\u305A", "\u304A\u304C\u3080", "\u304A\u304B\u308F\u308A", "\u304A\u304E\u306A\u3046", "\u304A\u304D\u308B", "\u304A\u304F\u3055\u307E", "\u304A\u304F\u3058\u3087\u3046", "\u304A\u304F\u308A\u304C\u306A", "\u304A\u304F\u308B", "\u304A\u304F\u308C\u308B", "\u304A\u3053\u3059", "\u304A\u3053\u306A\u3046", "\u304A\u3053\u308B", "\u304A\u3055\u3048\u308B", "\u304A\u3055\u306A\u3044", "\u304A\u3055\u3081\u308B", "\u304A\u3057\u3044\u308C", "\u304A\u3057\u3048\u308B", "\u304A\u3058\u304E", "\u304A\u3058\u3055\u3093", "\u304A\u3057\u3083\u308C", "\u304A\u305D\u3089\u304F", "\u304A\u305D\u308F\u308B", "\u304A\u305F\u304C\u3044", "\u304A\u305F\u304F", "\u304A\u3060\u3084\u304B", "\u304A\u3061\u3064\u304F", "\u304A\u3063\u3068", "\u304A\u3064\u308A", "\u304A\u3067\u304B\u3051", "\u304A\u3068\u3057\u3082\u306E", "\u304A\u3068\u306A\u3057\u3044", "\u304A\u3069\u308A", "\u304A\u3069\u308D\u304B\u3059", "\u304A\u3070\u3055\u3093", "\u304A\u307E\u3044\u308A", "\u304A\u3081\u3067\u3068\u3046", "\u304A\u3082\u3044\u3067", "\u304A\u3082\u3046", "\u304A\u3082\u305F\u3044", "\u304A\u3082\u3061\u3083", "\u304A\u3084\u3064", "\u304A\u3084\u3086\u3073", "\u304A\u3088\u307C\u3059", "\u304A\u3089\u3093\u3060", "\u304A\u308D\u3059", "\u304A\u3093\u304C\u304F", "\u304A\u3093\u3051\u3044", "\u304A\u3093\u3057\u3083", "\u304A\u3093\u305B\u3093", "\u304A\u3093\u3060\u3093", "\u304A\u3093\u3061\u3085\u3046", "\u304A\u3093\u3069\u3051\u3044", "\u304B\u3042\u3064", "\u304B\u3044\u304C", "\u304C\u3044\u304D", "\u304C\u3044\u3051\u3093", "\u304C\u3044\u3053\u3046", "\u304B\u3044\u3055\u3064", "\u304B\u3044\u3057\u3083", "\u304B\u3044\u3059\u3044\u3088\u304F", "\u304B\u3044\u305C\u3093", "\u304B\u3044\u305E\u3046\u3069", "\u304B\u3044\u3064\u3046", "\u304B\u3044\u3066\u3093", "\u304B\u3044\u3068\u3046", "\u304B\u3044\u3075\u304F", "\u304C\u3044\u3078\u304D", "\u304B\u3044\u307B\u3046", "\u304B\u3044\u3088\u3046", "\u304C\u3044\u3089\u3044", "\u304B\u3044\u308F", "\u304B\u3048\u308B", "\u304B\u304A\u308A", "\u304B\u304B\u3048\u308B", "\u304B\u304C\u304F", "\u304B\u304C\u3057", "\u304B\u304C\u307F", "\u304B\u304F\u3054", "\u304B\u304F\u3068\u304F", "\u304B\u3056\u308B", "\u304C\u305E\u3046", "\u304B\u305F\u3044", "\u304B\u305F\u3061", "\u304C\u3061\u3087\u3046", "\u304C\u3063\u304D\u3085\u3046", "\u304C\u3063\u3053\u3046", "\u304C\u3063\u3055\u3093", "\u304C\u3063\u3057\u3087\u3046", "\u304B\u306A\u3056\u308F\u3057", "\u304B\u306E\u3046", "\u304C\u306F\u304F", "\u304B\u3076\u304B", "\u304B\u307B\u3046", "\u304B\u307B\u3054", "\u304B\u307E\u3046", "\u304B\u307E\u307C\u3053", "\u304B\u3081\u308C\u304A\u3093", "\u304B\u3086\u3044", "\u304B\u3088\u3046\u3073", "\u304B\u3089\u3044", "\u304B\u308B\u3044", "\u304B\u308D\u3046", "\u304B\u308F\u304F", "\u304B\u308F\u3089", "\u304C\u3093\u304B", "\u304B\u3093\u3051\u3044", "\u304B\u3093\u3053\u3046", "\u304B\u3093\u3057\u3083", "\u304B\u3093\u305D\u3046", "\u304B\u3093\u305F\u3093", "\u304B\u3093\u3061", "\u304C\u3093\u3070\u308B", "\u304D\u3042\u3044", "\u304D\u3042\u3064", "\u304D\u3044\u308D", "\u304E\u3044\u3093", "\u304D\u3046\u3044", "\u304D\u3046\u3093", "\u304D\u3048\u308B", "\u304D\u304A\u3046", "\u304D\u304A\u304F", "\u304D\u304A\u3061", "\u304D\u304A\u3093", "\u304D\u304B\u3044", "\u304D\u304B\u304F", "\u304D\u304B\u3093\u3057\u3083", "\u304D\u304D\u3066", "\u304D\u304F\u3070\u308A", "\u304D\u304F\u3089\u3052", "\u304D\u3051\u3093\u305B\u3044", "\u304D\u3053\u3046", "\u304D\u3053\u3048\u308B", "\u304D\u3053\u304F", "\u304D\u3055\u3044", "\u304D\u3055\u304F", "\u304D\u3055\u307E", "\u304D\u3055\u3089\u304E", "\u304E\u3058\u304B\u304C\u304F", "\u304E\u3057\u304D", "\u304E\u3058\u305F\u3044\u3051\u3093", "\u304E\u3058\u306B\u3063\u3066\u3044", "\u304E\u3058\u3085\u3064\u3057\u3083", "\u304D\u3059\u3046", "\u304D\u305B\u3044", "\u304D\u305B\u304D", "\u304D\u305B\u3064", "\u304D\u305D\u3046", "\u304D\u305E\u304F", "\u304D\u305E\u3093", "\u304D\u305F\u3048\u308B", "\u304D\u3061\u3087\u3046", "\u304D\u3064\u3048\u3093", "\u304E\u3063\u3061\u308A", "\u304D\u3064\u3064\u304D", "\u304D\u3064\u306D", "\u304D\u3066\u3044", "\u304D\u3069\u3046", "\u304D\u3069\u304F", "\u304D\u306A\u3044", "\u304D\u306A\u304C", "\u304D\u306A\u3053", "\u304D\u306C\u3054\u3057", "\u304D\u306D\u3093", "\u304D\u306E\u3046", "\u304D\u306E\u3057\u305F", "\u304D\u306F\u304F", "\u304D\u3073\u3057\u3044", "\u304D\u3072\u3093", "\u304D\u3075\u304F", "\u304D\u3076\u3093", "\u304D\u307C\u3046", "\u304D\u307B\u3093", "\u304D\u307E\u308B", "\u304D\u307F\u3064", "\u304D\u3080\u305A\u304B\u3057\u3044", "\u304D\u3081\u308B", "\u304D\u3082\u3060\u3081\u3057", "\u304D\u3082\u3061", "\u304D\u3082\u306E", "\u304D\u3083\u304F", "\u304D\u3084\u304F", "\u304E\u3085\u3046\u306B\u304F", "\u304D\u3088\u3046", "\u304D\u3087\u3046\u308A\u3085\u3046", "\u304D\u3089\u3044", "\u304D\u3089\u304F", "\u304D\u308A\u3093", "\u304D\u308C\u3044", "\u304D\u308C\u3064", "\u304D\u308D\u304F", "\u304E\u308D\u3093", "\u304D\u308F\u3081\u308B", "\u304E\u3093\u3044\u308D", "\u304D\u3093\u304B\u304F\u3058", "\u304D\u3093\u3058\u3087", "\u304D\u3093\u3088\u3046\u3073", "\u3050\u3042\u3044", "\u304F\u3044\u305A", "\u304F\u3046\u304B\u3093", "\u304F\u3046\u304D", "\u304F\u3046\u3050\u3093", "\u304F\u3046\u3053\u3046", "\u3050\u3046\u305B\u3044", "\u304F\u3046\u305D\u3046", "\u3050\u3046\u305F\u3089", "\u304F\u3046\u3075\u304F", "\u304F\u3046\u307C", "\u304F\u304B\u3093", "\u304F\u304D\u3087\u3046", "\u304F\u3052\u3093", "\u3050\u3053\u3046", "\u304F\u3055\u3044", "\u304F\u3055\u304D", "\u304F\u3055\u3070\u306A", "\u304F\u3055\u308B", "\u304F\u3057\u3083\u307F", "\u304F\u3057\u3087\u3046", "\u304F\u3059\u306E\u304D", "\u304F\u3059\u308A\u3086\u3073", "\u304F\u305B\u3052", "\u304F\u305B\u3093", "\u3050\u305F\u3044\u3066\u304D", "\u304F\u3060\u3055\u308B", "\u304F\u305F\u3073\u308C\u308B", "\u304F\u3061\u3053\u307F", "\u304F\u3061\u3055\u304D", "\u304F\u3064\u3057\u305F", "\u3050\u3063\u3059\u308A", "\u304F\u3064\u308D\u3050", "\u304F\u3068\u3046\u3066\u3093", "\u304F\u3069\u304F", "\u304F\u306A\u3093", "\u304F\u306D\u304F\u306D", "\u304F\u306E\u3046", "\u304F\u3075\u3046", "\u304F\u307F\u3042\u308F\u305B", "\u304F\u307F\u305F\u3066\u308B", "\u304F\u3081\u308B", "\u304F\u3084\u304F\u3057\u3087", "\u304F\u3089\u3059", "\u304F\u3089\u3079\u308B", "\u304F\u308B\u307E", "\u304F\u308C\u308B", "\u304F\u308D\u3046", "\u304F\u308F\u3057\u3044", "\u3050\u3093\u304B\u3093", "\u3050\u3093\u3057\u3087\u304F", "\u3050\u3093\u305F\u3044", "\u3050\u3093\u3066", "\u3051\u3042\u306A", "\u3051\u3044\u304B\u304F", "\u3051\u3044\u3051\u3093", "\u3051\u3044\u3053", "\u3051\u3044\u3055\u3064", "\u3052\u3044\u3058\u3085\u3064", "\u3051\u3044\u305F\u3044", "\u3052\u3044\u306E\u3046\u3058\u3093", "\u3051\u3044\u308C\u304D", "\u3051\u3044\u308D", "\u3051\u304A\u3068\u3059", "\u3051\u304A\u308A\u3082\u306E", "\u3052\u304D\u304B", "\u3052\u304D\u3052\u3093", "\u3052\u304D\u3060\u3093", "\u3052\u304D\u3061\u3093", "\u3052\u304D\u3068\u3064", "\u3052\u304D\u306F", "\u3052\u304D\u3084\u304F", "\u3052\u3053\u3046", "\u3052\u3053\u304F\u3058\u3087\u3046", "\u3052\u3056\u3044", "\u3051\u3055\u304D", "\u3052\u3056\u3093", "\u3051\u3057\u304D", "\u3051\u3057\u3054\u3080", "\u3051\u3057\u3087\u3046", "\u3052\u3059\u3068", "\u3051\u305F\u3070", "\u3051\u3061\u3083\u3063\u3077", "\u3051\u3061\u3089\u3059", "\u3051\u3064\u3042\u3064", "\u3051\u3064\u3044", "\u3051\u3064\u3048\u304D", "\u3051\u3063\u3053\u3093", "\u3051\u3064\u3058\u3087", "\u3051\u3063\u305B\u304D", "\u3051\u3063\u3066\u3044", "\u3051\u3064\u307E\u3064", "\u3052\u3064\u3088\u3046\u3073", "\u3052\u3064\u308C\u3044", "\u3051\u3064\u308D\u3093", "\u3052\u3069\u304F", "\u3051\u3068\u3070\u3059", "\u3051\u3068\u308B", "\u3051\u306A\u3052", "\u3051\u306A\u3059", "\u3051\u306A\u307F", "\u3051\u306C\u304D", "\u3052\u306D\u3064", "\u3051\u306D\u3093", "\u3051\u306F\u3044", "\u3052\u3072\u3093", "\u3051\u3076\u304B\u3044", "\u3052\u307C\u304F", "\u3051\u307E\u308A", "\u3051\u307F\u304B\u308B", "\u3051\u3080\u3057", "\u3051\u3080\u308A", "\u3051\u3082\u306E", "\u3051\u3089\u3044", "\u3051\u308D\u3051\u308D", "\u3051\u308F\u3057\u3044", "\u3051\u3093\u3044", "\u3051\u3093\u3048\u3064", "\u3051\u3093\u304A", "\u3051\u3093\u304B", "\u3052\u3093\u304D", "\u3051\u3093\u3052\u3093", "\u3051\u3093\u3053\u3046", "\u3051\u3093\u3055\u304F", "\u3051\u3093\u3057\u3085\u3046", "\u3051\u3093\u3059\u3046", "\u3052\u3093\u305D\u3046", "\u3051\u3093\u3061\u304F", "\u3051\u3093\u3066\u3044", "\u3051\u3093\u3068\u3046", "\u3051\u3093\u306A\u3044", "\u3051\u3093\u306B\u3093", "\u3052\u3093\u3076\u3064", "\u3051\u3093\u307E", "\u3051\u3093\u307F\u3093", "\u3051\u3093\u3081\u3044", "\u3051\u3093\u3089\u3093", "\u3051\u3093\u308A", "\u3053\u3042\u304F\u307E", "\u3053\u3044\u306C", "\u3053\u3044\u3073\u3068", "\u3054\u3046\u3044", "\u3053\u3046\u3048\u3093", "\u3053\u3046\u304A\u3093", "\u3053\u3046\u304B\u3093", "\u3054\u3046\u304D\u3085\u3046", "\u3054\u3046\u3051\u3044", "\u3053\u3046\u3053\u3046", "\u3053\u3046\u3055\u3044", "\u3053\u3046\u3058", "\u3053\u3046\u3059\u3044", "\u3054\u3046\u305B\u3044", "\u3053\u3046\u305D\u304F", "\u3053\u3046\u305F\u3044", "\u3053\u3046\u3061\u3083", "\u3053\u3046\u3064\u3046", "\u3053\u3046\u3066\u3044", "\u3053\u3046\u3069\u3046", "\u3053\u3046\u306A\u3044", "\u3053\u3046\u306F\u3044", "\u3054\u3046\u307B\u3046", "\u3054\u3046\u307E\u3093", "\u3053\u3046\u3082\u304F", "\u3053\u3046\u308A\u3064", "\u3053\u3048\u308B", "\u3053\u304A\u308A", "\u3054\u304B\u3044", "\u3054\u304C\u3064", "\u3054\u304B\u3093", "\u3053\u304F\u3054", "\u3053\u304F\u3055\u3044", "\u3053\u304F\u3068\u3046", "\u3053\u304F\u306A\u3044", "\u3053\u304F\u306F\u304F", "\u3053\u3050\u307E", "\u3053\u3051\u3044", "\u3053\u3051\u308B", "\u3053\u3053\u306E\u304B", "\u3053\u3053\u308D", "\u3053\u3055\u3081", "\u3053\u3057\u3064", "\u3053\u3059\u3046", "\u3053\u305B\u3044", "\u3053\u305B\u304D", "\u3053\u305C\u3093", "\u3053\u305D\u3060\u3066", "\u3053\u305F\u3044", "\u3053\u305F\u3048\u308B", "\u3053\u305F\u3064", "\u3053\u3061\u3087\u3046", "\u3053\u3063\u304B", "\u3053\u3064\u3053\u3064", "\u3053\u3064\u3070\u3093", "\u3053\u3064\u3076", "\u3053\u3066\u3044", "\u3053\u3066\u3093", "\u3053\u3068\u304C\u3089", "\u3053\u3068\u3057", "\u3053\u3068\u3070", "\u3053\u3068\u308A", "\u3053\u306A\u3054\u306A", "\u3053\u306D\u3053\u306D", "\u3053\u306E\u307E\u307E", "\u3053\u306E\u307F", "\u3053\u306E\u3088", "\u3054\u306F\u3093", "\u3053\u3072\u3064\u3058", "\u3053\u3075\u3046", "\u3053\u3075\u3093", "\u3053\u307C\u308C\u308B", "\u3054\u307E\u3042\u3076\u3089", "\u3053\u307E\u304B\u3044", "\u3054\u307E\u3059\u308A", "\u3053\u307E\u3064\u306A", "\u3053\u307E\u308B", "\u3053\u3080\u304E\u3053", "\u3053\u3082\u3058", "\u3053\u3082\u3061", "\u3053\u3082\u306E", "\u3053\u3082\u3093", "\u3053\u3084\u304F", "\u3053\u3084\u307E", "\u3053\u3086\u3046", "\u3053\u3086\u3073", "\u3053\u3088\u3044", "\u3053\u3088\u3046", "\u3053\u308A\u308B", "\u3053\u308C\u304F\u3057\u3087\u3093", "\u3053\u308D\u3063\u3051", "\u3053\u308F\u3082\u3066", "\u3053\u308F\u308C\u308B", "\u3053\u3093\u3044\u3093", "\u3053\u3093\u304B\u3044", "\u3053\u3093\u304D", "\u3053\u3093\u3057\u3085\u3046", "\u3053\u3093\u3059\u3044", "\u3053\u3093\u3060\u3066", "\u3053\u3093\u3068\u3093", "\u3053\u3093\u306A\u3093", "\u3053\u3093\u3073\u306B", "\u3053\u3093\u307D\u3093", "\u3053\u3093\u307E\u3051", "\u3053\u3093\u3084", "\u3053\u3093\u308C\u3044", "\u3053\u3093\u308F\u304F", "\u3056\u3044\u3048\u304D", "\u3055\u3044\u304B\u3044", "\u3055\u3044\u304D\u3093", "\u3056\u3044\u3052\u3093", "\u3056\u3044\u3053", "\u3055\u3044\u3057\u3087", "\u3055\u3044\u305B\u3044", "\u3056\u3044\u305F\u304F", "\u3056\u3044\u3061\u3085\u3046", "\u3055\u3044\u3066\u304D", "\u3056\u3044\u308A\u3087\u3046", "\u3055\u3046\u306A", "\u3055\u304B\u3044\u3057", "\u3055\u304C\u3059", "\u3055\u304B\u306A", "\u3055\u304B\u307F\u3061", "\u3055\u304C\u308B", "\u3055\u304E\u3087\u3046", "\u3055\u304F\u3057", "\u3055\u304F\u3072\u3093", "\u3055\u304F\u3089", "\u3055\u3053\u304F", "\u3055\u3053\u3064", "\u3055\u305A\u304B\u308B", "\u3056\u305B\u304D", "\u3055\u305F\u3093", "\u3055\u3064\u3048\u3044", "\u3056\u3064\u304A\u3093", "\u3056\u3063\u304B", "\u3056\u3064\u304C\u304F", "\u3055\u3063\u304D\u3087\u304F", "\u3056\u3063\u3057", "\u3055\u3064\u3058\u3093", "\u3056\u3063\u305D\u3046", "\u3055\u3064\u305F\u3070", "\u3055\u3064\u307E\u3044\u3082", "\u3055\u3066\u3044", "\u3055\u3068\u3044\u3082", "\u3055\u3068\u3046", "\u3055\u3068\u304A\u3084", "\u3055\u3068\u3057", "\u3055\u3068\u308B", "\u3055\u306E\u3046", "\u3055\u3070\u304F", "\u3055\u3073\u3057\u3044", "\u3055\u3079\u3064", "\u3055\u307B\u3046", "\u3055\u307B\u3069", "\u3055\u307E\u3059", "\u3055\u307F\u3057\u3044", "\u3055\u307F\u3060\u308C", "\u3055\u3080\u3051", "\u3055\u3081\u308B", "\u3055\u3084\u3048\u3093\u3069\u3046", "\u3055\u3086\u3046", "\u3055\u3088\u3046", "\u3055\u3088\u304F", "\u3055\u3089\u3060", "\u3056\u308B\u305D\u3070", "\u3055\u308F\u3084\u304B", "\u3055\u308F\u308B", "\u3055\u3093\u3044\u3093", "\u3055\u3093\u304B", "\u3055\u3093\u304D\u3083\u304F", "\u3055\u3093\u3053\u3046", "\u3055\u3093\u3055\u3044", "\u3056\u3093\u3057\u3087", "\u3055\u3093\u3059\u3046", "\u3055\u3093\u305B\u3044", "\u3055\u3093\u305D", "\u3055\u3093\u3061", "\u3055\u3093\u307E", "\u3055\u3093\u307F", "\u3055\u3093\u3089\u3093", "\u3057\u3042\u3044", "\u3057\u3042\u3052", "\u3057\u3042\u3055\u3063\u3066", "\u3057\u3042\u308F\u305B", "\u3057\u3044\u304F", "\u3057\u3044\u3093", "\u3057\u3046\u3061", "\u3057\u3048\u3044", "\u3057\u304A\u3051", "\u3057\u304B\u3044", "\u3057\u304B\u304F", "\u3058\u304B\u3093", "\u3057\u3054\u3068", "\u3057\u3059\u3046", "\u3058\u3060\u3044", "\u3057\u305F\u3046\u3051", "\u3057\u305F\u304E", "\u3057\u305F\u3066", "\u3057\u305F\u307F", "\u3057\u3061\u3087\u3046", "\u3057\u3061\u308A\u3093", "\u3057\u3063\u304B\u308A", "\u3057\u3064\u3058", "\u3057\u3064\u3082\u3093", "\u3057\u3066\u3044", "\u3057\u3066\u304D", "\u3057\u3066\u3064", "\u3058\u3066\u3093", "\u3058\u3069\u3046", "\u3057\u306A\u304E\u308C", "\u3057\u306A\u3082\u306E", "\u3057\u306A\u3093", "\u3057\u306D\u307E", "\u3057\u306D\u3093", "\u3057\u306E\u3050", "\u3057\u306E\u3076", "\u3057\u306F\u3044", "\u3057\u3070\u304B\u308A", "\u3057\u306F\u3064", "\u3057\u306F\u3089\u3044", "\u3057\u306F\u3093", "\u3057\u3072\u3087\u3046", "\u3057\u3075\u304F", "\u3058\u3076\u3093", "\u3057\u3078\u3044", "\u3057\u307B\u3046", "\u3057\u307B\u3093", "\u3057\u307E\u3046", "\u3057\u307E\u308B", "\u3057\u307F\u3093", "\u3057\u3080\u3051\u308B", "\u3058\u3080\u3057\u3087", "\u3057\u3081\u3044", "\u3057\u3081\u308B", "\u3057\u3082\u3093", "\u3057\u3083\u3044\u3093", "\u3057\u3083\u3046\u3093", "\u3057\u3083\u304A\u3093", "\u3058\u3083\u304C\u3044\u3082", "\u3057\u3084\u304F\u3057\u3087", "\u3057\u3083\u304F\u307B\u3046", "\u3057\u3083\u3051\u3093", "\u3057\u3083\u3053", "\u3057\u3083\u3056\u3044", "\u3057\u3083\u3057\u3093", "\u3057\u3083\u305B\u3093", "\u3057\u3083\u305D\u3046", "\u3057\u3083\u305F\u3044", "\u3057\u3083\u3061\u3087\u3046", "\u3057\u3083\u3063\u304D\u3093", "\u3058\u3083\u307E", "\u3057\u3083\u308A\u3093", "\u3057\u3083\u308C\u3044", "\u3058\u3086\u3046", "\u3058\u3085\u3046\u3057\u3087", "\u3057\u3085\u304F\u306F\u304F", "\u3058\u3085\u3057\u3093", "\u3057\u3085\u3063\u305B\u304D", "\u3057\u3085\u307F", "\u3057\u3085\u3089\u3070", "\u3058\u3085\u3093\u3070\u3093", "\u3057\u3087\u3046\u304B\u3044", "\u3057\u3087\u304F\u305F\u304F", "\u3057\u3087\u3063\u3051\u3093", "\u3057\u3087\u3069\u3046", "\u3057\u3087\u3082\u3064", "\u3057\u3089\u305B\u308B", "\u3057\u3089\u3079\u308B", "\u3057\u3093\u304B", "\u3057\u3093\u3053\u3046", "\u3058\u3093\u3058\u3083", "\u3057\u3093\u305B\u3044\u3058", "\u3057\u3093\u3061\u304F", "\u3057\u3093\u308A\u3093", "\u3059\u3042\u3052", "\u3059\u3042\u3057", "\u3059\u3042\u306A", "\u305A\u3042\u3093", "\u3059\u3044\u3048\u3044", "\u3059\u3044\u304B", "\u3059\u3044\u3068\u3046", "\u305A\u3044\u3076\u3093", "\u3059\u3044\u3088\u3046\u3073", "\u3059\u3046\u304C\u304F", "\u3059\u3046\u3058\u3064", "\u3059\u3046\u305B\u3093", "\u3059\u304A\u3069\u308A", "\u3059\u304D\u307E", "\u3059\u304F\u3046", "\u3059\u304F\u306A\u3044", "\u3059\u3051\u308B", "\u3059\u3054\u3044", "\u3059\u3053\u3057", "\u305A\u3055\u3093", "\u3059\u305A\u3057\u3044", "\u3059\u3059\u3080", "\u3059\u3059\u3081\u308B", "\u3059\u3063\u304B\u308A", "\u305A\u3063\u3057\u308A", "\u305A\u3063\u3068", "\u3059\u3066\u304D", "\u3059\u3066\u308B", "\u3059\u306D\u308B", "\u3059\u306E\u3053", "\u3059\u306F\u3060", "\u3059\u3070\u3089\u3057\u3044", "\u305A\u3072\u3087\u3046", "\u305A\u3076\u306C\u308C", "\u3059\u3076\u308A", "\u3059\u3075\u308C", "\u3059\u3079\u3066", "\u3059\u3079\u308B", "\u305A\u307B\u3046", "\u3059\u307C\u3093", "\u3059\u307E\u3044", "\u3059\u3081\u3057", "\u3059\u3082\u3046", "\u3059\u3084\u304D", "\u3059\u3089\u3059\u3089", "\u3059\u308B\u3081", "\u3059\u308C\u3061\u304C\u3046", "\u3059\u308D\u3063\u3068", "\u3059\u308F\u308B", "\u3059\u3093\u305C\u3093", "\u3059\u3093\u307D\u3046", "\u305B\u3042\u3076\u3089", "\u305B\u3044\u304B\u3064", "\u305B\u3044\u3052\u3093", "\u305B\u3044\u3058", "\u305B\u3044\u3088\u3046", "\u305B\u304A\u3046", "\u305B\u304B\u3044\u304B\u3093", "\u305B\u304D\u306B\u3093", "\u305B\u304D\u3080", "\u305B\u304D\u3086", "\u305B\u304D\u3089\u3093\u3046\u3093", "\u305B\u3051\u3093", "\u305B\u3053\u3046", "\u305B\u3059\u3058", "\u305B\u305F\u3044", "\u305B\u305F\u3051", "\u305B\u3063\u304B\u304F", "\u305B\u3063\u304D\u3083\u304F", "\u305C\u3063\u304F", "\u305B\u3063\u3051\u3093", "\u305B\u3063\u3053\u3064", "\u305B\u3063\u3055\u305F\u304F\u307E", "\u305B\u3064\u305E\u304F", "\u305B\u3064\u3060\u3093", "\u305B\u3064\u3067\u3093", "\u305B\u3063\u3071\u3093", "\u305B\u3064\u3073", "\u305B\u3064\u3076\u3093", "\u305B\u3064\u3081\u3044", "\u305B\u3064\u308A\u3064", "\u305B\u306A\u304B", "\u305B\u306E\u3073", "\u305B\u306F\u3070", "\u305B\u3073\u308D", "\u305B\u307C\u306D", "\u305B\u307E\u3044", "\u305B\u307E\u308B", "\u305B\u3081\u308B", "\u305B\u3082\u305F\u308C", "\u305B\u308A\u3075", "\u305C\u3093\u3042\u304F", "\u305B\u3093\u3044", "\u305B\u3093\u3048\u3044", "\u305B\u3093\u304B", "\u305B\u3093\u304D\u3087", "\u305B\u3093\u304F", "\u305B\u3093\u3052\u3093", "\u305C\u3093\u3054", "\u305B\u3093\u3055\u3044", "\u305B\u3093\u3057\u3085", "\u305B\u3093\u3059\u3044", "\u305B\u3093\u305B\u3044", "\u305B\u3093\u305E", "\u305B\u3093\u305F\u304F", "\u305B\u3093\u3061\u3087\u3046", "\u305B\u3093\u3066\u3044", "\u305B\u3093\u3068\u3046", "\u305B\u3093\u306C\u304D", "\u305B\u3093\u306D\u3093", "\u305B\u3093\u3071\u3044", "\u305C\u3093\u3076", "\u305C\u3093\u307D\u3046", "\u305B\u3093\u3080", "\u305B\u3093\u3081\u3093\u3058\u3087", "\u305B\u3093\u3082\u3093", "\u305B\u3093\u3084\u304F", "\u305B\u3093\u3086\u3046", "\u305B\u3093\u3088\u3046", "\u305C\u3093\u3089", "\u305C\u3093\u308A\u3083\u304F", "\u305B\u3093\u308C\u3044", "\u305B\u3093\u308D", "\u305D\u3042\u304F", "\u305D\u3044\u3068\u3052\u308B", "\u305D\u3044\u306D", "\u305D\u3046\u304C\u3093\u304D\u3087\u3046", "\u305D\u3046\u304D", "\u305D\u3046\u3054", "\u305D\u3046\u3057\u3093", "\u305D\u3046\u3060\u3093", "\u305D\u3046\u306A\u3093", "\u305D\u3046\u3073", "\u305D\u3046\u3081\u3093", "\u305D\u3046\u308A", "\u305D\u3048\u3082\u306E", "\u305D\u3048\u3093", "\u305D\u304C\u3044", "\u305D\u3052\u304D", "\u305D\u3053\u3046", "\u305D\u3053\u305D\u3053", "\u305D\u3056\u3044", "\u305D\u3057\u306A", "\u305D\u305B\u3044", "\u305D\u305B\u3093", "\u305D\u305D\u3050", "\u305D\u3060\u3066\u308B", "\u305D\u3064\u3046", "\u305D\u3064\u3048\u3093", "\u305D\u3063\u304B\u3093", "\u305D\u3064\u304E\u3087\u3046", "\u305D\u3063\u3051\u3064", "\u305D\u3063\u3053\u3046", "\u305D\u3063\u305B\u3093", "\u305D\u3063\u3068", "\u305D\u3068\u304C\u308F", "\u305D\u3068\u3065\u3089", "\u305D\u306A\u3048\u308B", "\u305D\u306A\u305F", "\u305D\u3075\u307C", "\u305D\u307C\u304F", "\u305D\u307C\u308D", "\u305D\u307E\u3064", "\u305D\u307E\u308B", "\u305D\u3080\u304F", "\u305D\u3080\u308A\u3048", "\u305D\u3081\u308B", "\u305D\u3082\u305D\u3082", "\u305D\u3088\u304B\u305C", "\u305D\u3089\u307E\u3081", "\u305D\u308D\u3046", "\u305D\u3093\u304B\u3044", "\u305D\u3093\u3051\u3044", "\u305D\u3093\u3056\u3044", "\u305D\u3093\u3057\u3064", "\u305D\u3093\u305E\u304F", "\u305D\u3093\u3061\u3087\u3046", "\u305E\u3093\u3073", "\u305E\u3093\u3076\u3093", "\u305D\u3093\u307F\u3093", "\u305F\u3042\u3044", "\u305F\u3044\u3044\u3093", "\u305F\u3044\u3046\u3093", "\u305F\u3044\u3048\u304D", "\u305F\u3044\u304A\u3046", "\u3060\u3044\u304C\u304F", "\u305F\u3044\u304D", "\u305F\u3044\u3050\u3046", "\u305F\u3044\u3051\u3093", "\u305F\u3044\u3053", "\u305F\u3044\u3056\u3044", "\u3060\u3044\u3058\u3087\u3046\u3076", "\u3060\u3044\u3059\u304D", "\u305F\u3044\u305B\u3064", "\u305F\u3044\u305D\u3046", "\u3060\u3044\u305F\u3044", "\u305F\u3044\u3061\u3087\u3046", "\u305F\u3044\u3066\u3044", "\u3060\u3044\u3069\u3053\u308D", "\u305F\u3044\u306A\u3044", "\u305F\u3044\u306D\u3064", "\u305F\u3044\u306E\u3046", "\u305F\u3044\u306F\u3093", "\u3060\u3044\u3072\u3087\u3046", "\u305F\u3044\u3075\u3046", "\u305F\u3044\u3078\u3093", "\u305F\u3044\u307B", "\u305F\u3044\u307E\u3064\u3070\u306A", "\u305F\u3044\u307F\u3093\u3050", "\u305F\u3044\u3080", "\u305F\u3044\u3081\u3093", "\u305F\u3044\u3084\u304D", "\u305F\u3044\u3088\u3046", "\u305F\u3044\u3089", "\u305F\u3044\u308A\u3087\u304F", "\u305F\u3044\u308B", "\u305F\u3044\u308F\u3093", "\u305F\u3046\u3048", "\u305F\u3048\u308B", "\u305F\u304A\u3059", "\u305F\u304A\u308B", "\u305F\u304A\u308C\u308B", "\u305F\u304B\u3044", "\u305F\u304B\u306D", "\u305F\u304D\u3073", "\u305F\u304F\u3055\u3093", "\u305F\u3053\u304F", "\u305F\u3053\u3084\u304D", "\u305F\u3055\u3044", "\u305F\u3057\u3056\u3093", "\u3060\u3058\u3083\u308C", "\u305F\u3059\u3051\u308B", "\u305F\u305A\u3055\u308F\u308B", "\u305F\u305D\u304C\u308C", "\u305F\u305F\u304B\u3046", "\u305F\u305F\u304F", "\u305F\u3060\u3057\u3044", "\u305F\u305F\u307F", "\u305F\u3061\u3070\u306A", "\u3060\u3063\u304B\u3044", "\u3060\u3063\u304D\u3083\u304F", "\u3060\u3063\u3053", "\u3060\u3063\u3057\u3085\u3064", "\u3060\u3063\u305F\u3044", "\u305F\u3066\u308B", "\u305F\u3068\u3048\u308B", "\u305F\u306A\u3070\u305F", "\u305F\u306B\u3093", "\u305F\u306C\u304D", "\u305F\u306E\u3057\u307F", "\u305F\u306F\u3064", "\u305F\u3076\u3093", "\u305F\u3079\u308B", "\u305F\u307C\u3046", "\u305F\u307E\u3054", "\u305F\u307E\u308B", "\u3060\u3080\u308B", "\u305F\u3081\u3044\u304D", "\u305F\u3081\u3059", "\u305F\u3081\u308B", "\u305F\u3082\u3064", "\u305F\u3084\u3059\u3044", "\u305F\u3088\u308B", "\u305F\u3089\u3059", "\u305F\u308A\u304D\u307B\u3093\u304C\u3093", "\u305F\u308A\u3087\u3046", "\u305F\u308A\u308B", "\u305F\u308B\u3068", "\u305F\u308C\u308B", "\u305F\u308C\u3093\u3068", "\u305F\u308D\u3063\u3068", "\u305F\u308F\u3080\u308C\u308B", "\u3060\u3093\u3042\u3064", "\u305F\u3093\u3044", "\u305F\u3093\u304A\u3093", "\u305F\u3093\u304B", "\u305F\u3093\u304D", "\u305F\u3093\u3051\u3093", "\u305F\u3093\u3054", "\u305F\u3093\u3055\u3093", "\u305F\u3093\u3058\u3087\u3046\u3073", "\u3060\u3093\u305B\u3044", "\u305F\u3093\u305D\u304F", "\u305F\u3093\u305F\u3044", "\u3060\u3093\u3061", "\u305F\u3093\u3066\u3044", "\u305F\u3093\u3068\u3046", "\u3060\u3093\u306A", "\u305F\u3093\u306B\u3093", "\u3060\u3093\u306D\u3064", "\u305F\u3093\u306E\u3046", "\u305F\u3093\u3074\u3093", "\u3060\u3093\u307C\u3046", "\u305F\u3093\u307E\u3064", "\u305F\u3093\u3081\u3044", "\u3060\u3093\u308C\u3064", "\u3060\u3093\u308D", "\u3060\u3093\u308F", "\u3061\u3042\u3044", "\u3061\u3042\u3093", "\u3061\u3044\u304D", "\u3061\u3044\u3055\u3044", "\u3061\u3048\u3093", "\u3061\u304B\u3044", "\u3061\u304B\u3089", "\u3061\u304D\u3085\u3046", "\u3061\u304D\u3093", "\u3061\u3051\u3044\u305A", "\u3061\u3051\u3093", "\u3061\u3053\u304F", "\u3061\u3055\u3044", "\u3061\u3057\u304D", "\u3061\u3057\u308A\u3087\u3046", "\u3061\u305B\u3044", "\u3061\u305D\u3046", "\u3061\u305F\u3044", "\u3061\u305F\u3093", "\u3061\u3061\u304A\u3084", "\u3061\u3064\u3058\u3087", "\u3061\u3066\u304D", "\u3061\u3066\u3093", "\u3061\u306C\u304D", "\u3061\u306C\u308A", "\u3061\u306E\u3046", "\u3061\u3072\u3087\u3046", "\u3061\u3078\u3044\u305B\u3093", "\u3061\u307B\u3046", "\u3061\u307E\u305F", "\u3061\u307F\u3064", "\u3061\u307F\u3069\u308D", "\u3061\u3081\u3044\u3069", "\u3061\u3083\u3093\u3053\u306A\u3079", "\u3061\u3085\u3046\u3044", "\u3061\u3086\u308A\u3087\u304F", "\u3061\u3087\u3046\u3057", "\u3061\u3087\u3055\u304F\u3051\u3093", "\u3061\u3089\u3057", "\u3061\u3089\u307F", "\u3061\u308A\u304C\u307F", "\u3061\u308A\u3087\u3046", "\u3061\u308B\u3069", "\u3061\u308F\u308F", "\u3061\u3093\u305F\u3044", "\u3061\u3093\u3082\u304F", "\u3064\u3044\u304B", "\u3064\u3044\u305F\u3061", "\u3064\u3046\u304B", "\u3064\u3046\u3058\u3087\u3046", "\u3064\u3046\u306F\u3093", "\u3064\u3046\u308F", "\u3064\u304B\u3046", "\u3064\u304B\u308C\u308B", "\u3064\u304F\u306D", "\u3064\u304F\u308B", "\u3064\u3051\u306D", "\u3064\u3051\u308B", "\u3064\u3054\u3046", "\u3064\u305F\u3048\u308B", "\u3064\u3065\u304F", "\u3064\u3064\u3058", "\u3064\u3064\u3080", "\u3064\u3068\u3081\u308B", "\u3064\u306A\u304C\u308B", "\u3064\u306A\u307F", "\u3064\u306D\u3065\u306D", "\u3064\u306E\u308B", "\u3064\u3076\u3059", "\u3064\u307E\u3089\u306A\u3044", "\u3064\u307E\u308B", "\u3064\u307F\u304D", "\u3064\u3081\u305F\u3044", "\u3064\u3082\u308A", "\u3064\u3082\u308B", "\u3064\u3088\u3044", "\u3064\u308B\u307C", "\u3064\u308B\u307F\u304F", "\u3064\u308F\u3082\u306E", "\u3064\u308F\u308A", "\u3066\u3042\u3057", "\u3066\u3042\u3066", "\u3066\u3042\u307F", "\u3066\u3044\u304A\u3093", "\u3066\u3044\u304B", "\u3066\u3044\u304D", "\u3066\u3044\u3051\u3044", "\u3066\u3044\u3053\u304F", "\u3066\u3044\u3055\u3064", "\u3066\u3044\u3057", "\u3066\u3044\u305B\u3044", "\u3066\u3044\u305F\u3044", "\u3066\u3044\u3069", "\u3066\u3044\u306D\u3044", "\u3066\u3044\u3072\u3087\u3046", "\u3066\u3044\u3078\u3093", "\u3066\u3044\u307C\u3046", "\u3066\u3046\u3061", "\u3066\u304A\u304F\u308C", "\u3066\u304D\u3068\u3046", "\u3066\u304F\u3073", "\u3067\u3053\u307C\u3053", "\u3066\u3055\u304E\u3087\u3046", "\u3066\u3055\u3052", "\u3066\u3059\u308A", "\u3066\u305D\u3046", "\u3066\u3061\u304C\u3044", "\u3066\u3061\u3087\u3046", "\u3066\u3064\u304C\u304F", "\u3066\u3064\u3065\u304D", "\u3067\u3063\u3071", "\u3066\u3064\u307C\u3046", "\u3066\u3064\u3084", "\u3067\u306C\u304B\u3048", "\u3066\u306C\u304D", "\u3066\u306C\u3050\u3044", "\u3066\u306E\u3072\u3089", "\u3066\u306F\u3044", "\u3066\u3076\u304F\u308D", "\u3066\u3075\u3060", "\u3066\u307B\u3069\u304D", "\u3066\u307B\u3093", "\u3066\u307E\u3048", "\u3066\u307E\u304D\u305A\u3057", "\u3066\u307F\u3058\u304B", "\u3066\u307F\u3084\u3052", "\u3066\u3089\u3059", "\u3066\u308C\u3073", "\u3066\u308F\u3051", "\u3066\u308F\u305F\u3057", "\u3067\u3093\u3042\u3064", "\u3066\u3093\u3044\u3093", "\u3066\u3093\u304B\u3044", "\u3066\u3093\u304D", "\u3066\u3093\u3050", "\u3066\u3093\u3051\u3093", "\u3066\u3093\u3054\u304F", "\u3066\u3093\u3055\u3044", "\u3066\u3093\u3057", "\u3066\u3093\u3059\u3046", "\u3067\u3093\u3061", "\u3066\u3093\u3066\u304D", "\u3066\u3093\u3068\u3046", "\u3066\u3093\u306A\u3044", "\u3066\u3093\u3077\u3089", "\u3066\u3093\u307C\u3046\u3060\u3044", "\u3066\u3093\u3081\u3064", "\u3066\u3093\u3089\u3093\u304B\u3044", "\u3067\u3093\u308A\u3087\u304F", "\u3067\u3093\u308F", "\u3069\u3042\u3044", "\u3068\u3044\u308C", "\u3069\u3046\u304B\u3093", "\u3068\u3046\u304D\u3085\u3046", "\u3069\u3046\u3050", "\u3068\u3046\u3057", "\u3068\u3046\u3080\u304E", "\u3068\u304A\u3044", "\u3068\u304A\u304B", "\u3068\u304A\u304F", "\u3068\u304A\u3059", "\u3068\u304A\u308B", "\u3068\u304B\u3044", "\u3068\u304B\u3059", "\u3068\u304D\u304A\u308A", "\u3068\u304D\u3069\u304D", "\u3068\u304F\u3044", "\u3068\u304F\u3057\u3085\u3046", "\u3068\u304F\u3066\u3093", "\u3068\u304F\u306B", "\u3068\u304F\u3079\u3064", "\u3068\u3051\u3044", "\u3068\u3051\u308B", "\u3068\u3053\u3084", "\u3068\u3055\u304B", "\u3068\u3057\u3087\u304B\u3093", "\u3068\u305D\u3046", "\u3068\u305F\u3093", "\u3068\u3061\u3085\u3046", "\u3068\u3063\u304D\u3085\u3046", "\u3068\u3063\u304F\u3093", "\u3068\u3064\u305C\u3093", "\u3068\u3064\u306B\u3085\u3046", "\u3068\u3069\u3051\u308B", "\u3068\u3068\u306E\u3048\u308B", "\u3068\u306A\u3044", "\u3068\u306A\u3048\u308B", "\u3068\u306A\u308A", "\u3068\u306E\u3055\u307E", "\u3068\u3070\u3059", "\u3069\u3076\u304C\u308F", "\u3068\u307B\u3046", "\u3068\u307E\u308B", "\u3068\u3081\u308B", "\u3068\u3082\u3060\u3061", "\u3068\u3082\u308B", "\u3069\u3088\u3046\u3073", "\u3068\u3089\u3048\u308B", "\u3068\u3093\u304B\u3064", "\u3069\u3093\u3076\u308A", "\u306A\u3044\u304B\u304F", "\u306A\u3044\u3053\u3046", "\u306A\u3044\u3057\u3087", "\u306A\u3044\u3059", "\u306A\u3044\u305B\u3093", "\u306A\u3044\u305D\u3046", "\u306A\u304A\u3059", "\u306A\u304C\u3044", "\u306A\u304F\u3059", "\u306A\u3052\u308B", "\u306A\u3053\u3046\u3069", "\u306A\u3055\u3051", "\u306A\u305F\u3067\u3053\u3053", "\u306A\u3063\u3068\u3046", "\u306A\u3064\u3084\u3059\u307F", "\u306A\u306A\u304A\u3057", "\u306A\u306B\u3054\u3068", "\u306A\u306B\u3082\u306E", "\u306A\u306B\u308F", "\u306A\u306E\u304B", "\u306A\u3075\u3060", "\u306A\u307E\u3044\u304D", "\u306A\u307E\u3048", "\u306A\u307E\u307F", "\u306A\u307F\u3060", "\u306A\u3081\u3089\u304B", "\u306A\u3081\u308B", "\u306A\u3084\u3080", "\u306A\u3089\u3046", "\u306A\u3089\u3073", "\u306A\u3089\u3076", "\u306A\u308C\u308B", "\u306A\u308F\u3068\u3073", "\u306A\u308F\u3070\u308A", "\u306B\u3042\u3046", "\u306B\u3044\u304C\u305F", "\u306B\u3046\u3051", "\u306B\u304A\u3044", "\u306B\u304B\u3044", "\u306B\u304C\u3066", "\u306B\u304D\u3073", "\u306B\u304F\u3057\u307F", "\u306B\u304F\u307E\u3093", "\u306B\u3052\u308B", "\u306B\u3055\u3093\u304B\u305F\u3093\u305D", "\u306B\u3057\u304D", "\u306B\u305B\u3082\u306E", "\u306B\u3061\u3058\u3087\u3046", "\u306B\u3061\u3088\u3046\u3073", "\u306B\u3063\u304B", "\u306B\u3063\u304D", "\u306B\u3063\u3051\u3044", "\u306B\u3063\u3053\u3046", "\u306B\u3063\u3055\u3093", "\u306B\u3063\u3057\u3087\u304F", "\u306B\u3063\u3059\u3046", "\u306B\u3063\u305B\u304D", "\u306B\u3063\u3066\u3044", "\u306B\u306A\u3046", "\u306B\u307B\u3093", "\u306B\u307E\u3081", "\u306B\u3082\u3064", "\u306B\u3084\u308A", "\u306B\u3085\u3046\u3044\u3093", "\u306B\u308A\u3093\u3057\u3083", "\u306B\u308F\u3068\u308A", "\u306B\u3093\u3044", "\u306B\u3093\u304B", "\u306B\u3093\u304D", "\u306B\u3093\u3052\u3093", "\u306B\u3093\u3057\u304D", "\u306B\u3093\u305A\u3046", "\u306B\u3093\u305D\u3046", "\u306B\u3093\u305F\u3044", "\u306B\u3093\u3061", "\u306B\u3093\u3066\u3044", "\u306B\u3093\u306B\u304F", "\u306B\u3093\u3077", "\u306B\u3093\u307E\u308A", "\u306B\u3093\u3080", "\u306B\u3093\u3081\u3044", "\u306B\u3093\u3088\u3046", "\u306C\u3044\u304F\u304E", "\u306C\u304B\u3059", "\u306C\u3050\u3044\u3068\u308B", "\u306C\u3050\u3046", "\u306C\u304F\u3082\u308A", "\u306C\u3059\u3080", "\u306C\u307E\u3048\u3073", "\u306C\u3081\u308A", "\u306C\u3089\u3059", "\u306C\u3093\u3061\u3083\u304F", "\u306D\u3042\u3052", "\u306D\u3044\u304D", "\u306D\u3044\u308B", "\u306D\u3044\u308D", "\u306D\u3050\u305B", "\u306D\u304F\u305F\u3044", "\u306D\u304F\u3089", "\u306D\u3053\u305C", "\u306D\u3053\u3080", "\u306D\u3055\u3052", "\u306D\u3059\u3054\u3059", "\u306D\u305D\u3079\u308B", "\u306D\u3060\u3093", "\u306D\u3064\u3044", "\u306D\u3063\u3057\u3093", "\u306D\u3064\u305E\u3046", "\u306D\u3063\u305F\u3044\u304E\u3087", "\u306D\u3076\u305D\u304F", "\u306D\u3075\u3060", "\u306D\u307C\u3046", "\u306D\u307B\u308A\u306F\u307B\u308A", "\u306D\u307E\u304D", "\u306D\u307E\u308F\u3057", "\u306D\u307F\u307F", "\u306D\u3080\u3044", "\u306D\u3080\u305F\u3044", "\u306D\u3082\u3068", "\u306D\u3089\u3046", "\u306D\u308F\u3056", "\u306D\u3093\u3044\u308A", "\u306D\u3093\u304A\u3057", "\u306D\u3093\u304B\u3093", "\u306D\u3093\u304D\u3093", "\u306D\u3093\u3050", "\u306D\u3093\u3056", "\u306D\u3093\u3057", "\u306D\u3093\u3061\u3083\u304F", "\u306D\u3093\u3069", "\u306D\u3093\u3074", "\u306D\u3093\u3076\u3064", "\u306D\u3093\u307E\u3064", "\u306D\u3093\u308A\u3087\u3046", "\u306D\u3093\u308C\u3044", "\u306E\u3044\u305A", "\u306E\u304A\u3065\u307E", "\u306E\u304C\u3059", "\u306E\u304D\u306A\u307F", "\u306E\u3053\u304E\u308A", "\u306E\u3053\u3059", "\u306E\u3053\u308B", "\u306E\u305B\u308B", "\u306E\u305E\u304F", "\u306E\u305E\u3080", "\u306E\u305F\u307E\u3046", "\u306E\u3061\u307B\u3069", "\u306E\u3063\u304F", "\u306E\u3070\u3059", "\u306E\u306F\u3089", "\u306E\u3079\u308B", "\u306E\u307C\u308B", "\u306E\u307F\u3082\u306E", "\u306E\u3084\u307E", "\u306E\u3089\u3044\u306C", "\u306E\u3089\u306D\u3053", "\u306E\u308A\u3082\u306E", "\u306E\u308A\u3086\u304D", "\u306E\u308C\u3093", "\u306E\u3093\u304D", "\u3070\u3042\u3044", "\u306F\u3042\u304F", "\u3070\u3042\u3055\u3093", "\u3070\u3044\u304B", "\u3070\u3044\u304F", "\u306F\u3044\u3051\u3093", "\u306F\u3044\u3054", "\u306F\u3044\u3057\u3093", "\u306F\u3044\u3059\u3044", "\u306F\u3044\u305B\u3093", "\u306F\u3044\u305D\u3046", "\u306F\u3044\u3061", "\u3070\u3044\u3070\u3044", "\u306F\u3044\u308C\u3064", "\u306F\u3048\u308B", "\u306F\u304A\u308B", "\u306F\u304B\u3044", "\u3070\u304B\u308A", "\u306F\u304B\u308B", "\u306F\u304F\u3057\u3085", "\u306F\u3051\u3093", "\u306F\u3053\u3076", "\u306F\u3055\u307F", "\u306F\u3055\u3093", "\u306F\u3057\u3054", "\u3070\u3057\u3087", "\u306F\u3057\u308B", "\u306F\u305B\u308B", "\u3071\u305D\u3053\u3093", "\u306F\u305D\u3093", "\u306F\u305F\u3093", "\u306F\u3061\u307F\u3064", "\u306F\u3064\u304A\u3093", "\u306F\u3063\u304B\u304F", "\u306F\u3065\u304D", "\u306F\u3063\u304D\u308A", "\u306F\u3063\u304F\u3064", "\u306F\u3063\u3051\u3093", "\u306F\u3063\u3053\u3046", "\u306F\u3063\u3055\u3093", "\u306F\u3063\u3057\u3093", "\u306F\u3063\u305F\u3064", "\u306F\u3063\u3061\u3085\u3046", "\u306F\u3063\u3066\u3093", "\u306F\u3063\u3074\u3087\u3046", "\u306F\u3063\u307D\u3046", "\u306F\u306A\u3059", "\u306F\u306A\u3073", "\u306F\u306B\u304B\u3080", "\u306F\u3076\u3089\u3057", "\u306F\u307F\u304C\u304D", "\u306F\u3080\u304B\u3046", "\u306F\u3081\u3064", "\u306F\u3084\u3044", "\u306F\u3084\u3057", "\u306F\u3089\u3046", "\u306F\u308D\u3046\u3043\u3093", "\u306F\u308F\u3044", "\u306F\u3093\u3044", "\u306F\u3093\u3048\u3044", "\u306F\u3093\u304A\u3093", "\u306F\u3093\u304B\u304F", "\u306F\u3093\u304D\u3087\u3046", "\u3070\u3093\u3050\u307F", "\u306F\u3093\u3053", "\u306F\u3093\u3057\u3083", "\u306F\u3093\u3059\u3046", "\u306F\u3093\u3060\u3093", "\u3071\u3093\u3061", "\u3071\u3093\u3064", "\u306F\u3093\u3066\u3044", "\u306F\u3093\u3068\u3057", "\u306F\u3093\u306E\u3046", "\u306F\u3093\u3071", "\u306F\u3093\u3076\u3093", "\u306F\u3093\u307A\u3093", "\u306F\u3093\u307C\u3046\u304D", "\u306F\u3093\u3081\u3044", "\u306F\u3093\u3089\u3093", "\u306F\u3093\u308D\u3093", "\u3072\u3044\u304D", "\u3072\u3046\u3093", "\u3072\u3048\u308B", "\u3072\u304B\u304F", "\u3072\u304B\u308A", "\u3072\u304B\u308B", "\u3072\u304B\u3093", "\u3072\u304F\u3044", "\u3072\u3051\u3064", "\u3072\u3053\u3046\u304D", "\u3072\u3053\u304F", "\u3072\u3055\u3044", "\u3072\u3055\u3057\u3076\u308A", "\u3072\u3055\u3093", "\u3073\u3058\u3085\u3064\u304B\u3093", "\u3072\u3057\u3087", "\u3072\u305D\u304B", "\u3072\u305D\u3080", "\u3072\u305F\u3080\u304D", "\u3072\u3060\u308A", "\u3072\u305F\u308B", "\u3072\u3064\u304E", "\u3072\u3063\u3053\u3057", "\u3072\u3063\u3057", "\u3072\u3064\u3058\u3085\u3072\u3093", "\u3072\u3063\u3059", "\u3072\u3064\u305C\u3093", "\u3074\u3063\u305F\u308A", "\u3074\u3063\u3061\u308A", "\u3072\u3064\u3088\u3046", "\u3072\u3066\u3044", "\u3072\u3068\u3054\u307F", "\u3072\u306A\u307E\u3064\u308A", "\u3072\u306A\u3093", "\u3072\u306D\u308B", "\u3072\u306F\u3093", "\u3072\u3073\u304F", "\u3072\u3072\u3087\u3046", "\u3072\u307B\u3046", "\u3072\u307E\u308F\u308A", "\u3072\u307E\u3093", "\u3072\u307F\u3064", "\u3072\u3081\u3044", "\u3072\u3081\u3058\u3057", "\u3072\u3084\u3051", "\u3072\u3084\u3059", "\u3072\u3088\u3046", "\u3073\u3087\u3046\u304D", "\u3072\u3089\u304C\u306A", "\u3072\u3089\u304F", "\u3072\u308A\u3064", "\u3072\u308A\u3087\u3046", "\u3072\u308B\u307E", "\u3072\u308B\u3084\u3059\u307F", "\u3072\u308C\u3044", "\u3072\u308D\u3044", "\u3072\u308D\u3046", "\u3072\u308D\u304D", "\u3072\u308D\u3086\u304D", "\u3072\u3093\u304B\u304F", "\u3072\u3093\u3051\u3064", "\u3072\u3093\u3053\u3093", "\u3072\u3093\u3057\u3085", "\u3072\u3093\u305D\u3046", "\u3074\u3093\u3061", "\u3072\u3093\u3071\u3093", "\u3073\u3093\u307C\u3046", "\u3075\u3042\u3093", "\u3075\u3044\u3046\u3061", "\u3075\u3046\u3051\u3044", "\u3075\u3046\u305B\u3093", "\u3077\u3046\u305F\u308D\u3046", "\u3075\u3046\u3068\u3046", "\u3075\u3046\u3075", "\u3075\u3048\u308B", "\u3075\u304A\u3093", "\u3075\u304B\u3044", "\u3075\u304D\u3093", "\u3075\u304F\u3056\u3064", "\u3075\u304F\u3076\u304F\u308D", "\u3075\u3053\u3046", "\u3075\u3055\u3044", "\u3075\u3057\u304E", "\u3075\u3058\u307F", "\u3075\u3059\u307E", "\u3075\u305B\u3044", "\u3075\u305B\u3050", "\u3075\u305D\u304F", "\u3076\u305F\u306B\u304F", "\u3075\u305F\u3093", "\u3075\u3061\u3087\u3046", "\u3075\u3064\u3046", "\u3075\u3064\u304B", "\u3075\u3063\u304B\u3064", "\u3075\u3063\u304D", "\u3075\u3063\u3053\u304F", "\u3076\u3069\u3046", "\u3075\u3068\u308B", "\u3075\u3068\u3093", "\u3075\u306E\u3046", "\u3075\u306F\u3044", "\u3075\u3072\u3087\u3046", "\u3075\u3078\u3093", "\u3075\u307E\u3093", "\u3075\u307F\u3093", "\u3075\u3081\u3064", "\u3075\u3081\u3093", "\u3075\u3088\u3046", "\u3075\u308A\u3053", "\u3075\u308A\u308B", "\u3075\u308B\u3044", "\u3075\u3093\u3044\u304D", "\u3076\u3093\u304C\u304F", "\u3076\u3093\u3050", "\u3075\u3093\u3057\u3064", "\u3076\u3093\u305B\u304D", "\u3075\u3093\u305D\u3046", "\u3076\u3093\u307D\u3046", "\u3078\u3044\u3042\u3093", "\u3078\u3044\u304A\u3093", "\u3078\u3044\u304C\u3044", "\u3078\u3044\u304D", "\u3078\u3044\u3052\u3093", "\u3078\u3044\u3053\u3046", "\u3078\u3044\u3055", "\u3078\u3044\u3057\u3083", "\u3078\u3044\u305B\u3064", "\u3078\u3044\u305D", "\u3078\u3044\u305F\u304F", "\u3078\u3044\u3066\u3093", "\u3078\u3044\u306D\u3064", "\u3078\u3044\u308F", "\u3078\u304D\u304C", "\u3078\u3053\u3080", "\u3079\u306B\u3044\u308D", "\u3079\u306B\u3057\u3087\u3046\u304C", "\u3078\u3089\u3059", "\u3078\u3093\u304B\u3093", "\u3079\u3093\u304D\u3087\u3046", "\u3079\u3093\u3054\u3057", "\u3078\u3093\u3055\u3044", "\u3078\u3093\u305F\u3044", "\u3079\u3093\u308A", "\u307B\u3042\u3093", "\u307B\u3044\u304F", "\u307C\u3046\u304E\u3087", "\u307B\u3046\u3053\u304F", "\u307B\u3046\u305D\u3046", "\u307B\u3046\u307B\u3046", "\u307B\u3046\u3082\u3093", "\u307B\u3046\u308A\u3064", "\u307B\u3048\u308B", "\u307B\u304A\u3093", "\u307B\u304B\u3093", "\u307B\u304D\u3087\u3046", "\u307C\u304D\u3093", "\u307B\u304F\u308D", "\u307B\u3051\u3064", "\u307B\u3051\u3093", "\u307B\u3053\u3046", "\u307B\u3053\u308B", "\u307B\u3057\u3044", "\u307B\u3057\u3064", "\u307B\u3057\u3085", "\u307B\u3057\u3087\u3046", "\u307B\u305B\u3044", "\u307B\u305D\u3044", "\u307B\u305D\u304F", "\u307B\u305F\u3066", "\u307B\u305F\u308B", "\u307D\u3061\u3076\u304F\u308D", "\u307B\u3063\u304D\u3087\u304F", "\u307B\u3063\u3055", "\u307B\u3063\u305F\u3093", "\u307B\u3068\u3093\u3069", "\u307B\u3081\u308B", "\u307B\u3093\u3044", "\u307B\u3093\u304D", "\u307B\u3093\u3051", "\u307B\u3093\u3057\u3064", "\u307B\u3093\u3084\u304F", "\u307E\u3044\u306B\u3061", "\u307E\u304B\u3044", "\u307E\u304B\u305B\u308B", "\u307E\u304C\u308B", "\u307E\u3051\u308B", "\u307E\u3053\u3068", "\u307E\u3055\u3064", "\u307E\u3058\u3081", "\u307E\u3059\u304F", "\u307E\u305C\u308B", "\u307E\u3064\u308A", "\u307E\u3068\u3081", "\u307E\u306A\u3076", "\u307E\u306C\u3051", "\u307E\u306D\u304F", "\u307E\u307B\u3046", "\u307E\u3082\u308B", "\u307E\u3086\u3052", "\u307E\u3088\u3046", "\u307E\u308D\u3084\u304B", "\u307E\u308F\u3059", "\u307E\u308F\u308A", "\u307E\u308F\u308B", "\u307E\u3093\u304C", "\u307E\u3093\u304D\u3064", "\u307E\u3093\u305E\u304F", "\u307E\u3093\u306A\u304B", "\u307F\u3044\u3089", "\u307F\u3046\u3061", "\u307F\u3048\u308B", "\u307F\u304C\u304F", "\u307F\u304B\u305F", "\u307F\u304B\u3093", "\u307F\u3051\u3093", "\u307F\u3053\u3093", "\u307F\u3058\u304B\u3044", "\u307F\u3059\u3044", "\u307F\u3059\u3048\u308B", "\u307F\u305B\u308B", "\u307F\u3063\u304B", "\u307F\u3064\u304B\u308B", "\u307F\u3064\u3051\u308B", "\u307F\u3066\u3044", "\u307F\u3068\u3081\u308B", "\u307F\u306A\u3068", "\u307F\u306A\u307F\u304B\u3055\u3044", "\u307F\u306D\u3089\u308B", "\u307F\u306E\u3046", "\u307F\u306E\u304C\u3059", "\u307F\u307B\u3093", "\u307F\u3082\u3068", "\u307F\u3084\u3052", "\u307F\u3089\u3044", "\u307F\u308A\u3087\u304F", "\u307F\u308F\u304F", "\u307F\u3093\u304B", "\u307F\u3093\u305E\u304F", "\u3080\u3044\u304B", "\u3080\u3048\u304D", "\u3080\u3048\u3093", "\u3080\u304B\u3044", "\u3080\u304B\u3046", "\u3080\u304B\u3048", "\u3080\u304B\u3057", "\u3080\u304E\u3061\u3083", "\u3080\u3051\u308B", "\u3080\u3052\u3093", "\u3080\u3055\u307C\u308B", "\u3080\u3057\u3042\u3064\u3044", "\u3080\u3057\u3070", "\u3080\u3058\u3085\u3093", "\u3080\u3057\u308D", "\u3080\u3059\u3046", "\u3080\u3059\u3053", "\u3080\u3059\u3076", "\u3080\u3059\u3081", "\u3080\u305B\u308B", "\u3080\u305B\u3093", "\u3080\u3061\u3085\u3046", "\u3080\u306A\u3057\u3044", "\u3080\u306E\u3046", "\u3080\u3084\u307F", "\u3080\u3088\u3046", "\u3080\u3089\u3055\u304D", "\u3080\u308A\u3087\u3046", "\u3080\u308D\u3093", "\u3081\u3044\u3042\u3093", "\u3081\u3044\u3046\u3093", "\u3081\u3044\u3048\u3093", "\u3081\u3044\u304B\u304F", "\u3081\u3044\u304D\u3087\u304F", "\u3081\u3044\u3055\u3044", "\u3081\u3044\u3057", "\u3081\u3044\u305D\u3046", "\u3081\u3044\u3076\u3064", "\u3081\u3044\u308C\u3044", "\u3081\u3044\u308F\u304F", "\u3081\u3050\u307E\u308C\u308B", "\u3081\u3056\u3059", "\u3081\u3057\u305F", "\u3081\u305A\u3089\u3057\u3044", "\u3081\u3060\u3064", "\u3081\u307E\u3044", "\u3081\u3084\u3059", "\u3081\u3093\u304D\u3087", "\u3081\u3093\u305B\u304D", "\u3081\u3093\u3069\u3046", "\u3082\u3046\u3057\u3042\u3052\u308B", "\u3082\u3046\u3069\u3046\u3051\u3093", "\u3082\u3048\u308B", "\u3082\u304F\u3057", "\u3082\u304F\u3066\u304D", "\u3082\u304F\u3088\u3046\u3073", "\u3082\u3061\u308D\u3093", "\u3082\u3069\u308B", "\u3082\u3089\u3046", "\u3082\u3093\u304F", "\u3082\u3093\u3060\u3044", "\u3084\u304A\u3084", "\u3084\u3051\u308B", "\u3084\u3055\u3044", "\u3084\u3055\u3057\u3044", "\u3084\u3059\u3044", "\u3084\u3059\u305F\u308D\u3046", "\u3084\u3059\u307F", "\u3084\u305B\u308B", "\u3084\u305D\u3046", "\u3084\u305F\u3044", "\u3084\u3061\u3093", "\u3084\u3063\u3068", "\u3084\u3063\u3071\u308A", "\u3084\u3076\u308B", "\u3084\u3081\u308B", "\u3084\u3084\u3053\u3057\u3044", "\u3084\u3088\u3044", "\u3084\u308F\u3089\u304B\u3044", "\u3086\u3046\u304D", "\u3086\u3046\u3073\u3093\u304D\u3087\u304F", "\u3086\u3046\u3079", "\u3086\u3046\u3081\u3044", "\u3086\u3051\u3064", "\u3086\u3057\u3085\u3064", "\u3086\u305B\u3093", "\u3086\u305D\u3046", "\u3086\u305F\u304B", "\u3086\u3061\u3083\u304F", "\u3086\u3067\u308B", "\u3086\u306B\u3085\u3046", "\u3086\u3073\u308F", "\u3086\u3089\u3044", "\u3086\u308C\u308B", "\u3088\u3046\u3044", "\u3088\u3046\u304B", "\u3088\u3046\u304D\u3085\u3046", "\u3088\u3046\u3058", "\u3088\u3046\u3059", "\u3088\u3046\u3061\u3048\u3093", "\u3088\u304B\u305C", "\u3088\u304B\u3093", "\u3088\u304D\u3093", "\u3088\u304F\u305B\u3044", "\u3088\u304F\u307C\u3046", "\u3088\u3051\u3044", "\u3088\u3054\u308C\u308B", "\u3088\u3055\u3093", "\u3088\u3057\u3085\u3046", "\u3088\u305D\u3046", "\u3088\u305D\u304F", "\u3088\u3063\u304B", "\u3088\u3066\u3044", "\u3088\u3069\u304C\u308F\u304F", "\u3088\u306D\u3064", "\u3088\u3084\u304F", "\u3088\u3086\u3046", "\u3088\u308D\u3053\u3076", "\u3088\u308D\u3057\u3044", "\u3089\u3044\u3046", "\u3089\u304F\u304C\u304D", "\u3089\u304F\u3054", "\u3089\u304F\u3055\u3064", "\u3089\u304F\u3060", "\u3089\u3057\u3093\u3070\u3093", "\u3089\u305B\u3093", "\u3089\u305E\u304F", "\u3089\u305F\u3044", "\u3089\u3063\u304B", "\u3089\u308C\u3064", "\u308A\u3048\u304D", "\u308A\u304B\u3044", "\u308A\u304D\u3055\u304F", "\u308A\u304D\u305B\u3064", "\u308A\u304F\u3050\u3093", "\u308A\u304F\u3064", "\u308A\u3051\u3093", "\u308A\u3053\u3046", "\u308A\u305B\u3044", "\u308A\u305D\u3046", "\u308A\u305D\u304F", "\u308A\u3066\u3093", "\u308A\u306D\u3093", "\u308A\u3086\u3046", "\u308A\u3085\u3046\u304C\u304F", "\u308A\u3088\u3046", "\u308A\u3087\u3046\u308A", "\u308A\u3087\u304B\u3093", "\u308A\u3087\u304F\u3061\u3083", "\u308A\u3087\u3053\u3046", "\u308A\u308A\u304F", "\u308A\u308C\u304D", "\u308A\u308D\u3093", "\u308A\u3093\u3054", "\u308B\u3044\u3051\u3044", "\u308B\u3044\u3055\u3044", "\u308B\u3044\u3058", "\u308B\u3044\u305B\u304D", "\u308B\u3059\u3070\u3093", "\u308B\u308A\u304C\u308F\u3089", "\u308C\u3044\u304B\u3093", "\u308C\u3044\u304E", "\u308C\u3044\u305B\u3044", "\u308C\u3044\u305E\u3046\u3053", "\u308C\u3044\u3068\u3046", "\u308C\u3044\u307C\u3046", "\u308C\u304D\u3057", "\u308C\u304D\u3060\u3044", "\u308C\u3093\u3042\u3044", "\u308C\u3093\u3051\u3044", "\u308C\u3093\u3053\u3093", "\u308C\u3093\u3055\u3044", "\u308C\u3093\u3057\u3085\u3046", "\u308C\u3093\u305E\u304F", "\u308C\u3093\u3089\u304F", "\u308D\u3046\u304B", "\u308D\u3046\u3054", "\u308D\u3046\u3058\u3093", "\u308D\u3046\u305D\u304F", "\u308D\u304F\u304C", "\u308D\u3053\u3064", "\u308D\u3058\u3046\u3089", "\u308D\u3057\u3085\u3064", "\u308D\u305B\u3093", "\u308D\u3066\u3093", "\u308D\u3081\u3093", "\u308D\u308C\u3064", "\u308D\u3093\u304E", "\u308D\u3093\u3071", "\u308D\u3093\u3076\u3093", "\u308D\u3093\u308A", "\u308F\u304B\u3059", "\u308F\u304B\u3081", "\u308F\u304B\u3084\u307E", "\u308F\u304B\u308C\u308B", "\u308F\u3057\u3064", "\u308F\u3058\u307E\u3057", "\u308F\u3059\u308C\u3082\u306E", "\u308F\u3089\u3046", "\u308F\u308C\u308B"];
        W.space = "\u3000";
        class Q extends S {
          constructor(t3, e3, r3 = V) {
            super({ privKey: t3, pubKey: e3 }), this.PrivKey = r3;
          }
          fromJSON(t3) {
            return t3.privKey && (this.privKey = this.PrivKey.fromJSON(t3.privKey)), t3.pubKey && (this.pubKey = K.fromJSON(t3.pubKey)), this;
          }
          fromBr(t3) {
            const e3 = t3.readUInt8();
            e3 > 0 && (this.privKey = new this.PrivKey().fromFastBuffer(t3.read(e3)));
            const r3 = t3.readUInt8();
            return r3 > 0 && (this.pubKey = new K().fromFastBuffer(t3.read(r3))), this;
          }
          toBw(t3) {
            if (t3 || (t3 = new y()), this.privKey) {
              const e3 = this.privKey.toFastBuffer();
              t3.writeUInt8(e3.length), t3.write(e3);
            } else
              t3.writeUInt8(0);
            if (this.pubKey) {
              const e3 = this.pubKey.toFastBuffer();
              t3.writeUInt8(e3.length), t3.write(e3);
            } else
              t3.writeUInt8(0);
            return t3;
          }
          fromString(t3) {
            return this.fromJSON(JSON.parse(t3));
          }
          toString() {
            return JSON.stringify(this.toJSON());
          }
          toPublic() {
            const t3 = new Q().fromObject(this);
            return t3.privKey = void 0, t3;
          }
          fromPrivKey(t3) {
            return this.privKey = t3, this.pubKey = new K().fromPrivKey(t3), this;
          }
          static fromPrivKey(t3) {
            return new this().fromPrivKey(t3);
          }
          async asyncFromPrivKey(t3) {
            return this.privKey = t3, this.pubKey = await new K().asyncFromPrivKey(t3), this;
          }
          static asyncFromPrivKey(t3) {
            return new this().asyncFromPrivKey(t3);
          }
          fromRandom() {
            return this.privKey = new this.PrivKey().fromRandom(), this.pubKey = new K().fromPrivKey(this.privKey), this;
          }
          static fromRandom() {
            return new this().fromRandom();
          }
          async asyncFromRandom() {
            return this.privKey = new this.PrivKey().fromRandom(), this.asyncFromPrivKey(this.privKey);
          }
          static asyncFromRandom() {
            return new this().asyncFromRandom();
          }
        }
        Q.Mainnet = class extends Q {
          constructor(t3, e3) {
            super(t3, e3, V.Mainnet);
          }
        }, Q.Testnet = class extends Q {
          constructor(t3, e3) {
            super(t3, e3, V.Testnet);
          }
        };
        class X extends S {
          constructor(t3, e3, r3, i3, s2, n2) {
            super({ sig: t3, keyPair: e3, hashBuf: r3, k: i3, endian: s2, verified: n2 });
          }
          toJSON() {
            return { sig: this.sig ? this.sig.toString() : void 0, keyPair: this.keyPair ? this.keyPair.toBuffer().toString("hex") : void 0, hashBuf: this.hashBuf ? this.hashBuf.toString("hex") : void 0, k: this.k ? this.k.toString() : void 0, endian: this.endian, verified: this.verified };
          }
          fromJSON(t3) {
            return this.sig = t3.sig ? new j().fromString(t3.sig) : void 0, this.keyPair = t3.keyPair ? new Q().fromBuffer(import_buffer.Buffer.from(t3.keyPair, "hex")) : void 0, this.hashBuf = t3.hashBuf ? import_buffer.Buffer.from(t3.hashBuf, "hex") : void 0, this.k = t3.k ? new p().fromString(t3.k) : void 0, this.endian = t3.endian, this.verified = t3.verified, this;
          }
          toBuffer() {
            const t3 = JSON.stringify(this.toJSON());
            return import_buffer.Buffer.from(t3);
          }
          fromBuffer(t3) {
            const e3 = JSON.parse(t3.toString());
            return this.fromJSON(e3);
          }
          calcrecovery() {
            for (let t3 = 0; t3 < 4; t3++) {
              let e3;
              this.sig.recovery = t3;
              try {
                e3 = this.sig2PubKey();
              } catch (t4) {
                continue;
              }
              if (e3.point.eq(this.keyPair.pubKey.point)) {
                const t4 = this.keyPair.pubKey.compressed;
                return this.sig.compressed = void 0 === this.keyPair.pubKey.compressed || t4, this;
              }
            }
            throw this.sig.recovery = void 0, new Error("Unable to find valid recovery factor");
          }
          async asyncCalcrecovery() {
            const t3 = await E.asyncObjectMethod(this, "calcrecovery", []);
            return this.fromFastBuffer(t3.resbuf);
          }
          static calcrecovery(t3, e3, r3) {
            return new X().fromObject({ sig: t3, keyPair: new Q().fromObject({ pubKey: e3 }), hashBuf: r3 }).calcrecovery().sig;
          }
          static async asyncCalcrecovery(t3, e3, r3) {
            const i3 = await E.asyncClassMethod(X, "calcrecovery", [t3, e3, r3]);
            return new j().fromFastBuffer(i3.resbuf);
          }
          fromString(t3) {
            const e3 = JSON.parse(t3);
            return e3.hashBuf && (this.hashBuf = import_buffer.Buffer.from(e3.hashBuf, "hex")), e3.keyPair && (this.keyPair = new Q().fromString(e3.keyPair)), e3.sig && (this.sig = new j().fromString(e3.sig)), e3.k && (this.k = new p(e3.k, 10)), this;
          }
          randomK() {
            const t3 = L.getN();
            let e3;
            do {
              e3 = new p().fromBuffer(D.getRandomBuffer(32));
            } while (!e3.lt(t3) || !e3.gt(0));
            return this.k = e3, this;
          }
          deterministicK(t3) {
            let e3 = import_buffer.Buffer.alloc(32);
            e3.fill(1);
            let r3 = import_buffer.Buffer.alloc(32);
            r3.fill(0);
            const i3 = this.keyPair.privKey.bn.toBuffer({ size: 32 });
            r3 = P.sha256Hmac(import_buffer.Buffer.concat([e3, import_buffer.Buffer.from([0]), i3, this.hashBuf]), r3), e3 = P.sha256Hmac(e3, r3), r3 = P.sha256Hmac(import_buffer.Buffer.concat([e3, import_buffer.Buffer.from([1]), i3, this.hashBuf]), r3), e3 = P.sha256Hmac(e3, r3), e3 = P.sha256Hmac(e3, r3);
            let s2 = new p().fromBuffer(e3);
            const n2 = L.getN();
            void 0 === t3 && (t3 = 0);
            for (let i4 = 0; i4 < t3 || !s2.lt(n2) || !s2.gt(0); i4++)
              r3 = P.sha256Hmac(import_buffer.Buffer.concat([e3, import_buffer.Buffer.from([0])]), r3), e3 = P.sha256Hmac(e3, r3), e3 = P.sha256Hmac(e3, r3), s2 = new p().fromBuffer(e3);
            return this.k = s2, this;
          }
          sig2PubKey() {
            const t3 = this.sig.recovery;
            if (0 !== t3 && 1 !== t3 && 2 !== t3 && 3 !== t3)
              throw new Error("i must be equal to 0, 1, 2, or 3");
            const e3 = new p().fromBuffer(this.hashBuf), r3 = this.sig.r, i3 = this.sig.s, s2 = 1 & t3, n2 = t3 >> 1, a2 = L.getN(), o2 = L.getG(), h2 = n2 ? r3.add(a2) : r3, f3 = L.fromX(s2, h2);
            let c2 = "";
            try {
              f3.mul(a2);
            } catch (t4) {
              c2 = t4.message;
            }
            if ("point mul out of range" !== c2)
              throw new Error("nR is not a valid curve point");
            const u2 = e3.neg().umod(a2), d2 = r3.invm(a2), l2 = f3.mul(i3).add(o2.mul(u2)).mul(d2), b2 = new K(l2);
            return b2.compressed = this.sig.compressed, b2.validate(), b2;
          }
          async asyncSig2PubKey() {
            const t3 = await E.asyncObjectMethod(this, "sig2PubKey", []);
            return K.fromFastBuffer(t3.resbuf);
          }
          static sig2PubKey(t3, e3) {
            return new X().fromObject({ sig: t3, hashBuf: e3 }).sig2PubKey();
          }
          static async asyncSig2PubKey(t3, e3) {
            const r3 = new X().fromObject({ sig: t3, hashBuf: e3 });
            return await r3.asyncSig2PubKey();
          }
          verifyStr(t3 = true) {
            if (!import_buffer.Buffer.isBuffer(this.hashBuf) || 32 !== this.hashBuf.length)
              return "hashBuf must be a 32 byte buffer";
            try {
              this.keyPair.pubKey.validate();
            } catch (i4) {
              return "Invalid pubKey: " + i4;
            }
            const e3 = this.sig.r, r3 = this.sig.s;
            if (!(e3.gt(0) && e3.lt(L.getN()) && r3.gt(0) && r3.lt(L.getN())))
              return "r and s not in range";
            if (t3 && !this.sig.hasLowS())
              return "s is too high and does not satisfy low s contraint - see bip 62";
            const i3 = new p().fromBuffer(this.hashBuf, this.endian ? { endian: this.endian } : void 0), s2 = L.getN(), n2 = r3.invm(s2), a2 = n2.mul(i3).mod(s2), o2 = n2.mul(e3).mod(s2), h2 = L.getG().mulAdd(a2, this.keyPair.pubKey.point, o2);
            return h2.isInfinity() ? "p is infinity" : 0 !== h2.getX().mod(s2).cmp(e3) && "Invalid signature";
          }
          sign() {
            const t3 = "little" === this.endian ? new g(this.hashBuf).readReverse() : this.hashBuf, e3 = this.keyPair.privKey, r3 = e3.bn;
            if (!t3 || !e3 || !r3)
              throw new Error("invalid parameters");
            if (!import_buffer.Buffer.isBuffer(t3) || 32 !== t3.length)
              throw new Error("hashBuf must be a 32 byte buffer");
            const i3 = L.getN(), s2 = L.getG(), n2 = new p().fromBuffer(t3);
            let a2, o2, h2, f3, c2 = 0;
            do {
              (!this.k || c2 > 0) && this.deterministicK(c2), c2++, a2 = this.k, o2 = s2.mul(a2), h2 = o2.getX().mod(i3), f3 = a2.invm(i3).mul(n2.add(r3.mul(h2))).mod(i3);
            } while (h2.cmp(0) <= 0 || f3.cmp(0) <= 0);
            return f3.gt(new p().fromBuffer(import_buffer.Buffer.from("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0", "hex"))) && (f3 = L.getN().sub(f3)), this.sig = j.fromObject({ r: h2, s: f3, compressed: this.keyPair.pubKey.compressed }), this;
          }
          async asyncSign() {
            const t3 = await E.asyncObjectMethod(this, "sign", []);
            return this.fromFastBuffer(t3.resbuf);
          }
          signRandomK() {
            return this.randomK(), this.sign();
          }
          toString() {
            const t3 = {};
            return this.hashBuf && (t3.hashBuf = this.hashBuf.toString("hex")), this.keyPair && (t3.keyPair = this.keyPair.toString()), this.sig && (t3.sig = this.sig.toString()), this.k && (t3.k = this.k.toString()), JSON.stringify(t3);
          }
          verify(t3 = true) {
            return this.verifyStr(t3) ? this.verified = false : this.verified = true, this;
          }
          async asyncVerify(t3 = true) {
            const e3 = await E.asyncObjectMethod(this, "verify", [t3]);
            return this.fromFastBuffer(e3.resbuf);
          }
          static sign(t3, e3, r3) {
            return new X().fromObject({ hashBuf: t3, endian: r3, keyPair: e3 }).sign().sig;
          }
          static async asyncSign(t3, e3, r3) {
            const i3 = new X().fromObject({ hashBuf: t3, endian: r3, keyPair: e3 });
            return await i3.asyncSign(), i3.sig;
          }
          static verify(t3, e3, r3, i3, s2 = true) {
            return new X().fromObject({ hashBuf: t3, endian: i3, sig: e3, keyPair: new Q().fromObject({ pubKey: r3 }) }).verify(s2).verified;
          }
          static async asyncVerify(t3, e3, r3, i3, s2 = true) {
            const n2 = new X().fromObject({ hashBuf: t3, endian: i3, sig: e3, keyPair: new Q().fromObject({ pubKey: r3 }) });
            return await n2.asyncVerify(s2), n2.verified;
          }
        }
        class Z extends S {
          constructor(t3, e3, r3, i3, s2) {
            super({ messageBuf: t3, keyPair: e3, sig: r3, address: i3, verified: s2 });
          }
          static magicHash(t3) {
            if (!import_buffer.Buffer.isBuffer(t3))
              throw new Error("messageBuf must be a buffer");
            const e3 = new y();
            e3.writeVarIntNum(Z.magicBytes.length), e3.write(Z.magicBytes), e3.writeVarIntNum(t3.length), e3.write(t3);
            const r3 = e3.toBuffer();
            return P.sha256Sha256(r3);
          }
          static async asyncMagicHash(t3) {
            const e3 = [t3];
            return (await E.asyncClassMethod(Z, "magicHash", e3)).resbuf;
          }
          static sign(t3, e3) {
            const r3 = new Z(t3, e3);
            return r3.sign(), r3.sig.toCompact().toString("base64");
          }
          static async asyncSign(t3, e3) {
            const r3 = [t3, e3], i3 = await E.asyncClassMethod(Z, "sign", r3);
            return JSON.parse(i3.resbuf.toString());
          }
          static verify(t3, e3, r3) {
            const i3 = import_buffer.Buffer.from(e3, "base64"), s2 = new Z();
            return s2.messageBuf = t3, s2.sig = new j().fromCompact(i3), s2.address = r3, s2.verify().verified;
          }
          static async asyncVerify(t3, e3, r3) {
            const i3 = [t3, e3, r3], s2 = await E.asyncClassMethod(Z, "verify", i3);
            return JSON.parse(s2.resbuf.toString());
          }
          sign() {
            const t3 = Z.magicHash(this.messageBuf), e3 = new X().fromObject({ hashBuf: t3, keyPair: this.keyPair });
            return e3.sign(), e3.calcrecovery(), this.sig = e3.sig, this;
          }
          verify() {
            const t3 = Z.magicHash(this.messageBuf), e3 = new X();
            if (e3.hashBuf = t3, e3.sig = this.sig, e3.keyPair = new Q(), e3.keyPair.pubKey = e3.sig2PubKey(), !e3.verify())
              return this.verified = false, this;
            const r3 = new z().fromPubKey(e3.keyPair.pubKey, void 0, this.sig.compressed);
            return B(r3.hashBuf, this.address.hashBuf) ? this.verified = true : this.verified = false, this;
          }
        }
        Z.magicBytes = import_buffer.Buffer.from("Bitcoin Signed Message:\n");
        class $ extends S {
          constructor(t3, e3, r3, i3, s2, n2) {
            super({ versionBytesNum: t3, prevBlockHashBuf: e3, merkleRootBuf: r3, time: i3, bits: s2, nonce: n2 });
          }
          fromJSON(t3) {
            return this.fromObject({ versionBytesNum: t3.versionBytesNum, prevBlockHashBuf: import_buffer.Buffer.from(t3.prevBlockHashBuf, "hex"), merkleRootBuf: import_buffer.Buffer.from(t3.merkleRootBuf, "hex"), time: t3.time, bits: t3.bits, nonce: t3.nonce }), this;
          }
          toJSON() {
            return { versionBytesNum: this.versionBytesNum, prevBlockHashBuf: this.prevBlockHashBuf.toString("hex"), merkleRootBuf: this.merkleRootBuf.toString("hex"), time: this.time, bits: this.bits, nonce: this.nonce };
          }
          fromBr(t3) {
            return this.versionBytesNum = t3.readUInt32LE(), this.prevBlockHashBuf = t3.read(32), this.merkleRootBuf = t3.read(32), this.time = t3.readUInt32LE(), this.bits = t3.readUInt32LE(), this.nonce = t3.readUInt32LE(), this;
          }
          toBw(t3) {
            return t3 || (t3 = new y()), t3.writeUInt32LE(this.versionBytesNum), t3.write(this.prevBlockHashBuf), t3.write(this.merkleRootBuf), t3.writeUInt32LE(this.time), t3.writeUInt32LE(this.bits), t3.writeUInt32LE(this.nonce), t3;
          }
        }
        class tt extends S {
          constructor(t3, e3, r3, i3) {
            super({ hashBuf: t3, buf: e3, merkle1: r3, merkle2: i3 });
          }
          hash() {
            if (this.hashBuf)
              return this.hashBuf;
            if (this.buf)
              return P.sha256Sha256(this.buf);
            const t3 = this.merkle1.hash(), e3 = this.merkle2.hash();
            return this.buf = import_buffer.Buffer.concat([t3, e3]), P.sha256Sha256(this.buf);
          }
          fromBuffers(t3) {
            if (t3.length < 1)
              throw new Error("buffers must have a length");
            t3 = t3.slice();
            const e3 = Math.log2(t3.length);
            if (!Number.isInteger(e3)) {
              const i4 = t3[t3.length - 1];
              var r3 = Math.pow(2, Math.ceil(e3));
              for (let e4 = t3.length; e4 < r3; e4++)
                t3.push(i4);
            }
            const i3 = t3.slice(0, t3.length / 2), s2 = t3.slice(t3.length / 2);
            return this.fromBufferArrays(i3, s2), this;
          }
          static fromBuffers(t3) {
            return new this().fromBuffers(t3);
          }
          fromBufferArrays(t3, e3) {
            if (1 === t3.length)
              return this.merkle1 = new tt(void 0, t3[0]), this.merkle2 = new tt(void 0, e3[0]), this;
            const r3 = t3.slice(0, t3.length / 2), i3 = t3.slice(t3.length / 2);
            this.merkle1 = new tt().fromBufferArrays(r3, i3);
            const s2 = e3.slice(0, e3.length / 2), n2 = e3.slice(e3.length / 2);
            return this.merkle2 = new tt().fromBufferArrays(s2, n2), this;
          }
          static fromBufferArrays(t3, e3) {
            return new this().fromBufferArrays(t3, e3);
          }
          leavesNum() {
            if (this.merkle1)
              return this.merkle1.leavesNum() + this.merkle2.leavesNum();
            if (this.buf)
              return 1;
            throw new Error("invalid number of leaves");
          }
        }
        class et extends S {
          constructor(t3, e3, r3) {
            super(), this.fromObject({ prevoutsHashBuf: t3, sequenceHashBuf: e3, outputsHashBuf: r3 });
          }
          fromBuffer(t3) {
            return this.fromJSON(JSON.parse(t3.toString()));
          }
          toBuffer() {
            return import_buffer.Buffer.from(JSON.stringify(this.toJSON()));
          }
          fromJSON(t3) {
            return this.prevoutsHashBuf = t3.prevoutsHashBuf ? import_buffer.Buffer.from(t3.prevoutsHashBuf, "hex") : void 0, this.sequenceHashBuf = t3.sequenceHashBuf ? import_buffer.Buffer.from(t3.sequenceHashBuf, "hex") : void 0, this.outputsHashBuf = t3.outputsHashBuf ? import_buffer.Buffer.from(t3.outputsHashBuf, "hex") : void 0, this;
          }
          toJSON() {
            return { prevoutsHashBuf: this.prevoutsHashBuf ? this.prevoutsHashBuf.toString("hex") : void 0, sequenceHashBuf: this.sequenceHashBuf ? this.sequenceHashBuf.toString("hex") : void 0, outputsHashBuf: this.outputsHashBuf ? this.outputsHashBuf.toString("hex") : void 0 };
          }
        }
        class rt extends S {
          constructor(t3) {
            super({ buf: t3 });
          }
          fromJSON(t3) {
            return this.fromObject({ buf: import_buffer.Buffer.from(t3, "hex") }), this;
          }
          toJSON() {
            return this.buf.toString("hex");
          }
          fromBuffer(t3) {
            return this.buf = t3, this;
          }
          fromBr(t3) {
            return this.buf = t3.readVarIntBuf(), this;
          }
          fromBn(t3) {
            return this.buf = new y().writeVarIntBn(t3).toBuffer(), this;
          }
          static fromBn(t3) {
            return new this().fromBn(t3);
          }
          fromNumber(t3) {
            return this.buf = new y().writeVarIntNum(t3).toBuffer(), this;
          }
          static fromNumber(t3) {
            return new this().fromNumber(t3);
          }
          toBuffer() {
            return this.buf;
          }
          toBn() {
            return new g(this.buf).readVarIntBn();
          }
          toNumber() {
            return new g(this.buf).readVarIntNum();
          }
        }
        class it extends S {
          constructor(t3, e3, r3, i3, s2 = 4294967295) {
            super({ txHashBuf: t3, txOutNum: e3, scriptVi: r3, script: i3, nSequence: s2 });
          }
          setScript(t3) {
            return this.scriptVi = rt.fromNumber(t3.toBuffer().length), this.script = t3, this;
          }
          fromProperties(t3, e3, r3, i3) {
            return this.fromObject({ txHashBuf: t3, txOutNum: e3, nSequence: i3 }), this.setScript(r3), this;
          }
          static fromProperties(t3, e3, r3, i3) {
            return new this().fromProperties(t3, e3, r3, i3);
          }
          fromJSON(t3) {
            return this.fromObject({ txHashBuf: void 0 !== t3.txHashBuf ? import_buffer.Buffer.from(t3.txHashBuf, "hex") : void 0, txOutNum: t3.txOutNum, scriptVi: void 0 !== t3.scriptVi ? rt.fromJSON(t3.scriptVi) : void 0, script: void 0 !== t3.script ? q.fromJSON(t3.script) : void 0, nSequence: t3.nSequence }), this;
          }
          toJSON() {
            return { txHashBuf: void 0 !== this.txHashBuf ? this.txHashBuf.toString("hex") : void 0, txOutNum: this.txOutNum, scriptVi: void 0 !== this.scriptVi ? this.scriptVi.toJSON() : void 0, script: void 0 !== this.script ? this.script.toJSON() : void 0, nSequence: this.nSequence };
          }
          fromBr(t3) {
            return this.txHashBuf = t3.read(32), this.txOutNum = t3.readUInt32LE(), this.scriptVi = rt.fromBuffer(t3.readVarIntBuf()), this.script = q.fromBuffer(t3.read(this.scriptVi.toNumber())), this.nSequence = t3.readUInt32LE(), this;
          }
          toBw(t3) {
            return t3 || (t3 = new y()), t3.write(this.txHashBuf), t3.writeUInt32LE(this.txOutNum), t3.write(this.scriptVi.buf), t3.write(this.script.toBuffer()), t3.writeUInt32LE(this.nSequence), t3;
          }
          fromPubKeyHashTxOut(t3, e3, r3, i3) {
            const s2 = new q();
            if (!r3.script.isPubKeyHashOut())
              throw new Error("txOut must be of type pubKeyHash");
            return s2.writeOpCode(T.OP_0), i3 ? s2.writeBuffer(i3.toBuffer()) : s2.writeOpCode(T.OP_0), this.txHashBuf = t3, this.txOutNum = e3, this.setScript(s2), this;
          }
          hasNullInput() {
            return "0000000000000000000000000000000000000000000000000000000000000000" === this.txHashBuf.toString("hex") && 4294967295 === this.txOutNum;
          }
          setNullInput() {
            this.txHashBuf = import_buffer.Buffer.alloc(32), this.txHashBuf.fill(0), this.txOutNum = 4294967295;
          }
        }
        it.LOCKTIME_VERIFY_SEQUENCE = 1, it.SEQUENCE_FINAL = 4294967295, it.SEQUENCE_LOCKTIME_DISABLE_FLAG = 1 << 31, it.SEQUENCE_LOCKTIME_TYPE_FLAG = 1 << 22, it.SEQUENCE_LOCKTIME_MASK = 65535, it.SEQUENCE_LOCKTIME_GRANULARITY = 9;
        class st extends S {
          constructor(t3, e3, r3) {
            super({ valueBn: t3, scriptVi: e3, script: r3 });
          }
          setScript(t3) {
            return this.scriptVi = rt.fromNumber(t3.toBuffer().length), this.script = t3, this;
          }
          fromProperties(t3, e3) {
            return this.fromObject({ valueBn: t3 }), this.setScript(e3), this;
          }
          static fromProperties(t3, e3) {
            return new this().fromProperties(t3, e3);
          }
          fromJSON(t3) {
            return this.fromObject({ valueBn: new p().fromJSON(t3.valueBn), scriptVi: new rt().fromJSON(t3.scriptVi), script: new q().fromJSON(t3.script) }), this;
          }
          toJSON() {
            return { valueBn: this.valueBn.toJSON(), scriptVi: this.scriptVi.toJSON(), script: this.script.toJSON() };
          }
          fromBr(t3) {
            return this.valueBn = t3.readUInt64LEBn(), this.scriptVi = rt.fromNumber(t3.readVarIntNum()), this.script = new q().fromBuffer(t3.read(this.scriptVi.toNumber())), this;
          }
          toBw(t3) {
            return t3 || (t3 = new y()), t3.writeUInt64LEBn(this.valueBn), t3.write(this.scriptVi.buf), t3.write(this.script.toBuffer()), t3;
          }
        }
        class nt extends S {
          constructor(t3 = 1, e3 = rt.fromNumber(0), r3 = [], i3 = rt.fromNumber(0), s2 = [], n2 = 0) {
            super({ versionBytesNum: t3, txInsVi: e3, txIns: r3, txOutsVi: i3, txOuts: s2, nLockTime: n2 });
          }
          fromJSON(t3) {
            const e3 = [];
            t3.txIns.forEach(function(t4) {
              e3.push(new it().fromJSON(t4));
            });
            const r3 = [];
            return t3.txOuts.forEach(function(t4) {
              r3.push(new st().fromJSON(t4));
            }), this.fromObject({ versionBytesNum: t3.versionBytesNum, txInsVi: new rt().fromJSON(t3.txInsVi), txIns: e3, txOutsVi: new rt().fromJSON(t3.txOutsVi), txOuts: r3, nLockTime: t3.nLockTime }), this;
          }
          toJSON() {
            const t3 = [];
            this.txIns.forEach(function(e4) {
              t3.push(e4.toJSON());
            });
            const e3 = [];
            return this.txOuts.forEach(function(t4) {
              e3.push(t4.toJSON());
            }), { versionBytesNum: this.versionBytesNum, txInsVi: this.txInsVi.toJSON(), txIns: t3, txOutsVi: this.txOutsVi.toJSON(), txOuts: e3, nLockTime: this.nLockTime };
          }
          fromBr(t3) {
            this.versionBytesNum = t3.readUInt32LE(), this.txInsVi = new rt(t3.readVarIntBuf());
            const e3 = this.txInsVi.toNumber();
            this.txIns = [];
            for (let r4 = 0; r4 < e3; r4++)
              this.txIns.push(new it().fromBr(t3));
            this.txOutsVi = new rt(t3.readVarIntBuf());
            const r3 = this.txOutsVi.toNumber();
            this.txOuts = [];
            for (let e4 = 0; e4 < r3; e4++)
              this.txOuts.push(new st().fromBr(t3));
            return this.nLockTime = t3.readUInt32LE(), this;
          }
          toBw(t3) {
            t3 || (t3 = new y()), t3.writeUInt32LE(this.versionBytesNum), t3.write(this.txInsVi.buf);
            for (let e3 = 0; e3 < this.txIns.length; e3++)
              this.txIns[e3].toBw(t3);
            t3.write(this.txOutsVi.buf);
            for (let e3 = 0; e3 < this.txOuts.length; e3++)
              this.txOuts[e3].toBw(t3);
            return t3.writeUInt32LE(this.nLockTime), t3;
          }
          hashPrevouts() {
            const t3 = new y();
            for (const e3 in this.txIns) {
              const r3 = this.txIns[e3];
              t3.write(r3.txHashBuf), t3.writeUInt32LE(r3.txOutNum);
            }
            return P.sha256Sha256(t3.toBuffer());
          }
          hashSequence() {
            const t3 = new y();
            for (const e3 in this.txIns) {
              const r3 = this.txIns[e3];
              t3.writeUInt32LE(r3.nSequence);
            }
            return P.sha256Sha256(t3.toBuffer());
          }
          hashOutputs() {
            const t3 = new y();
            for (const e3 in this.txOuts) {
              const r3 = this.txOuts[e3];
              t3.write(r3.toBuffer());
            }
            return P.sha256Sha256(t3.toBuffer());
          }
          sighash(t3, e3, r3, i3, s2 = 0, n2 = new et()) {
            const a2 = this.sighashPreimage(t3, e3, r3, i3, s2, n2);
            return 0 === a2.compare(import_buffer.Buffer.from("0000000000000000000000000000000000000000000000000000000000000001", "hex")) ? a2 : new g(P.sha256Sha256(a2)).readReverse();
          }
          async asyncSighash(t3, e3, r3, i3, s2 = 0, n2 = {}) {
            return (await E.asyncObjectMethod(this, "sighash", [t3, e3, r3, i3, s2, n2])).resbuf;
          }
          sighashPreimage(t3, e3, r3, i3, s2 = 0, n2 = new et()) {
            if (t3 & j.SIGHASH_FORKID && s2 & nt.SCRIPT_ENABLE_SIGHASH_FORKID) {
              let s3 = import_buffer.Buffer.alloc(32, 0), a3 = import_buffer.Buffer.alloc(32, 0), o2 = import_buffer.Buffer.alloc(32, 0);
              t3 & j.SIGHASH_ANYONECANPAY || (s3 = n2.prevoutsHashBuf ? n2.prevoutsHashBuf : n2.prevoutsHashBuf = this.hashPrevouts()), t3 & j.SIGHASH_ANYONECANPAY || (31 & t3) === j.SIGHASH_SINGLE || (31 & t3) === j.SIGHASH_NONE || (a3 = n2.sequenceHashBuf ? n2.sequenceHashBuf : n2.sequenceHashBuf = this.hashSequence()), (31 & t3) !== j.SIGHASH_SINGLE && (31 & t3) !== j.SIGHASH_NONE ? o2 = n2.outputsHashBuf ? n2.outputsHashBuf : n2.outputsHashBuf = this.hashOutputs() : (31 & t3) === j.SIGHASH_SINGLE && e3 < this.txOuts.length && (o2 = P.sha256Sha256(this.txOuts[e3].toBuffer()));
              const h2 = new y();
              return h2.writeUInt32LE(this.versionBytesNum), h2.write(s3), h2.write(a3), h2.write(this.txIns[e3].txHashBuf), h2.writeUInt32LE(this.txIns[e3].txOutNum), h2.writeVarIntNum(r3.toBuffer().length), h2.write(r3.toBuffer()), h2.writeUInt64LEBn(i3), h2.writeUInt32LE(this.txIns[e3].nSequence), h2.write(o2), h2.writeUInt32LE(this.nLockTime), h2.writeUInt32LE(t3 >>> 0), h2.toBuffer();
            }
            const a2 = this.cloneByBuffer();
            (r3 = new q().fromBuffer(r3.toBuffer())).removeCodeseparators();
            for (let t4 = 0; t4 < a2.txIns.length; t4++)
              a2.txIns[t4] = it.fromBuffer(a2.txIns[t4].toBuffer()).setScript(new q());
            if (a2.txIns[e3] = it.fromBuffer(a2.txIns[e3].toBuffer()).setScript(r3), (31 & t3) === j.SIGHASH_NONE) {
              a2.txOuts.length = 0, a2.txOutsVi = rt.fromNumber(0);
              for (let t4 = 0; t4 < a2.txIns.length; t4++)
                t4 !== e3 && (a2.txIns[t4].nSequence = 0);
            } else if ((31 & t3) === j.SIGHASH_SINGLE) {
              if (e3 > a2.txOuts.length - 1)
                return import_buffer.Buffer.from("0000000000000000000000000000000000000000000000000000000000000001", "hex");
              a2.txOuts.length = e3 + 1, a2.txOutsVi = rt.fromNumber(e3 + 1);
              for (let t4 = 0; t4 < a2.txOuts.length; t4++)
                t4 < e3 && (a2.txOuts[t4] = st.fromProperties(new p().fromBuffer(import_buffer.Buffer.from("ffffffffffffffff", "hex")), new q()));
              for (let t4 = 0; t4 < a2.txIns.length; t4++)
                t4 !== e3 && (a2.txIns[t4].nSequence = 0);
            }
            return t3 & j.SIGHASH_ANYONECANPAY && (a2.txIns[0] = a2.txIns[e3], a2.txIns.length = 1, a2.txInsVi = rt.fromNumber(1)), new y().write(a2.toBuffer()).writeInt32LE(t3).toBuffer();
          }
          async asyncSighashPreimage(t3, e3, r3, i3, s2 = 0, n2 = {}) {
            return (await E.asyncObjectMethod(this, "sighashPreimage", [t3, e3, r3, i3, s2, n2])).resbuf;
          }
          sign(t3, e3 = j.SIGHASH_ALL | j.SIGHASH_FORKID, r3, i3, s2, n2 = nt.SCRIPT_ENABLE_SIGHASH_FORKID, a2 = {}) {
            const o2 = this.sighash(e3, r3, i3, s2, n2, a2);
            return X.sign(o2, t3, "little").fromObject({ nHashType: e3 });
          }
          async asyncSign(t3, e3 = j.SIGHASH_ALL | j.SIGHASH_FORKID, r3, i3, s2, n2 = nt.SCRIPT_ENABLE_SIGHASH_FORKID, a2 = {}) {
            const o2 = await E.asyncObjectMethod(this, "sign", [t3, e3, r3, i3, s2, n2, a2]);
            return new j().fromFastBuffer(o2.resbuf);
          }
          verify(t3, e3, r3, i3, s2 = false, n2, a2 = nt.SCRIPT_ENABLE_SIGHASH_FORKID, o2 = {}) {
            const h2 = this.sighash(t3.nHashType, r3, i3, n2, a2, o2);
            return X.verify(h2, t3, e3, "little", s2);
          }
          async asyncVerify(t3, e3, r3, i3, s2 = false, n2, a2 = nt.SCRIPT_ENABLE_SIGHASH_FORKID, o2 = {}) {
            const h2 = await E.asyncObjectMethod(this, "verify", [t3, e3, r3, i3, s2, n2, a2, o2]);
            return JSON.parse(h2.resbuf.toString());
          }
          hash() {
            return P.sha256Sha256(this.toBuffer());
          }
          async asyncHash() {
            return (await E.asyncObjectMethod(this, "hash", [])).resbuf;
          }
          id() {
            return new g(this.hash()).readReverse().toString("hex");
          }
          async asyncId() {
            const t3 = await E.asyncObjectMethod(this, "id", []);
            return JSON.parse(t3.resbuf.toString());
          }
          addTxIn(t3, e3, r3, i3) {
            let s2;
            return s2 = t3 instanceof it ? t3 : new it().fromObject({ txHashBuf: t3, txOutNum: e3, nSequence: i3 }).setScript(r3), this.txIns.push(s2), this.txInsVi = rt.fromNumber(this.txInsVi.toNumber() + 1), this;
          }
          addTxOut(t3, e3) {
            let r3;
            return r3 = t3 instanceof st ? t3 : new st().fromObject({ valueBn: t3 }).setScript(e3), this.txOuts.push(r3), this.txOutsVi = rt.fromNumber(this.txOutsVi.toNumber() + 1), this;
          }
          isCoinbase() {
            return 1 === this.txIns.length && this.txIns[0].hasNullInput();
          }
          sort() {
            return this.txIns.sort((t3, e3) => new g(t3.txHashBuf).readReverse().compare(new g(e3.txHashBuf).readReverse()) || t3.txOutNum - e3.txOutNum), this.txOuts.sort((t3, e3) => t3.valueBn.sub(e3.valueBn).toNumber() || t3.script.toBuffer().compare(e3.script.toBuffer())), this;
          }
        }
        nt.MAX_MONEY = 21e14, nt.SCRIPT_ENABLE_SIGHASH_FORKID = 65536;
        class at extends S {
          constructor(t3, e3, r3) {
            super({ blockHeader: t3, txsVi: e3, txs: r3 });
          }
          fromJSON(t3) {
            const e3 = [];
            return t3.txs.forEach(function(t4) {
              e3.push(new nt().fromJSON(t4));
            }), this.fromObject({ blockHeader: new $().fromJSON(t3.blockHeader), txsVi: new rt().fromJSON(t3.txsVi), txs: e3 }), this;
          }
          toJSON() {
            const t3 = [];
            return this.txs.forEach(function(e3) {
              t3.push(e3.toJSON());
            }), { blockHeader: this.blockHeader.toJSON(), txsVi: this.txsVi.toJSON(), txs: t3 };
          }
          fromBr(t3) {
            this.blockHeader = new $().fromBr(t3), this.txsVi = new rt(t3.readVarIntBuf());
            const e3 = this.txsVi.toNumber();
            this.txs = [];
            for (let r3 = 0; r3 < e3; r3++)
              this.txs.push(new nt().fromBr(t3));
            return this;
          }
          toBw(t3) {
            t3 || (t3 = new y()), t3.write(this.blockHeader.toBuffer()), t3.write(this.txsVi.buf);
            const e3 = this.txsVi.toNumber();
            for (let r3 = 0; r3 < e3; r3++)
              this.txs[r3].toBw(t3);
            return t3;
          }
          hash() {
            return P.sha256Sha256(this.blockHeader.toBuffer());
          }
          async asyncHash() {
            return (await E.asyncObjectMethod(this, "hash", [])).resbuf;
          }
          id() {
            return new g(this.hash()).readReverse().toString("hex");
          }
          async asyncId() {
            const t3 = await E.asyncObjectMethod(this, "id", []);
            return JSON.parse(t3.resbuf.toString());
          }
          verifyMerkleRoot() {
            const t3 = this.txs.map((t4) => t4.toBuffer()), e3 = tt.fromBuffers(t3).hash();
            return import_buffer.Buffer.compare(e3, this.blockHeader.merkleRootBuf);
          }
          static iterateTxs(t3) {
            const e3 = new g(t3), r3 = new $().fromBr(e3), i3 = new rt(e3.readVarIntBuf()), s2 = i3.toNumber();
            return { blockHeader: r3, txsVi: i3, txsNum: s2, *[Symbol.iterator]() {
              for (let t4 = 0; t4 < s2; t4++)
                yield new nt().fromBr(e3);
            } };
          }
        }
        at.MAX_BLOCK_SIZE = 1e6;
        class ot extends S {
          constructor(t3, e3, r3, i3 = [], s2 = [], n2 = 0, a2 = 0, o2 = 0, h2 = [], f3 = "", c2 = ot.defaultFlags, u2 = new p(0)) {
            super({ script: t3, tx: e3, nIn: r3, stack: i3, altStack: s2, pc: n2, pBeginCodeHash: a2, nOpCount: o2, ifStack: h2, errStr: f3, flags: c2, valueBn: u2 });
          }
          initialize() {
            return this.script = new q(), this.stack = [], this.altStack = [], this.pc = 0, this.pBeginCodeHash = 0, this.nOpCount = 0, this.ifStack = [], this.errStr = "", this.flags = ot.defaultFlags, this;
          }
          fromJSON(t3) {
            return this.fromJSONNoTx(t3), this.tx = t3.tx ? new nt().fromJSON(t3.tx) : void 0, this;
          }
          fromJSONNoTx(t3) {
            return this.fromObject({ script: void 0 !== t3.script ? new q().fromJSON(t3.script) : void 0, nIn: t3.nIn }), this.stack = [], t3.stack.forEach(function(t4) {
              this.stack.push(import_buffer.Buffer.from(t4, "hex"));
            }.bind(this)), this.altStack = [], t3.altStack.forEach(function(t4) {
              this.altStack.push(import_buffer.Buffer.from(t4, "hex"));
            }.bind(this)), this.fromObject({ pc: t3.pc, pBeginCodeHash: t3.pBeginCodeHash, nOpCount: t3.nOpCount, ifStack: t3.ifStack, errStr: t3.errStr, flags: t3.flags }), this;
          }
          fromBr(t3) {
            let e3 = t3.readVarIntNum(), r3 = t3.read(e3);
            this.fromJSONNoTx(JSON.parse(r3.toString()));
            let i3 = t3.readVarIntNum();
            if (i3 > 0) {
              let e4 = t3.read(i3);
              this.tx = new nt().fromFastBuffer(e4);
            }
            return this;
          }
          toJSON() {
            let t3 = this.toJSONNoTx();
            return t3.tx = this.tx ? this.tx.toJSON() : void 0, t3;
          }
          toJSONNoTx() {
            let t3 = [];
            this.stack.forEach(function(e4) {
              t3.push(e4.toString("hex"));
            });
            let e3 = [];
            return this.altStack.forEach(function(t4) {
              e3.push(t4.toString("hex"));
            }), { script: this.script ? this.script.toJSON() : void 0, nIn: this.nIn, stack: t3, altStack: e3, pc: this.pc, pBeginCodeHash: this.pBeginCodeHash, nOpCount: this.nOpCount, ifStack: this.ifStack, errStr: this.errStr, flags: this.flags };
          }
          toBw(t3) {
            t3 || (t3 = new y());
            let e3 = import_buffer.Buffer.from(JSON.stringify(this.toJSONNoTx()));
            if (t3.writeVarIntNum(e3.length), t3.write(e3), this.tx) {
              let e4 = this.tx.toFastBuffer();
              t3.writeVarIntNum(e4.length), t3.write(e4);
            } else
              t3.writeVarIntNum(0);
            return t3;
          }
          static getFlags(t3) {
            let e3 = 0;
            return -1 !== t3.indexOf("NONE") && (e3 |= ot.SCRIPT_VERIFY_NONE), -1 !== t3.indexOf("P2SH") && (e3 |= ot.SCRIPT_VERIFY_P2SH), -1 !== t3.indexOf("STRICTENC") && (e3 |= ot.SCRIPT_VERIFY_STRICTENC), -1 !== t3.indexOf("DERSIG") && (e3 |= ot.SCRIPT_VERIFY_DERSIG), -1 !== t3.indexOf("LOW_S") && (e3 |= ot.SCRIPT_VERIFY_LOW_S), -1 !== t3.indexOf("NULLDUMMY") && (e3 |= ot.SCRIPT_VERIFY_NULLDUMMY), -1 !== t3.indexOf("SIGPUSHONLY") && (e3 |= ot.SCRIPT_VERIFY_SIGPUSHONLY), -1 !== t3.indexOf("MINIMALDATA") && (e3 |= ot.SCRIPT_VERIFY_MINIMALDATA), -1 !== t3.indexOf("DISCOURAGE_UPGRADABLE_NOPS") && (e3 |= ot.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS), -1 !== t3.indexOf("CLEANSTACK") && (e3 |= ot.SCRIPT_VERIFY_CLEANSTACK), -1 !== t3.indexOf("CHECKLOCKTIMEVERIFY") && (e3 |= ot.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY), -1 !== t3.indexOf("CHECKSEQUENCEVERIFY") && (e3 |= ot.SCRIPT_VERIFY_CHECKSEQUENCEVERIFY), -1 !== t3.indexOf("SIGHASH_FORKID") && (e3 |= ot.SCRIPT_ENABLE_SIGHASH_FORKID), e3;
          }
          static castToBool(t3) {
            for (let e3 = 0; e3 < t3.length; e3++)
              if (0 !== t3[e3])
                return e3 !== t3.length - 1 || 128 !== t3[e3];
            return false;
          }
          checkSigEncoding(t3) {
            if (0 === t3.length)
              return true;
            if (0 != (this.flags & (ot.SCRIPT_VERIFY_DERSIG | ot.SCRIPT_VERIFY_LOW_S | ot.SCRIPT_VERIFY_STRICTENC)) && !j.IsTxDer(t3))
              return this.errStr = "SCRIPT_ERR_SIG_DER", false;
            if (0 != (this.flags & ot.SCRIPT_VERIFY_LOW_S)) {
              if (!new j().fromTxFormat(t3).hasLowS())
                return this.errStr = "SCRIPT_ERR_SIG_DER", false;
            } else if (0 != (this.flags & ot.SCRIPT_VERIFY_STRICTENC) && !new j().fromTxFormat(t3).hasDefinedHashType())
              return this.errStr = "SCRIPT_ERR_SIG_HASHTYPE", false;
            return true;
          }
          checkPubKeyEncoding(t3) {
            return !(0 != (this.flags & ot.SCRIPT_VERIFY_STRICTENC) && !K.isCompressedOrUncompressed(t3) && (this.errStr = "SCRIPT_ERR_PUBKEYTYPE", 1));
          }
          checkLockTime(t3) {
            return (this.tx.nLockTime < ot.LOCKTIME_THRESHOLD && t3 < ot.LOCKTIME_THRESHOLD || this.tx.nLockTime >= ot.LOCKTIME_THRESHOLD && t3 >= ot.LOCKTIME_THRESHOLD) && !(t3 > this.tx.nLockTime) && it.SEQUENCE_FINAL !== this.tx.txIns[this.nIn].nSequence;
          }
          checkSequence(t3) {
            let e3 = this.tx.txIns[this.nIn].nSequence;
            if (this.tx.versionBytesNum < 2)
              return false;
            if (e3 & it.SEQUENCE_LOCKTIME_DISABLE_FLAG)
              return false;
            let r3 = it.SEQUENCE_LOCKTIME_TYPE_FLAG | it.SEQUENCE_LOCKTIME_MASK, i3 = e3 & r3, s2 = t3 & r3;
            return (i3 < it.SEQUENCE_LOCKTIME_TYPE_FLAG && s2 < it.SEQUENCE_LOCKTIME_TYPE_FLAG || i3 >= it.SEQUENCE_LOCKTIME_TYPE_FLAG && s2 >= it.SEQUENCE_LOCKTIME_TYPE_FLAG) && !(s2 > i3);
          }
          *eval() {
            this.script.toBuffer().length > 1e4 && (this.errStr = "SCRIPT_ERR_SCRIPT_SIZE", yield false);
            try {
              for (; this.pc < this.script.chunks.length; ) {
                let t3 = this.step();
                t3 ? yield t3 : yield false;
              }
              this.stack.length + this.altStack.length > 1e3 && (this.errStr = "SCRIPT_ERR_STACK_SIZE", yield false);
            } catch (t3) {
              this.errStr = "SCRIPT_ERR_UNKNOWN_ERROR: " + t3, yield false;
            }
            this.ifStack.length > 0 && (this.errStr = "SCRIPT_ERR_UNBALANCED_CONDITIONAL", yield false), yield true;
          }
          step() {
            let t3 = 0 != (this.flags & ot.SCRIPT_VERIFY_MINIMALDATA), e3 = !(this.ifStack.indexOf(false) + 1), r3 = this.script.chunks[this.pc];
            this.pc++;
            let i3 = r3.opCodeNum;
            if (void 0 === i3)
              return this.errStr = "SCRIPT_ERR_BAD_OPCODE", false;
            if (r3.buf && r3.buf.length > ot.MAX_SCRIPT_ELEMENT_SIZE)
              return this.errStr = "SCRIPT_ERR_PUSH_SIZE", false;
            if (i3 > T.OP_16 && ++this.nOpCount > 201)
              return this.errStr = "SCRIPT_ERR_OP_COUNT", false;
            if (i3 === T.OP_LEFT || i3 === T.OP_RIGHT || i3 === T.OP_2MUL || i3 === T.OP_2DIV)
              return this.errStr = "SCRIPT_ERR_DISABLED_OPCODE", false;
            if (e3 && i3 >= 0 && i3 <= T.OP_PUSHDATA4) {
              if (t3 && !this.script.checkMinimalPush(this.pc - 1))
                return this.errStr = "SCRIPT_ERR_MINIMALDATA", false;
              if (r3.buf) {
                if (r3.len !== r3.buf.length)
                  throw new Error("LEngth of push value not equal to length of data");
                this.stack.push(r3.buf);
              } else
                this.stack.push(ot.false);
            } else if (e3 || T.OP_IF <= i3 && i3 <= T.OP_ENDIF)
              switch (i3) {
                case T.OP_1NEGATE:
                case T.OP_1:
                case T.OP_2:
                case T.OP_3:
                case T.OP_4:
                case T.OP_5:
                case T.OP_6:
                case T.OP_7:
                case T.OP_8:
                case T.OP_9:
                case T.OP_10:
                case T.OP_11:
                case T.OP_12:
                case T.OP_13:
                case T.OP_14:
                case T.OP_15:
                case T.OP_16:
                  {
                    let t4 = new p(i3 - (T.OP_1 - 1)).toScriptNumBuffer();
                    this.stack.push(t4);
                  }
                  break;
                case T.OP_NOP:
                  break;
                case T.OP_CHECKLOCKTIMEVERIFY:
                  {
                    if (!(this.flags & ot.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)) {
                      if (this.flags & ot.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)
                        return this.errStr = "SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS", false;
                      break;
                    }
                    if (this.stack.length < 1)
                      return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                    let e4 = this.stack[this.stack.length - 1], r5 = new p().fromScriptNumBuffer(e4, t3, 5).toNumber();
                    if (r5 < 0)
                      return this.errStr = "SCRIPT_ERR_NEGATIVE_LOCKTIME", false;
                    if (!this.checkLockTime(r5))
                      return this.errStr = "SCRIPT_ERR_UNSATISFIED_LOCKTIME", false;
                  }
                  break;
                case T.OP_CHECKSEQUENCEVERIFY:
                  {
                    if (!(this.flags & ot.SCRIPT_VERIFY_CHECKSEQUENCEVERIFY)) {
                      if (this.flags & ot.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)
                        return this.errStr = "SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS", false;
                      break;
                    }
                    if (this.stack.length < 1)
                      return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                    let e4 = this.stack[this.stack.length - 1], r5 = new p().fromScriptNumBuffer(e4, t3, 5).toNumber();
                    if (r5 < 0)
                      return this.errStr = "SCRIPT_ERR_NEGATIVE_LOCKTIME", false;
                    if (0 != (r5 & it.SEQUENCE_LOCKTIME_DISABLE_FLAG))
                      break;
                    if (!this.checkSequence(r5))
                      return this.errStr = "SCRIPT_ERR_UNSATISFIED_LOCKTIME", false;
                  }
                  break;
                case T.OP_NOP1:
                case T.OP_NOP3:
                case T.OP_NOP4:
                case T.OP_NOP5:
                case T.OP_NOP6:
                case T.OP_NOP7:
                case T.OP_NOP8:
                case T.OP_NOP9:
                case T.OP_NOP10:
                  if (this.flags & ot.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)
                    return this.errStr = "SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS", false;
                  break;
                case T.OP_IF:
                case T.OP_NOTIF:
                  {
                    let t4 = false;
                    if (e3) {
                      if (this.stack.length < 1)
                        return this.errStr = "SCRIPT_ERR_UNBALANCED_CONDITIONAL", false;
                      let e4 = this.stack.pop();
                      t4 = ot.castToBool(e4), i3 === T.OP_NOTIF && (t4 = !t4);
                    }
                    this.ifStack.push(t4);
                  }
                  break;
                case T.OP_ELSE:
                  if (0 === this.ifStack.length)
                    return this.errStr = "SCRIPT_ERR_UNBALANCED_CONDITIONAL", false;
                  this.ifStack[this.ifStack.length - 1] = !this.ifStack[this.ifStack.length - 1];
                  break;
                case T.OP_ENDIF:
                  if (0 === this.ifStack.length)
                    return this.errStr = "SCRIPT_ERR_UNBALANCED_CONDITIONAL", false;
                  this.ifStack.pop();
                  break;
                case T.OP_VERIFY:
                  {
                    if (this.stack.length < 1)
                      return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                    let t4 = this.stack[this.stack.length - 1];
                    if (!ot.castToBool(t4))
                      return this.errStr = "SCRIPT_ERR_VERIFY", false;
                    this.stack.pop();
                  }
                  break;
                case T.OP_RETURN:
                  return this.errStr = "SCRIPT_ERR_OP_RETURN", false;
                case T.OP_TOALTSTACK:
                  if (this.stack.length < 1)
                    return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                  this.altStack.push(this.stack.pop());
                  break;
                case T.OP_FROMALTSTACK:
                  if (this.altStack.length < 1)
                    return this.errStr = "SCRIPT_ERR_INVALID_ALTSTACK_OPERATION", false;
                  this.stack.push(this.altStack.pop());
                  break;
                case T.OP_2DROP:
                  if (this.stack.length < 2)
                    return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                  this.stack.pop(), this.stack.pop();
                  break;
                case T.OP_2DUP:
                  {
                    if (this.stack.length < 2)
                      return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                    let t4 = this.stack[this.stack.length - 2], e4 = this.stack[this.stack.length - 1];
                    this.stack.push(t4), this.stack.push(e4);
                  }
                  break;
                case T.OP_3DUP:
                  {
                    if (this.stack.length < 3)
                      return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                    let t4 = this.stack[this.stack.length - 3], e4 = this.stack[this.stack.length - 2], r5 = this.stack[this.stack.length - 1];
                    this.stack.push(t4), this.stack.push(e4), this.stack.push(r5);
                  }
                  break;
                case T.OP_2OVER:
                  {
                    if (this.stack.length < 4)
                      return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                    let t4 = this.stack[this.stack.length - 4], e4 = this.stack[this.stack.length - 3];
                    this.stack.push(t4), this.stack.push(e4);
                  }
                  break;
                case T.OP_2ROT:
                  {
                    if (this.stack.length < 6)
                      return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                    let t4 = this.stack.splice(this.stack.length - 6, 2);
                    this.stack.push(t4[0]), this.stack.push(t4[1]);
                  }
                  break;
                case T.OP_2SWAP:
                  {
                    if (this.stack.length < 4)
                      return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                    let t4 = this.stack.splice(this.stack.length - 4, 2);
                    this.stack.push(t4[0]), this.stack.push(t4[1]);
                  }
                  break;
                case T.OP_IFDUP:
                  {
                    if (this.stack.length < 1)
                      return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                    let t4 = this.stack[this.stack.length - 1];
                    ot.castToBool(t4) && this.stack.push(t4);
                  }
                  break;
                case T.OP_DEPTH:
                  {
                    let t4 = new p(this.stack.length).toScriptNumBuffer();
                    this.stack.push(t4);
                  }
                  break;
                case T.OP_DROP:
                  if (this.stack.length < 1)
                    return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                  this.stack.pop();
                  break;
                case T.OP_DUP:
                  if (this.stack.length < 1)
                    return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                  this.stack.push(this.stack[this.stack.length - 1]);
                  break;
                case T.OP_NIP:
                  if (this.stack.length < 2)
                    return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                  this.stack.splice(this.stack.length - 2, 1);
                  break;
                case T.OP_OVER:
                  if (this.stack.length < 2)
                    return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                  this.stack.push(this.stack[this.stack.length - 2]);
                  break;
                case T.OP_PICK:
                case T.OP_ROLL:
                  {
                    if (this.stack.length < 2)
                      return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                    let e4 = this.stack[this.stack.length - 1], r5 = new p().fromScriptNumBuffer(e4, t3).toNumber();
                    if (this.stack.pop(), r5 < 0 || r5 >= this.stack.length)
                      return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                    e4 = this.stack[this.stack.length - r5 - 1], i3 === T.OP_ROLL && this.stack.splice(this.stack.length - r5 - 1, 1), this.stack.push(e4);
                  }
                  break;
                case T.OP_ROT:
                  {
                    if (this.stack.length < 3)
                      return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                    let t4 = this.stack[this.stack.length - 3], e4 = this.stack[this.stack.length - 2], r5 = this.stack[this.stack.length - 1];
                    this.stack[this.stack.length - 3] = e4, this.stack[this.stack.length - 2] = r5, this.stack[this.stack.length - 1] = t4;
                  }
                  break;
                case T.OP_SWAP:
                  {
                    if (this.stack.length < 2)
                      return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                    let t4 = this.stack[this.stack.length - 2], e4 = this.stack[this.stack.length - 1];
                    this.stack[this.stack.length - 2] = e4, this.stack[this.stack.length - 1] = t4;
                  }
                  break;
                case T.OP_TUCK:
                  if (this.stack.length < 2)
                    return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                  this.stack.splice(this.stack.length - 2, 0, this.stack[this.stack.length - 1]);
                  break;
                case T.OP_SIZE:
                  {
                    if (this.stack.length < 1)
                      return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                    let t4 = new p(this.stack[this.stack.length - 1].length);
                    this.stack.push(t4.toScriptNumBuffer());
                  }
                  break;
                case T.OP_OR:
                case T.OP_AND:
                case T.OP_XOR:
                  if (this.stack.length < 2)
                    return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                  let r4 = this.stack[this.stack.length - 2], s2 = this.stack[this.stack.length - 1];
                  if (r4.length != s2.length)
                    return this.errStr = "SCRIPT_ERR_INVALID_OPERAND_SIZE", false;
                  switch (i3) {
                    case T.OP_AND:
                      for (let t4 = 0; t4 < r4.length; t4++)
                        r4[t4] &= s2[t4];
                      break;
                    case T.OP_OR:
                      for (let t4 = 0; t4 < r4.length; t4++)
                        r4[t4] |= s2[t4];
                      break;
                    case T.OP_XOR:
                      for (let t4 = 0; t4 < r4.length; t4++)
                        r4[t4] ^= s2[t4];
                  }
                  this.stack.pop();
                  break;
                case T.OP_INVERT:
                  if (this.stack.length < 1)
                    return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                  let n2 = this.stack[this.stack.length - 1];
                  for (let t4 = 0; t4 < n2.length; t4++)
                    n2[t4] = ~n2[t4];
                  break;
                case T.OP_LSHIFT:
                case T.OP_RSHIFT: {
                  if (this.stack.length < 2)
                    return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                  let e4 = this.stack[this.stack.length - 2], r5 = new p(e4), s3 = new p().fromScriptNumBuffer(this.stack[this.stack.length - 1], t3).toNumber();
                  if (s3 < 0)
                    return this.errStr = "SCRIPT_ERR_INVALID_NUMBER_RANGE", false;
                  switch (this.stack.pop(), this.stack.pop(), i3) {
                    case T.OP_LSHIFT:
                      r5 = r5.ushln(s3);
                      break;
                    case T.OP_RSHIFT:
                      r5 = r5.ushrn(s3);
                  }
                  let n3 = r5.toBuffer().slice(-e4.length);
                  n3.length < e4.length && (n3 = import_buffer.Buffer.concat([import_buffer.Buffer.alloc(e4.length - n3.length), n3])), this.stack.push(n3);
                  break;
                }
                case T.OP_EQUAL:
                case T.OP_EQUALVERIFY:
                  {
                    if (this.stack.length < 2)
                      return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                    let t4 = this.stack[this.stack.length - 2], e4 = this.stack[this.stack.length - 1], r5 = B(t4, e4);
                    if (this.stack.pop(), this.stack.pop(), this.stack.push(r5 ? ot.true : ot.false), i3 === T.OP_EQUALVERIFY) {
                      if (!r5)
                        return this.errStr = "SCRIPT_ERR_EQUALVERIFY", false;
                      this.stack.pop();
                    }
                  }
                  break;
                case T.OP_1ADD:
                case T.OP_1SUB:
                case T.OP_NEGATE:
                case T.OP_ABS:
                case T.OP_NOT:
                case T.OP_0NOTEQUAL:
                  {
                    if (this.stack.length < 1)
                      return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                    let e4 = this.stack[this.stack.length - 1], r5 = new p().fromScriptNumBuffer(e4, t3);
                    switch (i3) {
                      case T.OP_1ADD:
                        r5 = r5.add(1);
                        break;
                      case T.OP_1SUB:
                        r5 = r5.sub(1);
                        break;
                      case T.OP_NEGATE:
                        r5 = r5.neg();
                        break;
                      case T.OP_ABS:
                        r5.lt(0) && (r5 = r5.neg());
                        break;
                      case T.OP_NOT:
                        r5 = new p(r5.eq(0) + 0);
                        break;
                      case T.OP_0NOTEQUAL:
                        r5 = new p(r5.neq(0) + 0);
                    }
                    this.stack.pop(), this.stack.push(r5.toScriptNumBuffer());
                  }
                  break;
                case T.OP_ADD:
                case T.OP_SUB:
                case T.OP_MUL:
                case T.OP_DIV:
                case T.OP_MOD:
                case T.OP_BOOLAND:
                case T.OP_BOOLOR:
                case T.OP_NUMEQUAL:
                case T.OP_NUMEQUALVERIFY:
                case T.OP_NUMNOTEQUAL:
                case T.OP_LESSTHAN:
                case T.OP_GREATERTHAN:
                case T.OP_LESSTHANOREQUAL:
                case T.OP_GREATERTHANOREQUAL:
                case T.OP_MIN:
                case T.OP_MAX:
                  {
                    if (this.stack.length < 2)
                      return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                    let e4 = new p().fromScriptNumBuffer(this.stack[this.stack.length - 2], t3), r5 = new p().fromScriptNumBuffer(this.stack[this.stack.length - 1], t3), s3 = new p(0);
                    switch (i3) {
                      case T.OP_ADD:
                        s3 = e4.add(r5);
                        break;
                      case T.OP_SUB:
                        s3 = e4.sub(r5);
                        break;
                      case T.OP_MUL:
                        s3 = e4.mul(r5);
                        break;
                      case T.OP_DIV:
                        if (0 == r5)
                          return this.errStr = "SCRIPT_ERR_DIV_BY_ZERO", false;
                        s3 = e4.div(r5);
                        break;
                      case T.OP_MOD:
                        if (0 == r5)
                          return this.errStr = "SCRIPT_ERR_DIV_BY_ZERO", false;
                        s3 = e4.mod(r5);
                        break;
                      case T.OP_BOOLAND:
                        s3 = new p((e4.neq(0) && r5.neq(0)) + 0);
                        break;
                      case T.OP_BOOLOR:
                        s3 = new p((e4.neq(0) || r5.neq(0)) + 0);
                        break;
                      case T.OP_NUMEQUAL:
                      case T.OP_NUMEQUALVERIFY:
                        s3 = new p(e4.eq(r5) + 0);
                        break;
                      case T.OP_NUMNOTEQUAL:
                        s3 = new p(e4.neq(r5) + 0);
                        break;
                      case T.OP_LESSTHAN:
                        s3 = new p(e4.lt(r5) + 0);
                        break;
                      case T.OP_GREATERTHAN:
                        s3 = new p(e4.gt(r5) + 0);
                        break;
                      case T.OP_LESSTHANOREQUAL:
                        s3 = new p(e4.leq(r5) + 0);
                        break;
                      case T.OP_GREATERTHANOREQUAL:
                        s3 = new p(e4.geq(r5) + 0);
                        break;
                      case T.OP_MIN:
                        s3 = e4.lt(r5) ? e4 : r5;
                        break;
                      case T.OP_MAX:
                        s3 = e4.gt(r5) ? e4 : r5;
                    }
                    if (this.stack.pop(), this.stack.pop(), this.stack.push(s3.toScriptNumBuffer()), i3 === T.OP_NUMEQUALVERIFY) {
                      if (!ot.castToBool(this.stack[this.stack.length - 1]))
                        return this.errStr = "SCRIPT_ERR_NUMEQUALVERIFY", false;
                      this.stack.pop();
                    }
                  }
                  break;
                case T.OP_WITHIN:
                  {
                    if (this.stack.length < 3)
                      return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                    let e4 = new p().fromScriptNumBuffer(this.stack[this.stack.length - 3], t3), r5 = new p().fromScriptNumBuffer(this.stack[this.stack.length - 2], t3), i4 = new p().fromScriptNumBuffer(this.stack[this.stack.length - 1], t3), s3 = r5.leq(e4) && e4.lt(i4);
                    this.stack.pop(), this.stack.pop(), this.stack.pop(), this.stack.push(s3 ? ot.true : ot.false);
                  }
                  break;
                case T.OP_RIPEMD160:
                case T.OP_SHA1:
                case T.OP_SHA256:
                case T.OP_HASH160:
                case T.OP_HASH256:
                  {
                    if (this.stack.length < 1)
                      return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                    let t4, e4 = this.stack[this.stack.length - 1];
                    i3 === T.OP_RIPEMD160 ? t4 = P.ripemd160(e4) : i3 === T.OP_SHA1 ? t4 = P.sha1(e4) : i3 === T.OP_SHA256 ? t4 = P.sha256(e4) : i3 === T.OP_HASH160 ? t4 = P.sha256Ripemd160(e4) : i3 === T.OP_HASH256 && (t4 = P.sha256Sha256(e4)), this.stack.pop(), this.stack.push(t4);
                  }
                  break;
                case T.OP_CODESEPARATOR:
                  this.pBeginCodeHash = this.pc;
                  break;
                case T.OP_CHECKSIG:
                case T.OP_CHECKSIGVERIFY:
                  {
                    if (this.stack.length < 2)
                      return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                    let t4, e4 = this.stack[this.stack.length - 2], r5 = this.stack[this.stack.length - 1], s3 = new q().fromObject({ chunks: this.script.chunks.slice(this.pBeginCodeHash) });
                    if ((e4.length > 0 ? e4.readUInt8(e4.length - 1) : 0) & j.SIGHASH_FORKID) {
                      if (!(this.flags & ot.SCRIPT_ENABLE_SIGHASH_FORKID))
                        return this.errStr = "SCRIPT_ERR_ILLEGAL_FORKID", false;
                    } else
                      s3.findAndDelete(new q().writeBuffer(e4));
                    if (!this.checkSigEncoding(e4) || !this.checkPubKeyEncoding(r5))
                      return false;
                    try {
                      let i4 = new j().fromTxFormat(e4), n3 = new K().fromBuffer(r5, false);
                      t4 = this.tx.verify(i4, n3, this.nIn, s3, Boolean(this.flags & ot.SCRIPT_VERIFY_LOW_S), this.valueBn, this.flags);
                    } catch (e5) {
                      t4 = false;
                    }
                    if (this.stack.pop(), this.stack.pop(), this.stack.push(t4 ? ot.true : ot.false), i3 === T.OP_CHECKSIGVERIFY) {
                      if (!t4)
                        return this.errStr = "SCRIPT_ERR_CHECKSIGVERIFY", false;
                      this.stack.pop();
                    }
                  }
                  break;
                case T.OP_CHECKMULTISIG:
                case T.OP_CHECKMULTISIGVERIFY:
                  {
                    let e4 = 1;
                    if (this.stack.length < e4)
                      return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                    let r5 = new p().fromScriptNumBuffer(this.stack[this.stack.length - e4], t3).toNumber();
                    if (r5 < 0 || r5 > 20)
                      return this.errStr = "SCRIPT_ERR_PUBKEY_COUNT", false;
                    if (this.nOpCount += r5, this.nOpCount > 201)
                      return this.errStr = "SCRIPT_ERR_OP_COUNT", false;
                    let s3 = ++e4;
                    if (e4 += r5, this.stack.length < e4)
                      return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                    let n3 = new p().fromScriptNumBuffer(this.stack[this.stack.length - e4], t3).toNumber();
                    if (n3 < 0 || n3 > r5)
                      return this.errStr = "SCRIPT_ERR_SIG_COUNT", false;
                    let a3 = ++e4;
                    if (e4 += n3, this.stack.length < e4)
                      return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                    let o3 = new q().fromObject({ chunks: this.script.chunks.slice(this.pBeginCodeHash) });
                    for (let t4 = 0; t4 < n3; t4++) {
                      let e5 = this.stack[this.stack.length - a3 - t4];
                      if ((e5.length > 0 ? e5.readUInt8(e5.length - 1) : 0) & j.SIGHASH_FORKID) {
                        if (!(this.flags & ot.SCRIPT_ENABLE_SIGHASH_FORKID))
                          return this.errStr = "SCRIPT_ERR_ILLEGAL_FORKID", false;
                      } else
                        o3.findAndDelete(new q().writeBuffer(e5));
                    }
                    let h3 = true;
                    for (; h3 && n3 > 0; ) {
                      let t4, e5 = this.stack[this.stack.length - a3], i4 = this.stack[this.stack.length - s3];
                      if (!this.checkSigEncoding(e5) || !this.checkPubKeyEncoding(i4))
                        return false;
                      try {
                        let r6 = new j().fromTxFormat(e5), s4 = new K().fromBuffer(i4, false);
                        t4 = this.tx.verify(r6, s4, this.nIn, o3, Boolean(this.flags & ot.SCRIPT_VERIFY_LOW_S), this.valueBn, this.flags);
                      } catch (e6) {
                        t4 = false;
                      }
                      t4 && (a3++, n3--), s3++, r5--, n3 > r5 && (h3 = false);
                    }
                    for (; e4-- > 1; )
                      this.stack.pop();
                    if (this.stack.length < 1)
                      return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                    if (this.flags & ot.SCRIPT_VERIFY_NULLDUMMY && this.stack[this.stack.length - 1].length)
                      return this.errStr = "SCRIPT_ERR_SIG_NULLDUMMY", false;
                    if (this.stack.pop(), this.stack.push(h3 ? ot.true : ot.false), i3 === T.OP_CHECKMULTISIGVERIFY) {
                      if (!h3)
                        return this.errStr = "SCRIPT_ERR_CHECKMULTISIGVERIFY", false;
                      this.stack.pop();
                    }
                  }
                  break;
                case T.OP_CAT:
                  if (this.stack.length < 2)
                    return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                  let a2 = this.stack[this.stack.length - 2], o2 = this.stack[this.stack.length - 1];
                  this.stack[this.stack.length - 2] = import_buffer.Buffer.concat([a2, o2]), this.stack.pop();
                  break;
                case T.OP_SPLIT:
                  if (this.stack.length < 2)
                    return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", false;
                  let h2 = this.stack[this.stack.length - 2], f3 = new p().fromScriptNumBuffer(this.stack[this.stack.length - 1], t3);
                  if (f3.lt(0) || f3.gt(h2.length))
                    return this.errStr = "SCRIPT_ERR_INVALID_SPLIT_RANGE", false;
                  let c2 = h2.slice(0, f3), u2 = h2.slice(f3);
                  this.stack.pop(), this.stack.pop(), this.stack.push(c2), this.stack.push(u2);
                  break;
                default:
                  return this.errStr = "SCRIPT_ERR_BAD_OPCODE", false;
              }
            return true;
          }
          verify(t3, e3, r3, i3, s2, n2) {
            let a2 = this.results(t3, e3, r3, i3, s2, n2);
            for (let t4 of a2)
              if (!t4)
                return false;
            return true;
          }
          *results(t3, e3, r3, i3, s2, n2) {
            let a2;
            this.fromObject({ script: t3, tx: r3, nIn: i3, flags: s2, valueBn: n2 }), 0 == (s2 & ot.SCRIPT_VERIFY_SIGPUSHONLY) || t3.isPushOnly() || (this.errStr = this.errStr || "SCRIPT_ERR_SIG_PUSHONLY", yield false), yield* this.eval(), s2 & ot.SCRIPT_VERIFY_P2SH && (a2 = this.stack.slice());
            let o2 = this.stack;
            this.initialize(), this.fromObject({ script: e3, stack: o2, tx: r3, nIn: i3, flags: s2, valueBn: n2 }), yield* this.eval(), 0 === this.stack.length && (this.errStr = this.errStr || "SCRIPT_ERR_EVAL_FALSE", yield false);
            let h2 = this.stack[this.stack.length - 1];
            if (ot.castToBool(h2) || (this.errStr = this.errStr || "SCRIPT_ERR_EVAL_FALSE", yield false), s2 & ot.SCRIPT_VERIFY_P2SH && e3.isScriptHashOut()) {
              t3.isPushOnly() || (this.errStr = this.errStr || "SCRIPT_ERR_SIG_PUSHONLY", yield false);
              let e4 = o2;
              if (o2 = a2, a2 = e4, 0 === o2.length)
                throw new Error("internal error - stack copy empty");
              let h3 = o2[o2.length - 1], f3 = new q().fromBuffer(h3);
              o2.pop(), this.initialize(), this.fromObject({ script: f3, stack: o2, tx: r3, nIn: i3, flags: s2, valueBn: n2 }), yield* this.eval(), 0 === o2.length && (this.errStr = this.errStr || "SCRIPT_ERR_EVAL_FALSE", yield false), ot.castToBool(o2[o2.length - 1]) ? yield true : (this.errStr = this.errStr || "SCRIPT_ERR_EVAL_FALSE", yield false);
            }
            if (0 != (s2 & ot.SCRIPT_VERIFY_CLEANSTACK)) {
              if (!(s2 & ot.SCRIPT_VERIFY_P2SH))
                throw new Error("cannot use CLEANSTACK without P2SH");
              1 !== o2.length && (this.errStr = this.errStr || "SCRIPT_ERR_CLEANSTACK", yield false);
            }
            yield true;
          }
          getDebugObject() {
            let t3 = this.pc - 1;
            return { errStr: this.errStr, scriptStr: this.script ? this.script.toString() : "no script found", pc: t3, stack: this.stack.map((t4) => t4.toString("hex")), altStack: this.altStack.map((t4) => t4.toString("hex")), opCodeStr: this.script ? T.fromNumber(this.script.chunks[t3].opCodeNum).toString() : "no script found" };
          }
          getDebugString() {
            return JSON.stringify(this.getDebugObject(), null, 2);
          }
        }
        ot.true = import_buffer.Buffer.from([1]), ot.false = import_buffer.Buffer.from([]), ot.MAX_SCRIPT_ELEMENT_SIZE = 520, ot.LOCKTIME_THRESHOLD = 5e8, ot.SCRIPT_VERIFY_NONE = 0, ot.SCRIPT_VERIFY_P2SH = 1, ot.SCRIPT_VERIFY_STRICTENC = 2, ot.SCRIPT_VERIFY_DERSIG = 4, ot.SCRIPT_VERIFY_LOW_S = 8, ot.SCRIPT_VERIFY_NULLDUMMY = 16, ot.SCRIPT_VERIFY_SIGPUSHONLY = 32, ot.SCRIPT_VERIFY_MINIMALDATA = 64, ot.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS = 128, ot.SCRIPT_VERIFY_CLEANSTACK = 256, ot.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY = 512, ot.SCRIPT_VERIFY_CHECKSEQUENCEVERIFY = 1024, ot.SCRIPT_ENABLE_SIGHASH_FORKID = 65536, ot.defaultFlags = ot.SCRIPT_VERIFY_P2SH | ot.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;
        class ht extends S {
          constructor(t3 = /* @__PURE__ */ new Map()) {
            super({ map: t3 });
          }
          toJSON() {
            const t3 = {};
            return this.map.forEach((e3, r3) => {
              t3[r3] = e3.map((t4) => ({ nScriptChunk: t4.nScriptChunk, type: t4.type, addressStr: t4.addressStr, nHashType: t4.nHashType, log: t4.log }));
            }), t3;
          }
          fromJSON(t3) {
            return Object.keys(t3).forEach((e3) => {
              this.map.set(e3, t3[e3].map((t4) => ({ nScriptChunk: t4.nScriptChunk, type: t4.type, addressStr: t4.addressStr, nHashType: t4.nHashType, log: t4.log })));
            }), this;
          }
          setOne(t3, e3, r3, i3 = "sig", s2, n2 = j.SIGHASH_ALL | j.SIGHASH_FORKID) {
            const a2 = t3.toString("hex") + ":" + e3, o2 = { nScriptChunk: r3, type: i3, addressStr: s2, nHashType: n2 };
            return this.map.set(a2, [o2]), this;
          }
          setMany(t3, e3, r3) {
            const i3 = t3.toString("hex") + ":" + e3;
            return r3 = r3.map((t4) => ({ type: t4.type || "sig", nHashType: t4.nHashType || j.SIGHASH_ALL | j.SIGHASH_FORKID, ...t4 })), this.map.set(i3, r3), this;
          }
          addOne(t3, e3, r3, i3 = "sig", s2, n2 = j.SIGHASH_ALL | j.SIGHASH_FORKID) {
            const a2 = this.get(t3, e3) || [];
            return a2.push({ nScriptChunk: r3, type: i3, addressStr: s2, nHashType: n2 }), this.setMany(t3, e3, a2), this;
          }
          get(t3, e3) {
            const r3 = t3.toString("hex") + ":" + e3;
            return this.map.get(r3) || [];
          }
        }
        class ft extends S {
          constructor(t3 = /* @__PURE__ */ new Map()) {
            super({ map: t3 });
          }
          toJSON() {
            const t3 = {};
            return this.map.forEach((e3, r3) => {
              t3[r3] = e3.toHex();
            }), t3;
          }
          fromJSON(t3) {
            return Object.keys(t3).forEach((e3) => {
              this.map.set(e3, st.fromHex(t3[e3]));
            }), this;
          }
          set(t3, e3, r3) {
            const i3 = t3.toString("hex") + ":" + e3;
            return this.map.set(i3, r3), this;
          }
          get(t3, e3) {
            const r3 = t3.toString("hex") + ":" + e3;
            return this.map.get(r3);
          }
          setTx(t3) {
            const e3 = t3.hash().toString("hex");
            return t3.txOuts.forEach((t4, r3) => {
              const i3 = e3 + ":" + r3;
              this.map.set(i3, t4);
            }), this;
          }
        }
        const ct = x.Default.TxBuilder;
        class ut extends S {
          constructor(t3 = new nt(), e3 = [], r3 = [], i3 = new ft(), s2 = new ht(), n2, a2, o2, h2 = ct.feePerKbNum, f3 = 0, c2 = 1, u2 = 1, d2 = ct.dust, l2 = false, p2 = new et()) {
            super({ tx: t3, txIns: e3, txOuts: r3, uTxOutMap: i3, sigOperations: s2, changeScript: n2, changeAmountBn: a2, feeAmountBn: o2, feePerKbNum: h2, nLockTime: f3, versionBytesNum: c2, sigsPerInput: u2, dust: d2, dustChangeToFees: l2, hashCache: p2 });
          }
          toJSON() {
            const t3 = {};
            return t3.tx = this.tx.toHex(), t3.txIns = this.txIns.map((t4) => t4.toHex()), t3.txOuts = this.txOuts.map((t4) => t4.toHex()), t3.uTxOutMap = this.uTxOutMap.toJSON(), t3.sigOperations = this.sigOperations.toJSON(), t3.changeScript = this.changeScript ? this.changeScript.toHex() : void 0, t3.changeAmountBn = this.changeAmountBn ? this.changeAmountBn.toNumber() : void 0, t3.feeAmountBn = this.feeAmountBn ? this.feeAmountBn.toNumber() : void 0, t3.feePerKbNum = this.feePerKbNum, t3.sigsPerInput = this.sigsPerInput, t3.dust = this.dust, t3.dustChangeToFees = this.dustChangeToFees, t3.hashCache = this.hashCache.toJSON(), t3;
          }
          fromJSON(t3) {
            return this.tx = new nt().fromHex(t3.tx), this.txIns = t3.txIns.map((t4) => it.fromHex(t4)), this.txOuts = t3.txOuts.map((t4) => st.fromHex(t4)), this.uTxOutMap = new ft().fromJSON(t3.uTxOutMap), this.sigOperations = new ht().fromJSON(t3.sigOperations), this.changeScript = t3.changeScript ? new q().fromHex(t3.changeScript) : void 0, this.changeAmountBn = t3.changeAmountBn ? new p(t3.changeAmountBn) : void 0, this.feeAmountBn = t3.feeAmountBn ? new p(t3.feeAmountBn) : void 0, this.feePerKbNum = t3.feePerKbNum || this.feePerKbNum, this.sigsPerInput = t3.sigsPerInput || this.sigsPerInput, this.dust = t3.dust || this.dust, this.dustChangeToFees = t3.dustChangeToFees || this.dustChangeToFees, this.hashCache = et.fromJSON(t3.hashCache), this;
          }
          setFeePerKbNum(t3) {
            if ("number" != typeof t3 || t3 < 0)
              throw new Error("cannot set a fee of zero or less");
            return this.feePerKbNum = t3, this;
          }
          setChangeAddress(t3) {
            return this.changeScript = t3.toTxOutScript(), this;
          }
          setChangeScript(t3) {
            return this.changeScript = t3, this;
          }
          setNLocktime(t3) {
            return this.nLockTime = t3, this;
          }
          setVersion(t3) {
            return this.versionBytesNum = t3, this;
          }
          setDust(t3 = ct.dust) {
            return this.dust = t3, this;
          }
          sendDustChangeToFees(t3 = false) {
            return this.dustChangeToFees = t3, this;
          }
          importPartiallySignedTx(t3, e3 = this.uTxOutMap, r3 = this.sigOperations) {
            return this.tx = t3, this.uTxOutMap = e3, this.sigOperations = r3, this;
          }
          inputFromScript(t3, e3, r3, i3, s2) {
            if (!(import_buffer.Buffer.isBuffer(t3) && "number" == typeof e3 && r3 instanceof st && i3 instanceof q))
              throw new Error("invalid one of: txHashBuf, txOutNum, txOut, script");
            return this.txIns.push(it.fromProperties(t3, e3, i3, s2)), this.uTxOutMap.set(t3, e3, r3), this;
          }
          addSigOperation(t3, e3, r3, i3, s2, n2) {
            return this.sigOperations.addOne(t3, e3, r3, i3, s2, n2), this;
          }
          inputFromPubKeyHash(t3, e3, r3, i3, s2, n2) {
            if (!(import_buffer.Buffer.isBuffer(t3) && "number" == typeof e3 && r3 instanceof st))
              throw new Error("invalid one of: txHashBuf, txOutNum, txOut");
            this.txIns.push(new it().fromObject({ nSequence: s2 }).fromPubKeyHashTxOut(t3, e3, r3, i3)), this.uTxOutMap.set(t3, e3, r3);
            const a2 = z.fromTxOutScript(r3.script).toString();
            return this.addSigOperation(t3, e3, 0, "sig", a2, n2), this.addSigOperation(t3, e3, 1, "pubKey", a2), this;
          }
          outputToAddress(t3, e3) {
            if (!(e3 instanceof z && t3 instanceof p))
              throw new Error("addr must be an Address, and valueBn must be a Bn");
            const r3 = new q().fromPubKeyHash(e3.hashBuf);
            return this.outputToScript(t3, r3), this;
          }
          outputToScript(t3, e3) {
            if (!(e3 instanceof q && t3 instanceof p))
              throw new Error("script must be a Script, and valueBn must be a Bn");
            const r3 = st.fromProperties(t3, e3);
            return this.txOuts.push(r3), this;
          }
          buildOutputs() {
            let t3 = new p(0);
            return this.txOuts.forEach((e3) => {
              if (e3.valueBn.lt(this.dust) && !e3.script.isNonSpendable())
                throw new Error("cannot create output lesser than dust");
              t3 = t3.add(e3.valueBn), this.tx.addTxOut(e3);
            }), t3;
          }
          buildInputs(t3, e3 = 0) {
            let r3 = new p(0);
            for (const i3 of this.txIns) {
              const s2 = this.uTxOutMap.get(i3.txHashBuf, i3.txOutNum);
              if (r3 = r3.add(s2.valueBn), this.tx.addTxIn(i3), r3.geq(t3)) {
                if (e3 <= 0)
                  break;
                e3--;
              }
            }
            if (r3.lt(t3))
              throw new Error("not enough funds for outputs: inAmountBn " + r3.toNumber() + " outAmountBn " + t3.toNumber());
            return r3;
          }
          estimateSize() {
            let t3 = this.tx.toBuffer().length;
            return this.tx.txIns.forEach((e3) => {
              const { txHashBuf: r3, txOutNum: i3 } = e3;
              this.sigOperations.get(r3, i3).forEach((r4) => {
                const { nScriptChunk: i4, type: s2 } = r4, n2 = new q([e3.script.chunks[i4]]).toBuffer().length;
                if (t3 -= n2, "sig" === s2)
                  t3 += 72;
                else {
                  if ("pubKey" !== r4.type)
                    throw new Error("unsupported sig operations type");
                  t3 += 35;
                }
              });
            }), t3 += 1, Math.round(t3);
          }
          estimateFee(t3 = new p(0)) {
            return new p(Math.ceil(this.estimateSize() / 1e3 * this.feePerKbNum)).add(t3);
          }
          build(t3 = { useAllInputs: false }) {
            let e3;
            if (this.txIns.length <= 0)
              throw Error("tx-builder number of inputs must be greater than 0");
            if (!this.changeScript)
              throw new Error("must specify change script to use build method");
            for (let r3 = t3.useAllInputs ? this.txIns.length - 1 : 0; r3 < this.txIns.length; r3++) {
              this.tx = new nt();
              const t4 = this.buildOutputs(), i3 = st.fromProperties(new p(0), this.changeScript);
              let s2;
              this.tx.addTxOut(i3);
              try {
                s2 = this.buildInputs(t4, r3);
              } catch (t5) {
                throw t5.message.includes("not enough funds for outputs") ? new Error("unable to gather enough inputs for outputs and fee") : t5;
              }
              if (this.changeAmountBn = s2.sub(t4), i3.valueBn = this.changeAmountBn, e3 = this.estimateFee(), this.changeAmountBn.geq(e3) && this.changeAmountBn.sub(e3).gt(this.dust))
                break;
            }
            if (this.changeAmountBn.geq(e3)) {
              if (this.feeAmountBn = e3, this.changeAmountBn = this.changeAmountBn.sub(this.feeAmountBn), this.tx.txOuts[this.tx.txOuts.length - 1].valueBn = this.changeAmountBn, this.changeAmountBn.lt(this.dust)) {
                if (!this.dustChangeToFees)
                  throw new Error("unable to create change amount greater than dust");
                this.tx.txOuts.pop(), this.tx.txOutsVi = rt.fromNumber(this.tx.txOutsVi.toNumber() - 1), this.feeAmountBn = this.feeAmountBn.add(this.changeAmountBn), this.changeAmountBn = new p(0);
              }
              if (this.tx.nLockTime = this.nLockTime, this.tx.versionBytesNum = this.versionBytesNum, 0 === this.tx.txOuts.length)
                throw new Error("outputs length is zero - unable to create any outputs greater than dust");
              return this;
            }
            throw new Error("unable to gather enough inputs for outputs and fee");
          }
          sort() {
            return this.tx.sort(), this;
          }
          static allSigsPresent(t3, e3) {
            let r3 = 0;
            for (let t4 = 1; t4 < e3.chunks.length - 1; t4++)
              e3.chunks[t4].buf && r3++;
            return r3 === t3;
          }
          static removeBlankSigs(t3) {
            t3 = new q(t3.chunks.slice());
            for (let e3 = 1; e3 < t3.chunks.length - 1; e3++)
              t3.chunks[e3].buf || t3.chunks.splice(e3, 1);
            return t3;
          }
          fillSig(t3, e3, r3) {
            const i3 = this.tx.txIns[t3];
            return i3.script.chunks[e3] = new q().writeBuffer(r3.toTxFormat()).chunks[0], i3.scriptVi = rt.fromNumber(i3.script.toBuffer().length), this;
          }
          getSig(t3, e3 = j.SIGHASH_ALL | j.SIGHASH_FORKID, r3, i3, s2 = nt.SCRIPT_ENABLE_SIGHASH_FORKID) {
            let n2;
            if (e3 & j.SIGHASH_FORKID && s2 & nt.SCRIPT_ENABLE_SIGHASH_FORKID) {
              const t4 = this.tx.txIns[r3].txHashBuf, e4 = this.tx.txIns[r3].txOutNum, i4 = this.uTxOutMap.get(t4, e4);
              if (!i4)
                throw new Error("for SIGHASH_FORKID must provide UTXOs");
              n2 = i4.valueBn;
            }
            return this.tx.sign(t3, e3, r3, i3, n2, s2, this.hashCache);
          }
          asyncGetSig(t3, e3 = j.SIGHASH_ALL | j.SIGHASH_FORKID, r3, i3, s2 = nt.SCRIPT_ENABLE_SIGHASH_FORKID) {
            let n2;
            if (e3 & j.SIGHASH_FORKID && s2 & nt.SCRIPT_ENABLE_SIGHASH_FORKID) {
              const t4 = this.tx.txIns[r3].txHashBuf, e4 = this.tx.txIns[r3].txOutNum, i4 = this.uTxOutMap.get(t4, e4);
              if (!i4)
                throw new Error("for SIGHASH_FORKID must provide UTXOs");
              n2 = i4.valueBn;
            }
            return this.tx.asyncSign(t3, e3, r3, i3, n2, s2, this.hashCache);
          }
          signTxIn(t3, e3, r3, i3, s2 = j.SIGHASH_ALL | j.SIGHASH_FORKID, n2 = nt.SCRIPT_ENABLE_SIGHASH_FORKID) {
            const a2 = this.tx.txIns[t3], o2 = a2.script;
            if (void 0 === i3 && o2.isPubKeyHashIn() && (i3 = 0), void 0 === i3)
              throw new Error("cannot sign unknown script type for input " + t3);
            const h2 = a2.txHashBuf, f3 = a2.txOutNum;
            r3 || (r3 = this.uTxOutMap.get(h2, f3));
            const c2 = r3.script, u2 = this.getSig(e3, s2, t3, c2, n2, this.hashCache);
            return this.fillSig(t3, i3, u2), this;
          }
          async asyncSignTxIn(t3, e3, r3, i3, s2 = j.SIGHASH_ALL | j.SIGHASH_FORKID, n2 = nt.SCRIPT_ENABLE_SIGHASH_FORKID) {
            const a2 = this.tx.txIns[t3], o2 = a2.script;
            if (void 0 === i3 && o2.isPubKeyHashIn() && (i3 = 0), void 0 === i3)
              throw new Error("cannot sign unknown script type for input " + t3);
            const h2 = a2.txHashBuf, f3 = a2.txOutNum;
            r3 || (r3 = this.uTxOutMap.get(h2, f3));
            const c2 = r3.script, u2 = await this.asyncGetSig(e3, s2, t3, c2, n2, this.hashCache);
            return this.fillSig(t3, i3, u2), this;
          }
          signWithKeyPairs(t3) {
            const e3 = {};
            for (const r3 of t3)
              e3[z.fromPubKey(r3.pubKey).toString()] = r3;
            for (const t4 in this.tx.txIns) {
              const r3 = this.tx.txIns[t4], i3 = this.sigOperations.get(r3.txHashBuf, r3.txOutNum);
              for (const s2 of i3) {
                const { nScriptChunk: i4, type: n2, addressStr: a2, nHashType: o2 } = s2, h2 = e3[a2];
                if (!h2) {
                  s2.log = `cannot find keyPair for addressStr ${a2}`;
                  continue;
                }
                const f3 = this.uTxOutMap.get(r3.txHashBuf, r3.txOutNum);
                if ("sig" === n2)
                  this.signTxIn(t4, h2, f3, i4, o2), s2.log = "successfully inserted signature";
                else {
                  if ("pubKey" !== n2) {
                    s2.log = `cannot perform operation of type ${n2}`;
                    continue;
                  }
                  r3.script.chunks[i4] = new q().writeBuffer(h2.pubKey.toBuffer()).chunks[0], r3.setScript(r3.script), s2.log = "successfully inserted public key";
                }
              }
            }
            return this;
          }
        }
        class dt extends S {
          constructor(t3, e3, r3, i3) {
            super({ tx: t3, txOutMap: e3, errStr: r3, interp: i3 });
          }
          verify(t3 = ot.SCRIPT_ENABLE_SIGHASH_FORKID) {
            return !this.checkStr() && !this.verifyStr(t3);
          }
          async asyncVerify(t3) {
            const e3 = await this.asyncVerifyStr(t3);
            return !this.checkStr() && !e3;
          }
          static verify(t3, e3, r3) {
            return new dt(t3, e3).verify(r3);
          }
          static asyncVerify(t3, e3, r3) {
            return new dt(t3, e3).asyncVerify(r3);
          }
          checkStr() {
            if (0 === this.tx.txIns.length || 0 === this.tx.txInsVi.toNumber())
              return this.errStr = "transaction txIns empty", this.errStr;
            if (0 === this.tx.txOuts.length || 0 === this.tx.txOutsVi.toNumber())
              return this.errStr = "transaction txOuts empty", this.errStr;
            if (this.tx.toBuffer().length > at.MAX_BLOCK_SIZE)
              return this.errStr = "transaction over the maximum block size", this.errStr;
            let t3 = new p(0);
            for (let e4 = 0; e4 < this.tx.txOuts.length; e4++) {
              const r3 = this.tx.txOuts[e4];
              if (r3.valueBn.lt(0))
                return this.errStr = "transaction txOut " + e4 + " negative", this.errStr;
              if (r3.valueBn.gt(nt.MAX_MONEY))
                return this.errStr = "transaction txOut " + e4 + " greater than MAX_MONEY", this.errStr;
              if (t3 = t3.add(r3.valueBn), t3.gt(nt.MAX_MONEY))
                return this.errStr = "transaction txOut " + e4 + " total output greater than MAX_MONEY", this.errStr;
            }
            const e3 = {};
            for (let t4 = 0; t4 < this.tx.txIns.length; t4++) {
              const r3 = this.tx.txIns[t4], i3 = r3.txHashBuf.toString("hex") + ":" + r3.txOutNum;
              if (void 0 !== e3[i3])
                return this.errStr = "transaction input " + t4 + " duplicate input", this.errStr;
              e3[i3] = true;
            }
            if (this.tx.isCoinbase()) {
              const t4 = this.tx.txIns[0].script.toBuffer();
              if (t4.length < 2 || t4.length > 100)
                return this.errStr = "coinbase trasaction script size invalid", this.errStr;
            } else
              for (let t4 = 0; t4 < this.tx.txIns.length; t4++)
                if (this.tx.txIns[t4].hasNullInput())
                  return this.errStr = "transaction input " + t4 + " has null input", this.errStr;
            return false;
          }
          verifyStr(t3) {
            for (let e3 = 0; e3 < this.tx.txIns.length; e3++)
              if (!this.verifyNIn(e3, t3))
                return this.errStr = "input " + e3 + " failed script verify", this.errStr;
            return false;
          }
          async asyncVerifyStr(t3) {
            for (let e3 = 0; e3 < this.tx.txIns.length; e3++)
              if (!await this.asyncVerifyNIn(e3, t3))
                return this.errStr = "input " + e3 + " failed script verify", this.errStr;
            return false;
          }
          verifyNIn(t3, e3) {
            const r3 = this.tx.txIns[t3], i3 = r3.script, s2 = this.txOutMap.get(r3.txHashBuf, r3.txOutNum);
            if (!s2)
              return console.log("output " + r3.txOutNum + " not found"), false;
            const n2 = s2.script, a2 = s2.valueBn;
            return this.interp = new ot(), this.interp.verify(i3, n2, this.tx, t3, e3, a2);
          }
          async asyncVerifyNIn(t3, e3) {
            const r3 = this.tx.txIns[t3], i3 = r3.script, s2 = this.txOutMap.get(r3.txHashBuf, r3.txOutNum);
            if (!s2)
              return console.log("output " + r3.txOutNum + " not found"), false;
            const n2 = s2.script, a2 = s2.valueBn;
            this.interp = new ot();
            const o2 = await E.asyncObjectMethod(this.interp, "verify", [i3, n2, this.tx, t3, e3, a2]);
            return JSON.parse(o2.resbuf.toString());
          }
          getDebugObject() {
            return { errStr: this.errStr, interpFailure: this.interp ? this.interp.getDebugObject() : void 0 };
          }
          getDebugString() {
            return JSON.stringify(this.getDebugObject(), null, 2);
          }
        }
        class lt {
        }
        lt.encrypt = function(t3, e3) {
          const r3 = lt.buf2Words(e3), i3 = lt.buf2Words(t3), n2 = new (s())(r3).encrypt(i3);
          return lt.words2Buf(n2);
        }, lt.decrypt = function(t3, e3) {
          const r3 = lt.buf2Words(t3), i3 = lt.buf2Words(e3), n2 = new (s())(i3).decrypt(r3);
          return lt.words2Buf(n2);
        }, lt.buf2Words = function(t3) {
          if (t3.length % 4)
            throw new Error("buf length must be a multiple of 4");
          const e3 = [];
          for (let r3 = 0; r3 < t3.length / 4; r3++)
            e3.push(t3.readUInt32BE(4 * r3));
          return e3;
        }, lt.words2Buf = function(t3) {
          const e3 = import_buffer.Buffer.alloc(4 * t3.length);
          for (let r3 = 0; r3 < t3.length; r3++)
            e3.writeUInt32BE(t3[r3], 4 * r3);
          return e3;
        };
        class pt {
        }
        pt.buf2BlocksBuf = function(t3, e3) {
          const r3 = e3 / 8, i3 = [];
          for (let s2 = 0; s2 <= t3.length / r3; s2++) {
            let n2 = t3.slice(s2 * r3, s2 * r3 + r3);
            n2.length < e3 && (n2 = pt.pkcs7Pad(n2, e3)), i3.push(n2);
          }
          return i3;
        }, pt.blockBufs2Buf = function(t3) {
          let e3 = t3[t3.length - 1];
          return e3 = pt.pkcs7Unpad(e3), t3[t3.length - 1] = e3, import_buffer.Buffer.concat(t3);
        }, pt.encrypt = function(t3, e3, r3, i3) {
          const s2 = 8 * e3.length, n2 = pt.buf2BlocksBuf(t3, s2), a2 = pt.encryptBlocks(n2, e3, r3, i3);
          return import_buffer.Buffer.concat(a2);
        }, pt.decrypt = function(t3, e3, r3, i3) {
          const s2 = e3.length, n2 = [];
          for (let e4 = 0; e4 < t3.length / s2; e4++)
            n2.push(t3.slice(e4 * s2, e4 * s2 + s2));
          const a2 = pt.decryptBlocks(n2, e3, r3, i3);
          return pt.blockBufs2Buf(a2);
        }, pt.encryptBlock = function(t3, e3, r3, i3) {
          const s2 = pt.xorBufs(t3, e3);
          return r3.encrypt(s2, i3);
        }, pt.decryptBlock = function(t3, e3, r3, i3) {
          const s2 = r3.decrypt(t3, i3);
          return pt.xorBufs(s2, e3);
        }, pt.encryptBlocks = function(t3, e3, r3, i3) {
          const s2 = [];
          for (let n2 = 0; n2 < t3.length; n2++) {
            const a2 = t3[n2], o2 = pt.encryptBlock(a2, e3, r3, i3);
            s2.push(o2), e3 = o2;
          }
          return s2;
        }, pt.decryptBlocks = function(t3, e3, r3, i3) {
          const s2 = [];
          for (let n2 = 0; n2 < t3.length; n2++) {
            const a2 = t3[n2], o2 = pt.decryptBlock(a2, e3, r3, i3);
            s2.push(o2), e3 = a2;
          }
          return s2;
        }, pt.pkcs7Pad = function(t3, e3) {
          const r3 = e3 / 8 - t3.length, i3 = import_buffer.Buffer.alloc(r3);
          return i3.fill(r3), import_buffer.Buffer.concat([t3, i3]);
        }, pt.pkcs7Unpad = function(t3) {
          const e3 = t3[t3.length - 1], r3 = t3.slice(t3.length - e3, t3.length), i3 = import_buffer.Buffer.alloc(e3);
          if (i3.fill(e3), !B(r3, i3))
            throw new Error("invalid padding");
          return t3.slice(0, t3.length - e3);
        }, pt.xorBufs = function(t3, e3) {
          if (t3.length !== e3.length)
            throw new Error("bufs must have the same length");
          const r3 = import_buffer.Buffer.alloc(t3.length);
          for (let i3 = 0; i3 < t3.length; i3++)
            r3[i3] = t3[i3] ^ e3[i3];
          return r3;
        };
        class bt {
        }
        bt.encrypt = function(t3, e3, r3, i3 = true) {
          r3 = r3 || D.getRandomBuffer(16);
          const s2 = pt.encrypt(t3, r3, lt, e3);
          return i3 ? import_buffer.Buffer.concat([r3, s2]) : s2;
        }, bt.decrypt = function(t3, e3, r3 = false) {
          if (r3) {
            const i3 = t3;
            return pt.decrypt(i3, r3, lt, e3);
          }
          {
            const r4 = t3.slice(0, 16), i3 = t3.slice(16);
            return pt.decrypt(i3, r4, lt, e3);
          }
        };
        class mt {
        }
        mt.encrypt = function(t3, e3, r3) {
          const i3 = bt.encrypt(t3, e3, r3), s2 = P.sha256Hmac(i3, e3);
          return import_buffer.Buffer.concat([s2, i3]);
        }, mt.asyncEncrypt = async function(t3, e3, r3) {
          r3 || (r3 = D.getRandomBuffer(16));
          const i3 = [t3, e3, r3];
          return (await E.asyncClassMethod(mt, "encrypt", i3)).resbuf;
        }, mt.decrypt = function(t3, e3) {
          if (t3.length < 64)
            throw new Error("The encrypted data must be at least 256+128+128 bits, which is the length of the Hmac plus the iv plus the smallest encrypted data size");
          const r3 = t3.slice(0, 32);
          t3 = t3.slice(32, t3.length);
          const i3 = P.sha256Hmac(t3, e3);
          if (!B(r3, i3))
            throw new Error("Message authentication failed - Hmacs are not equivalent");
          return bt.decrypt(t3, e3);
        }, mt.asyncDecrypt = async function(t3, e3) {
          const r3 = [t3, e3];
          return (await E.asyncClassMethod(mt, "decrypt", r3)).resbuf;
        };
        class gt {
        }
        gt.ivkEkM = function(t3, e3) {
          const r3 = t3.bn, i3 = e3.point.mul(r3), s2 = new K(i3).toBuffer(), n2 = P.sha512(s2);
          return { iv: n2.slice(0, 16), kE: n2.slice(16, 32), kM: n2.slice(32, 64) };
        }, gt.electrumEncrypt = function(t3, e3, r3, i3 = false) {
          if (!import_buffer.Buffer.isBuffer(t3))
            throw new Error("messageBuf must be a buffer");
          let s2;
          null === r3 && (r3 = Q.fromRandom()), i3 || (s2 = r3.pubKey.toDer(true));
          const { iv: n2, kE: a2, kM: o2 } = gt.ivkEkM(r3.privKey, e3), h2 = bt.encrypt(t3, a2, n2, false), f3 = import_buffer.Buffer.from("BIE1");
          let c2;
          c2 = s2 ? import_buffer.Buffer.concat([f3, s2, h2]) : import_buffer.Buffer.concat([f3, h2]);
          const u2 = P.sha256Hmac(c2, o2);
          return import_buffer.Buffer.concat([c2, u2]);
        }, gt.electrumDecrypt = function(t3, e3, r3 = null) {
          if (!import_buffer.Buffer.isBuffer(t3))
            throw new Error("encBuf must be a buffer");
          if (!t3.slice(0, 4).equals(import_buffer.Buffer.from("BIE1")))
            throw new Error("Invalid Magic");
          let i3 = 4;
          if (null === r3) {
            const e4 = t3.slice(4, 37);
            r3 = K.fromDer(e4), i3 = 37;
          }
          const { iv: s2, kE: n2, kM: a2 } = gt.ivkEkM(e3, r3), o2 = t3.slice(i3, t3.length - 32), h2 = t3.slice(t3.length - 32, t3.length), f3 = P.sha256Hmac(t3.slice(0, t3.length - 32), a2);
          if (!h2.equals(f3))
            throw new Error("Invalid checksum");
          return bt.decrypt(o2, n2, s2);
        }, gt.bitcoreEncrypt = function(t3, e3, r3, i3) {
          r3 || (r3 = Q.fromRandom());
          const s2 = r3.privKey.bn, n2 = r3.pubKey.toDer(true), a2 = e3.point.mul(s2).getX().toBuffer({ size: 32 }), o2 = P.sha512(a2), h2 = o2.slice(0, 32), f3 = o2.slice(32, 64), c2 = bt.encrypt(t3, h2, i3), u2 = P.sha256Hmac(c2, f3);
          return import_buffer.Buffer.concat([n2, c2, u2]);
        }, gt.asyncBitcoreEncrypt = async function(t3, e3, r3, i3) {
          r3 || (r3 = await Q.asyncFromRandom()), i3 || (i3 = D.getRandomBuffer(16));
          const s2 = [t3, e3, r3, i3];
          return (await E.asyncClassMethod(gt, "bitcoreEncrypt", s2)).resbuf;
        }, gt.bitcoreDecrypt = function(t3, e3) {
          const r3 = e3.bn, i3 = K.fromDer(t3.slice(0, 33)).point.mul(r3);
          if (i3.eq(new L()))
            throw new Error("P equals 0");
          const s2 = i3.getX().toBuffer({ size: 32 }), n2 = P.sha512(s2), a2 = n2.slice(0, 32), o2 = n2.slice(32, 64), h2 = t3.slice(33, t3.length - 32), f3 = t3.slice(t3.length - 32, t3.length), c2 = P.sha256Hmac(h2, o2);
          if (!B(f3, c2))
            throw new Error("Invalid checksum");
          return bt.decrypt(h2, a2);
        }, gt.asyncBitcoreDecrypt = async function(t3, e3) {
          const r3 = [t3, e3];
          return (await E.asyncClassMethod(gt, "bitcoreDecrypt", r3)).resbuf;
        };
        const yt = { aes: s(), bnjs: a(), bs58: h(), elliptic: c(), hashjs: d(), pbkdf2: l, Buffer: import_buffer.Buffer }, wt = "2.0.10";
      }, 297: (t2) => {
        function e2(t3) {
          var e3, r2, i2;
          this._tables[0][0][0] || this._precompute();
          var s = this._tables[0][4], n = this._tables[1], a = t3.length, o = 1;
          if (4 !== a && 6 !== a && 8 !== a)
            throw new Error("invalid aes key size");
          this._key = [r2 = t3.slice(0), i2 = []];
          for (var h = a; h < 4 * a + 28; h++)
            e3 = r2[h - 1], (h % a == 0 || 8 === a && h % a == 4) && (e3 = s[e3 >>> 24] << 24 ^ s[e3 >> 16 & 255] << 16 ^ s[e3 >> 8 & 255] << 8 ^ s[255 & e3], h % a == 0 && (e3 = e3 << 8 ^ e3 >>> 24 ^ o << 24, o = o << 1 ^ 283 * (o >> 7))), r2[h] = r2[h - a] ^ e3;
          for (var f2 = 0; h; f2++, h--)
            e3 = r2[3 & f2 ? h : h - 4], i2[f2] = h <= 4 || f2 < 4 ? e3 : n[0][s[e3 >>> 24]] ^ n[1][s[e3 >> 16 & 255]] ^ n[2][s[e3 >> 8 & 255]] ^ n[3][s[255 & e3]];
        }
        t2.exports = e2, e2.prototype = { encrypt: function(t3) {
          return this._crypt(t3, 0);
        }, decrypt: function(t3) {
          return this._crypt(t3, 1);
        }, _tables: [[new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)], [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)]], _precompute: function() {
          var t3, e3, r2, i2, s, n, a, o, h = this._tables[0], f2 = this._tables[1], c = h[4], u = f2[4], d = new Uint8Array(256), l = new Uint8Array(256);
          for (t3 = 0; t3 < 256; t3++)
            l[(d[t3] = t3 << 1 ^ 283 * (t3 >> 7)) ^ t3] = t3;
          for (e3 = r2 = 0; !c[e3]; e3 ^= i2 || 1, r2 = l[r2] || 1)
            for (n = (n = r2 ^ r2 << 1 ^ r2 << 2 ^ r2 << 3 ^ r2 << 4) >> 8 ^ 255 & n ^ 99, c[e3] = n, u[n] = e3, o = 16843009 * d[s = d[i2 = d[e3]]] ^ 65537 * s ^ 257 * i2 ^ 16843008 * e3, a = 257 * d[n] ^ 16843008 * n, t3 = 0; t3 < 4; t3++)
              h[t3][e3] = a = a << 24 ^ a >>> 8, f2[t3][n] = o = o << 24 ^ o >>> 8;
        }, _crypt: function(t3, e3) {
          if (4 !== t3.length)
            throw new Error("invalid aes block size");
          var r2, i2, s, n, a = this._key[e3], o = t3[0] ^ a[0], h = t3[e3 ? 3 : 1] ^ a[1], f2 = t3[2] ^ a[2], c = t3[e3 ? 1 : 3] ^ a[3], u = a.length / 4 - 2, d = 4, l = new Uint32Array(4), p = this._tables[e3], b = p[0], m = p[1], g = p[2], y = p[3], w = p[4];
          for (n = 0; n < u; n++)
            r2 = b[o >>> 24] ^ m[h >> 16 & 255] ^ g[f2 >> 8 & 255] ^ y[255 & c] ^ a[d], i2 = b[h >>> 24] ^ m[f2 >> 16 & 255] ^ g[c >> 8 & 255] ^ y[255 & o] ^ a[d + 1], s = b[f2 >>> 24] ^ m[c >> 16 & 255] ^ g[o >> 8 & 255] ^ y[255 & h] ^ a[d + 2], c = b[c >>> 24] ^ m[o >> 16 & 255] ^ g[h >> 8 & 255] ^ y[255 & f2] ^ a[d + 3], d += 4, o = r2, h = i2, f2 = s;
          for (n = 0; n < 4; n++)
            l[e3 ? 3 & -n : n] = w[o >>> 24] << 24 ^ w[h >> 16 & 255] << 16 ^ w[f2 >> 8 & 255] << 8 ^ w[255 & c] ^ a[d++], r2 = o, o = h, h = f2, f2 = c, c = r2;
          return l;
        } };
      }, 162: (t2, e2, r2) => {
        "use strict";
        var i2 = r2(509).Buffer;
        t2.exports = function(t3) {
          if (t3.length >= 255)
            throw new TypeError("Alphabet too long");
          for (var e3 = new Uint8Array(256), r3 = 0; r3 < e3.length; r3++)
            e3[r3] = 255;
          for (var s = 0; s < t3.length; s++) {
            var n = t3.charAt(s), a = n.charCodeAt(0);
            if (255 !== e3[a])
              throw new TypeError(n + " is ambiguous");
            e3[a] = s;
          }
          var o = t3.length, h = t3.charAt(0), f2 = Math.log(o) / Math.log(256), c = Math.log(256) / Math.log(o);
          function u(t4) {
            if ("string" != typeof t4)
              throw new TypeError("Expected String");
            if (0 === t4.length)
              return i2.alloc(0);
            var r4 = 0;
            if (" " !== t4[r4]) {
              for (var s2 = 0, n2 = 0; t4[r4] === h; )
                s2++, r4++;
              for (var a2 = (t4.length - r4) * f2 + 1 >>> 0, c2 = new Uint8Array(a2); t4[r4]; ) {
                var u2 = e3[t4.charCodeAt(r4)];
                if (255 === u2)
                  return;
                for (var d = 0, l = a2 - 1; (0 !== u2 || d < n2) && -1 !== l; l--, d++)
                  u2 += o * c2[l] >>> 0, c2[l] = u2 % 256 >>> 0, u2 = u2 / 256 >>> 0;
                if (0 !== u2)
                  throw new Error("Non-zero carry");
                n2 = d, r4++;
              }
              if (" " !== t4[r4]) {
                for (var p = a2 - n2; p !== a2 && 0 === c2[p]; )
                  p++;
                var b = i2.allocUnsafe(s2 + (a2 - p));
                b.fill(0, 0, s2);
                for (var m = s2; p !== a2; )
                  b[m++] = c2[p++];
                return b;
              }
            }
          }
          return { encode: function(e4) {
            if ((Array.isArray(e4) || e4 instanceof Uint8Array) && (e4 = i2.from(e4)), !i2.isBuffer(e4))
              throw new TypeError("Expected Buffer");
            if (0 === e4.length)
              return "";
            for (var r4 = 0, s2 = 0, n2 = 0, a2 = e4.length; n2 !== a2 && 0 === e4[n2]; )
              n2++, r4++;
            for (var f3 = (a2 - n2) * c + 1 >>> 0, u2 = new Uint8Array(f3); n2 !== a2; ) {
              for (var d = e4[n2], l = 0, p = f3 - 1; (0 !== d || l < s2) && -1 !== p; p--, l++)
                d += 256 * u2[p] >>> 0, u2[p] = d % o >>> 0, d = d / o >>> 0;
              if (0 !== d)
                throw new Error("Non-zero carry");
              s2 = l, n2++;
            }
            for (var b = f3 - s2; b !== f3 && 0 === u2[b]; )
              b++;
            for (var m = h.repeat(r4); b < f3; ++b)
              m += t3.charAt(u2[b]);
            return m;
          }, decodeUnsafe: u, decode: function(t4) {
            var e4 = u(t4);
            if (e4)
              return e4;
            throw new Error("Non-base" + o + " character");
          } };
        };
      }, 666: (t2, e2, r2) => {
        "use strict";
        var i2 = e2;
        i2.version = r2(60).i8, i2.utils = r2(359), i2.rand = r2(931), i2.curve = r2(104), i2.curves = r2(626), i2.ec = r2(630);
      }, 15: (t2, e2, r2) => {
        "use strict";
        var i2 = r2(550), s = r2(359), n = s.getNAF, a = s.getJSF, o = s.assert;
        function h(t3, e3) {
          this.type = t3, this.p = new i2(e3.p, 16), this.red = e3.prime ? i2.red(e3.prime) : i2.mont(this.p), this.zero = new i2(0).toRed(this.red), this.one = new i2(1).toRed(this.red), this.two = new i2(2).toRed(this.red), this.n = e3.n && new i2(e3.n, 16), this.g = e3.g && this.pointFromJSON(e3.g, e3.gRed), this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;
          var r3 = this.n && this.p.div(this.n);
          !r3 || r3.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = true, this.redN = this.n.toRed(this.red));
        }
        function f2(t3, e3) {
          this.curve = t3, this.type = e3, this.precomputed = null;
        }
        t2.exports = h, h.prototype.point = function() {
          throw new Error("Not implemented");
        }, h.prototype.validate = function() {
          throw new Error("Not implemented");
        }, h.prototype._fixedNafMul = function(t3, e3) {
          o(t3.precomputed);
          var r3 = t3._getDoubles(), i3 = n(e3, 1, this._bitLength), s2 = (1 << r3.step + 1) - (r3.step % 2 == 0 ? 2 : 1);
          s2 /= 3;
          for (var a2 = [], h2 = 0; h2 < i3.length; h2 += r3.step) {
            var f3 = 0;
            for (e3 = h2 + r3.step - 1; e3 >= h2; e3--)
              f3 = (f3 << 1) + i3[e3];
            a2.push(f3);
          }
          for (var c = this.jpoint(null, null, null), u = this.jpoint(null, null, null), d = s2; d > 0; d--) {
            for (h2 = 0; h2 < a2.length; h2++)
              (f3 = a2[h2]) === d ? u = u.mixedAdd(r3.points[h2]) : f3 === -d && (u = u.mixedAdd(r3.points[h2].neg()));
            c = c.add(u);
          }
          return c.toP();
        }, h.prototype._wnafMul = function(t3, e3) {
          var r3 = 4, i3 = t3._getNAFPoints(r3);
          r3 = i3.wnd;
          for (var s2 = i3.points, a2 = n(e3, r3, this._bitLength), h2 = this.jpoint(null, null, null), f3 = a2.length - 1; f3 >= 0; f3--) {
            for (e3 = 0; f3 >= 0 && 0 === a2[f3]; f3--)
              e3++;
            if (f3 >= 0 && e3++, h2 = h2.dblp(e3), f3 < 0)
              break;
            var c = a2[f3];
            o(0 !== c), h2 = "affine" === t3.type ? c > 0 ? h2.mixedAdd(s2[c - 1 >> 1]) : h2.mixedAdd(s2[-c - 1 >> 1].neg()) : c > 0 ? h2.add(s2[c - 1 >> 1]) : h2.add(s2[-c - 1 >> 1].neg());
          }
          return "affine" === t3.type ? h2.toP() : h2;
        }, h.prototype._wnafMulAdd = function(t3, e3, r3, i3, s2) {
          for (var o2 = this._wnafT1, h2 = this._wnafT2, f3 = this._wnafT3, c = 0, u = 0; u < i3; u++) {
            var d = (O = e3[u])._getNAFPoints(t3);
            o2[u] = d.wnd, h2[u] = d.points;
          }
          for (u = i3 - 1; u >= 1; u -= 2) {
            var l = u - 1, p = u;
            if (1 === o2[l] && 1 === o2[p]) {
              var b = [e3[l], null, null, e3[p]];
              0 === e3[l].y.cmp(e3[p].y) ? (b[1] = e3[l].add(e3[p]), b[2] = e3[l].toJ().mixedAdd(e3[p].neg())) : 0 === e3[l].y.cmp(e3[p].y.redNeg()) ? (b[1] = e3[l].toJ().mixedAdd(e3[p]), b[2] = e3[l].add(e3[p].neg())) : (b[1] = e3[l].toJ().mixedAdd(e3[p]), b[2] = e3[l].toJ().mixedAdd(e3[p].neg()));
              var m = [-3, -1, -5, -7, 0, 7, 5, 1, 3], g = a(r3[l], r3[p]);
              c = Math.max(g[0].length, c), f3[l] = new Array(c), f3[p] = new Array(c);
              for (var y = 0; y < c; y++) {
                var w = 0 | g[0][y], v = 0 | g[1][y];
                f3[l][y] = m[3 * (w + 1) + (v + 1)], f3[p][y] = 0, h2[l] = b;
              }
            } else
              f3[l] = n(r3[l], o2[l], this._bitLength), f3[p] = n(r3[p], o2[p], this._bitLength), c = Math.max(f3[l].length, c), c = Math.max(f3[p].length, c);
          }
          var S = this.jpoint(null, null, null), _ = this._wnafT4;
          for (u = c; u >= 0; u--) {
            for (var B = 0; u >= 0; ) {
              var I = true;
              for (y = 0; y < i3; y++)
                _[y] = 0 | f3[y][u], 0 !== _[y] && (I = false);
              if (!I)
                break;
              B++, u--;
            }
            if (u >= 0 && B++, S = S.dblp(B), u < 0)
              break;
            for (y = 0; y < i3; y++) {
              var O, E = _[y];
              0 !== E && (E > 0 ? O = h2[y][E - 1 >> 1] : E < 0 && (O = h2[y][-E - 1 >> 1].neg()), S = "affine" === O.type ? S.mixedAdd(O) : S.add(O));
            }
          }
          for (u = 0; u < i3; u++)
            h2[u] = null;
          return s2 ? S : S.toP();
        }, h.BasePoint = f2, f2.prototype.eq = function() {
          throw new Error("Not implemented");
        }, f2.prototype.validate = function() {
          return this.curve.validate(this);
        }, h.prototype.decodePoint = function(t3, e3) {
          t3 = s.toArray(t3, e3);
          var r3 = this.p.byteLength();
          if ((4 === t3[0] || 6 === t3[0] || 7 === t3[0]) && t3.length - 1 == 2 * r3)
            return 6 === t3[0] ? o(t3[t3.length - 1] % 2 == 0) : 7 === t3[0] && o(t3[t3.length - 1] % 2 == 1), this.point(t3.slice(1, 1 + r3), t3.slice(1 + r3, 1 + 2 * r3));
          if ((2 === t3[0] || 3 === t3[0]) && t3.length - 1 === r3)
            return this.pointFromX(t3.slice(1, 1 + r3), 3 === t3[0]);
          throw new Error("Unknown point format");
        }, f2.prototype.encodeCompressed = function(t3) {
          return this.encode(t3, true);
        }, f2.prototype._encode = function(t3) {
          var e3 = this.curve.p.byteLength(), r3 = this.getX().toArray("be", e3);
          return t3 ? [this.getY().isEven() ? 2 : 3].concat(r3) : [4].concat(r3, this.getY().toArray("be", e3));
        }, f2.prototype.encode = function(t3, e3) {
          return s.encode(this._encode(e3), t3);
        }, f2.prototype.precompute = function(t3) {
          if (this.precomputed)
            return this;
          var e3 = { doubles: null, naf: null, beta: null };
          return e3.naf = this._getNAFPoints(8), e3.doubles = this._getDoubles(4, t3), e3.beta = this._getBeta(), this.precomputed = e3, this;
        }, f2.prototype._hasDoubles = function(t3) {
          if (!this.precomputed)
            return false;
          var e3 = this.precomputed.doubles;
          return !!e3 && e3.points.length >= Math.ceil((t3.bitLength() + 1) / e3.step);
        }, f2.prototype._getDoubles = function(t3, e3) {
          if (this.precomputed && this.precomputed.doubles)
            return this.precomputed.doubles;
          for (var r3 = [this], i3 = this, s2 = 0; s2 < e3; s2 += t3) {
            for (var n2 = 0; n2 < t3; n2++)
              i3 = i3.dbl();
            r3.push(i3);
          }
          return { step: t3, points: r3 };
        }, f2.prototype._getNAFPoints = function(t3) {
          if (this.precomputed && this.precomputed.naf)
            return this.precomputed.naf;
          for (var e3 = [this], r3 = (1 << t3) - 1, i3 = 1 === r3 ? null : this.dbl(), s2 = 1; s2 < r3; s2++)
            e3[s2] = e3[s2 - 1].add(i3);
          return { wnd: t3, points: e3 };
        }, f2.prototype._getBeta = function() {
          return null;
        }, f2.prototype.dblp = function(t3) {
          for (var e3 = this, r3 = 0; r3 < t3; r3++)
            e3 = e3.dbl();
          return e3;
        };
      }, 104: (t2, e2, r2) => {
        "use strict";
        var i2 = e2;
        i2.base = r2(15), i2.short = r2(505);
      }, 505: (t2, e2, r2) => {
        "use strict";
        var i2 = r2(359), s = r2(550), n = r2(378), a = r2(15), o = i2.assert;
        function h(t3) {
          a.call(this, "short", t3), this.a = new s(t3.a, 16).toRed(this.red), this.b = new s(t3.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), this.zeroA = 0 === this.a.fromRed().cmpn(0), this.threeA = 0 === this.a.fromRed().sub(this.p).cmpn(-3), this.endo = this._getEndomorphism(t3), this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);
        }
        function f2(t3, e3, r3, i3) {
          a.BasePoint.call(this, t3, "affine"), null === e3 && null === r3 ? (this.x = null, this.y = null, this.inf = true) : (this.x = new s(e3, 16), this.y = new s(r3, 16), i3 && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = false);
        }
        function c(t3, e3, r3, i3) {
          a.BasePoint.call(this, t3, "jacobian"), null === e3 && null === r3 && null === i3 ? (this.x = this.curve.one, this.y = this.curve.one, this.z = new s(0)) : (this.x = new s(e3, 16), this.y = new s(r3, 16), this.z = new s(i3, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;
        }
        n(h, a), t2.exports = h, h.prototype._getEndomorphism = function(t3) {
          if (this.zeroA && this.g && this.n && 1 === this.p.modn(3)) {
            var e3, r3;
            if (t3.beta)
              e3 = new s(t3.beta, 16).toRed(this.red);
            else {
              var i3 = this._getEndoRoots(this.p);
              e3 = (e3 = i3[0].cmp(i3[1]) < 0 ? i3[0] : i3[1]).toRed(this.red);
            }
            if (t3.lambda)
              r3 = new s(t3.lambda, 16);
            else {
              var n2 = this._getEndoRoots(this.n);
              0 === this.g.mul(n2[0]).x.cmp(this.g.x.redMul(e3)) ? r3 = n2[0] : (r3 = n2[1], o(0 === this.g.mul(r3).x.cmp(this.g.x.redMul(e3))));
            }
            return { beta: e3, lambda: r3, basis: t3.basis ? t3.basis.map(function(t4) {
              return { a: new s(t4.a, 16), b: new s(t4.b, 16) };
            }) : this._getEndoBasis(r3) };
          }
        }, h.prototype._getEndoRoots = function(t3) {
          var e3 = t3 === this.p ? this.red : s.mont(t3), r3 = new s(2).toRed(e3).redInvm(), i3 = r3.redNeg(), n2 = new s(3).toRed(e3).redNeg().redSqrt().redMul(r3);
          return [i3.redAdd(n2).fromRed(), i3.redSub(n2).fromRed()];
        }, h.prototype._getEndoBasis = function(t3) {
          for (var e3, r3, i3, n2, a2, o2, h2, f3, c2, u = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), d = t3, l = this.n.clone(), p = new s(1), b = new s(0), m = new s(0), g = new s(1), y = 0; 0 !== d.cmpn(0); ) {
            var w = l.div(d);
            f3 = l.sub(w.mul(d)), c2 = m.sub(w.mul(p));
            var v = g.sub(w.mul(b));
            if (!i3 && f3.cmp(u) < 0)
              e3 = h2.neg(), r3 = p, i3 = f3.neg(), n2 = c2;
            else if (i3 && 2 == ++y)
              break;
            h2 = f3, l = d, d = f3, m = p, p = c2, g = b, b = v;
          }
          a2 = f3.neg(), o2 = c2;
          var S = i3.sqr().add(n2.sqr());
          return a2.sqr().add(o2.sqr()).cmp(S) >= 0 && (a2 = e3, o2 = r3), i3.negative && (i3 = i3.neg(), n2 = n2.neg()), a2.negative && (a2 = a2.neg(), o2 = o2.neg()), [{ a: i3, b: n2 }, { a: a2, b: o2 }];
        }, h.prototype._endoSplit = function(t3) {
          var e3 = this.endo.basis, r3 = e3[0], i3 = e3[1], s2 = i3.b.mul(t3).divRound(this.n), n2 = r3.b.neg().mul(t3).divRound(this.n), a2 = s2.mul(r3.a), o2 = n2.mul(i3.a), h2 = s2.mul(r3.b), f3 = n2.mul(i3.b);
          return { k1: t3.sub(a2).sub(o2), k2: h2.add(f3).neg() };
        }, h.prototype.pointFromX = function(t3, e3) {
          (t3 = new s(t3, 16)).red || (t3 = t3.toRed(this.red));
          var r3 = t3.redSqr().redMul(t3).redIAdd(t3.redMul(this.a)).redIAdd(this.b), i3 = r3.redSqrt();
          if (0 !== i3.redSqr().redSub(r3).cmp(this.zero))
            throw new Error("invalid point");
          var n2 = i3.fromRed().isOdd();
          return (e3 && !n2 || !e3 && n2) && (i3 = i3.redNeg()), this.point(t3, i3);
        }, h.prototype.validate = function(t3) {
          if (t3.inf)
            return true;
          var e3 = t3.x, r3 = t3.y, i3 = this.a.redMul(e3), s2 = e3.redSqr().redMul(e3).redIAdd(i3).redIAdd(this.b);
          return 0 === r3.redSqr().redISub(s2).cmpn(0);
        }, h.prototype._endoWnafMulAdd = function(t3, e3, r3) {
          for (var i3 = this._endoWnafT1, s2 = this._endoWnafT2, n2 = 0; n2 < t3.length; n2++) {
            var a2 = this._endoSplit(e3[n2]), o2 = t3[n2], h2 = o2._getBeta();
            a2.k1.negative && (a2.k1.ineg(), o2 = o2.neg(true)), a2.k2.negative && (a2.k2.ineg(), h2 = h2.neg(true)), i3[2 * n2] = o2, i3[2 * n2 + 1] = h2, s2[2 * n2] = a2.k1, s2[2 * n2 + 1] = a2.k2;
          }
          for (var f3 = this._wnafMulAdd(1, i3, s2, 2 * n2, r3), c2 = 0; c2 < 2 * n2; c2++)
            i3[c2] = null, s2[c2] = null;
          return f3;
        }, n(f2, a.BasePoint), h.prototype.point = function(t3, e3, r3) {
          return new f2(this, t3, e3, r3);
        }, h.prototype.pointFromJSON = function(t3, e3) {
          return f2.fromJSON(this, t3, e3);
        }, f2.prototype._getBeta = function() {
          if (this.curve.endo) {
            var t3 = this.precomputed;
            if (t3 && t3.beta)
              return t3.beta;
            var e3 = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
            if (t3) {
              var r3 = this.curve, i3 = function(t4) {
                return r3.point(t4.x.redMul(r3.endo.beta), t4.y);
              };
              t3.beta = e3, e3.precomputed = { beta: null, naf: t3.naf && { wnd: t3.naf.wnd, points: t3.naf.points.map(i3) }, doubles: t3.doubles && { step: t3.doubles.step, points: t3.doubles.points.map(i3) } };
            }
            return e3;
          }
        }, f2.prototype.toJSON = function() {
          return this.precomputed ? [this.x, this.y, this.precomputed && { doubles: this.precomputed.doubles && { step: this.precomputed.doubles.step, points: this.precomputed.doubles.points.slice(1) }, naf: this.precomputed.naf && { wnd: this.precomputed.naf.wnd, points: this.precomputed.naf.points.slice(1) } }] : [this.x, this.y];
        }, f2.fromJSON = function(t3, e3, r3) {
          "string" == typeof e3 && (e3 = JSON.parse(e3));
          var i3 = t3.point(e3[0], e3[1], r3);
          if (!e3[2])
            return i3;
          function s2(e4) {
            return t3.point(e4[0], e4[1], r3);
          }
          var n2 = e3[2];
          return i3.precomputed = { beta: null, doubles: n2.doubles && { step: n2.doubles.step, points: [i3].concat(n2.doubles.points.map(s2)) }, naf: n2.naf && { wnd: n2.naf.wnd, points: [i3].concat(n2.naf.points.map(s2)) } }, i3;
        }, f2.prototype.inspect = function() {
          return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
        }, f2.prototype.isInfinity = function() {
          return this.inf;
        }, f2.prototype.add = function(t3) {
          if (this.inf)
            return t3;
          if (t3.inf)
            return this;
          if (this.eq(t3))
            return this.dbl();
          if (this.neg().eq(t3))
            return this.curve.point(null, null);
          if (0 === this.x.cmp(t3.x))
            return this.curve.point(null, null);
          var e3 = this.y.redSub(t3.y);
          0 !== e3.cmpn(0) && (e3 = e3.redMul(this.x.redSub(t3.x).redInvm()));
          var r3 = e3.redSqr().redISub(this.x).redISub(t3.x), i3 = e3.redMul(this.x.redSub(r3)).redISub(this.y);
          return this.curve.point(r3, i3);
        }, f2.prototype.dbl = function() {
          if (this.inf)
            return this;
          var t3 = this.y.redAdd(this.y);
          if (0 === t3.cmpn(0))
            return this.curve.point(null, null);
          var e3 = this.curve.a, r3 = this.x.redSqr(), i3 = t3.redInvm(), s2 = r3.redAdd(r3).redIAdd(r3).redIAdd(e3).redMul(i3), n2 = s2.redSqr().redISub(this.x.redAdd(this.x)), a2 = s2.redMul(this.x.redSub(n2)).redISub(this.y);
          return this.curve.point(n2, a2);
        }, f2.prototype.getX = function() {
          return this.x.fromRed();
        }, f2.prototype.getY = function() {
          return this.y.fromRed();
        }, f2.prototype.mul = function(t3) {
          return t3 = new s(t3, 16), this.isInfinity() ? this : this._hasDoubles(t3) ? this.curve._fixedNafMul(this, t3) : this.curve.endo ? this.curve._endoWnafMulAdd([this], [t3]) : this.curve._wnafMul(this, t3);
        }, f2.prototype.mulAdd = function(t3, e3, r3) {
          var i3 = [this, e3], s2 = [t3, r3];
          return this.curve.endo ? this.curve._endoWnafMulAdd(i3, s2) : this.curve._wnafMulAdd(1, i3, s2, 2);
        }, f2.prototype.jmulAdd = function(t3, e3, r3) {
          var i3 = [this, e3], s2 = [t3, r3];
          return this.curve.endo ? this.curve._endoWnafMulAdd(i3, s2, true) : this.curve._wnafMulAdd(1, i3, s2, 2, true);
        }, f2.prototype.eq = function(t3) {
          return this === t3 || this.inf === t3.inf && (this.inf || 0 === this.x.cmp(t3.x) && 0 === this.y.cmp(t3.y));
        }, f2.prototype.neg = function(t3) {
          if (this.inf)
            return this;
          var e3 = this.curve.point(this.x, this.y.redNeg());
          if (t3 && this.precomputed) {
            var r3 = this.precomputed, i3 = function(t4) {
              return t4.neg();
            };
            e3.precomputed = { naf: r3.naf && { wnd: r3.naf.wnd, points: r3.naf.points.map(i3) }, doubles: r3.doubles && { step: r3.doubles.step, points: r3.doubles.points.map(i3) } };
          }
          return e3;
        }, f2.prototype.toJ = function() {
          return this.inf ? this.curve.jpoint(null, null, null) : this.curve.jpoint(this.x, this.y, this.curve.one);
        }, n(c, a.BasePoint), h.prototype.jpoint = function(t3, e3, r3) {
          return new c(this, t3, e3, r3);
        }, c.prototype.toP = function() {
          if (this.isInfinity())
            return this.curve.point(null, null);
          var t3 = this.z.redInvm(), e3 = t3.redSqr(), r3 = this.x.redMul(e3), i3 = this.y.redMul(e3).redMul(t3);
          return this.curve.point(r3, i3);
        }, c.prototype.neg = function() {
          return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
        }, c.prototype.add = function(t3) {
          if (this.isInfinity())
            return t3;
          if (t3.isInfinity())
            return this;
          var e3 = t3.z.redSqr(), r3 = this.z.redSqr(), i3 = this.x.redMul(e3), s2 = t3.x.redMul(r3), n2 = this.y.redMul(e3.redMul(t3.z)), a2 = t3.y.redMul(r3.redMul(this.z)), o2 = i3.redSub(s2), h2 = n2.redSub(a2);
          if (0 === o2.cmpn(0))
            return 0 !== h2.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
          var f3 = o2.redSqr(), c2 = f3.redMul(o2), u = i3.redMul(f3), d = h2.redSqr().redIAdd(c2).redISub(u).redISub(u), l = h2.redMul(u.redISub(d)).redISub(n2.redMul(c2)), p = this.z.redMul(t3.z).redMul(o2);
          return this.curve.jpoint(d, l, p);
        }, c.prototype.mixedAdd = function(t3) {
          if (this.isInfinity())
            return t3.toJ();
          if (t3.isInfinity())
            return this;
          var e3 = this.z.redSqr(), r3 = this.x, i3 = t3.x.redMul(e3), s2 = this.y, n2 = t3.y.redMul(e3).redMul(this.z), a2 = r3.redSub(i3), o2 = s2.redSub(n2);
          if (0 === a2.cmpn(0))
            return 0 !== o2.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
          var h2 = a2.redSqr(), f3 = h2.redMul(a2), c2 = r3.redMul(h2), u = o2.redSqr().redIAdd(f3).redISub(c2).redISub(c2), d = o2.redMul(c2.redISub(u)).redISub(s2.redMul(f3)), l = this.z.redMul(a2);
          return this.curve.jpoint(u, d, l);
        }, c.prototype.dblp = function(t3) {
          if (0 === t3)
            return this;
          if (this.isInfinity())
            return this;
          if (!t3)
            return this.dbl();
          if (this.curve.zeroA || this.curve.threeA) {
            for (var e3 = this, r3 = 0; r3 < t3; r3++)
              e3 = e3.dbl();
            return e3;
          }
          var i3 = this.curve.a, s2 = this.curve.tinv, n2 = this.x, a2 = this.y, o2 = this.z, h2 = o2.redSqr().redSqr(), f3 = a2.redAdd(a2);
          for (r3 = 0; r3 < t3; r3++) {
            var c2 = n2.redSqr(), u = f3.redSqr(), d = u.redSqr(), l = c2.redAdd(c2).redIAdd(c2).redIAdd(i3.redMul(h2)), p = n2.redMul(u), b = l.redSqr().redISub(p.redAdd(p)), m = p.redISub(b), g = l.redMul(m);
            g = g.redIAdd(g).redISub(d);
            var y = f3.redMul(o2);
            r3 + 1 < t3 && (h2 = h2.redMul(d)), n2 = b, o2 = y, f3 = g;
          }
          return this.curve.jpoint(n2, f3.redMul(s2), o2);
        }, c.prototype.dbl = function() {
          return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
        }, c.prototype._zeroDbl = function() {
          var t3, e3, r3;
          if (this.zOne) {
            var i3 = this.x.redSqr(), s2 = this.y.redSqr(), n2 = s2.redSqr(), a2 = this.x.redAdd(s2).redSqr().redISub(i3).redISub(n2);
            a2 = a2.redIAdd(a2);
            var o2 = i3.redAdd(i3).redIAdd(i3), h2 = o2.redSqr().redISub(a2).redISub(a2), f3 = n2.redIAdd(n2);
            f3 = (f3 = f3.redIAdd(f3)).redIAdd(f3), t3 = h2, e3 = o2.redMul(a2.redISub(h2)).redISub(f3), r3 = this.y.redAdd(this.y);
          } else {
            var c2 = this.x.redSqr(), u = this.y.redSqr(), d = u.redSqr(), l = this.x.redAdd(u).redSqr().redISub(c2).redISub(d);
            l = l.redIAdd(l);
            var p = c2.redAdd(c2).redIAdd(c2), b = p.redSqr(), m = d.redIAdd(d);
            m = (m = m.redIAdd(m)).redIAdd(m), t3 = b.redISub(l).redISub(l), e3 = p.redMul(l.redISub(t3)).redISub(m), r3 = (r3 = this.y.redMul(this.z)).redIAdd(r3);
          }
          return this.curve.jpoint(t3, e3, r3);
        }, c.prototype._threeDbl = function() {
          var t3, e3, r3;
          if (this.zOne) {
            var i3 = this.x.redSqr(), s2 = this.y.redSqr(), n2 = s2.redSqr(), a2 = this.x.redAdd(s2).redSqr().redISub(i3).redISub(n2);
            a2 = a2.redIAdd(a2);
            var o2 = i3.redAdd(i3).redIAdd(i3).redIAdd(this.curve.a), h2 = o2.redSqr().redISub(a2).redISub(a2);
            t3 = h2;
            var f3 = n2.redIAdd(n2);
            f3 = (f3 = f3.redIAdd(f3)).redIAdd(f3), e3 = o2.redMul(a2.redISub(h2)).redISub(f3), r3 = this.y.redAdd(this.y);
          } else {
            var c2 = this.z.redSqr(), u = this.y.redSqr(), d = this.x.redMul(u), l = this.x.redSub(c2).redMul(this.x.redAdd(c2));
            l = l.redAdd(l).redIAdd(l);
            var p = d.redIAdd(d), b = (p = p.redIAdd(p)).redAdd(p);
            t3 = l.redSqr().redISub(b), r3 = this.y.redAdd(this.z).redSqr().redISub(u).redISub(c2);
            var m = u.redSqr();
            m = (m = (m = m.redIAdd(m)).redIAdd(m)).redIAdd(m), e3 = l.redMul(p.redISub(t3)).redISub(m);
          }
          return this.curve.jpoint(t3, e3, r3);
        }, c.prototype._dbl = function() {
          var t3 = this.curve.a, e3 = this.x, r3 = this.y, i3 = this.z, s2 = i3.redSqr().redSqr(), n2 = e3.redSqr(), a2 = r3.redSqr(), o2 = n2.redAdd(n2).redIAdd(n2).redIAdd(t3.redMul(s2)), h2 = e3.redAdd(e3), f3 = (h2 = h2.redIAdd(h2)).redMul(a2), c2 = o2.redSqr().redISub(f3.redAdd(f3)), u = f3.redISub(c2), d = a2.redSqr();
          d = (d = (d = d.redIAdd(d)).redIAdd(d)).redIAdd(d);
          var l = o2.redMul(u).redISub(d), p = r3.redAdd(r3).redMul(i3);
          return this.curve.jpoint(c2, l, p);
        }, c.prototype.trpl = function() {
          if (!this.curve.zeroA)
            return this.dbl().add(this);
          var t3 = this.x.redSqr(), e3 = this.y.redSqr(), r3 = this.z.redSqr(), i3 = e3.redSqr(), s2 = t3.redAdd(t3).redIAdd(t3), n2 = s2.redSqr(), a2 = this.x.redAdd(e3).redSqr().redISub(t3).redISub(i3), o2 = (a2 = (a2 = (a2 = a2.redIAdd(a2)).redAdd(a2).redIAdd(a2)).redISub(n2)).redSqr(), h2 = i3.redIAdd(i3);
          h2 = (h2 = (h2 = h2.redIAdd(h2)).redIAdd(h2)).redIAdd(h2);
          var f3 = s2.redIAdd(a2).redSqr().redISub(n2).redISub(o2).redISub(h2), c2 = e3.redMul(f3);
          c2 = (c2 = c2.redIAdd(c2)).redIAdd(c2);
          var u = this.x.redMul(o2).redISub(c2);
          u = (u = u.redIAdd(u)).redIAdd(u);
          var d = this.y.redMul(f3.redMul(h2.redISub(f3)).redISub(a2.redMul(o2)));
          d = (d = (d = d.redIAdd(d)).redIAdd(d)).redIAdd(d);
          var l = this.z.redAdd(a2).redSqr().redISub(r3).redISub(o2);
          return this.curve.jpoint(u, d, l);
        }, c.prototype.mul = function(t3, e3) {
          return t3 = new s(t3, e3), this.curve._wnafMul(this, t3);
        }, c.prototype.eq = function(t3) {
          if ("affine" === t3.type)
            return this.eq(t3.toJ());
          if (this === t3)
            return true;
          var e3 = this.z.redSqr(), r3 = t3.z.redSqr();
          if (0 !== this.x.redMul(r3).redISub(t3.x.redMul(e3)).cmpn(0))
            return false;
          var i3 = e3.redMul(this.z), s2 = r3.redMul(t3.z);
          return 0 === this.y.redMul(s2).redISub(t3.y.redMul(i3)).cmpn(0);
        }, c.prototype.eqXToP = function(t3) {
          var e3 = this.z.redSqr(), r3 = t3.toRed(this.curve.red).redMul(e3);
          if (0 === this.x.cmp(r3))
            return true;
          for (var i3 = t3.clone(), s2 = this.curve.redN.redMul(e3); ; ) {
            if (i3.iadd(this.curve.n), i3.cmp(this.curve.p) >= 0)
              return false;
            if (r3.redIAdd(s2), 0 === this.x.cmp(r3))
              return true;
          }
        }, c.prototype.inspect = function() {
          return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
        }, c.prototype.isInfinity = function() {
          return 0 === this.z.cmpn(0);
        };
      }, 626: (t2, e2, r2) => {
        "use strict";
        var i2, s, n, a = e2, o = r2(715), h = r2(104), f2 = r2(359).assert;
        function c(t3) {
          if ("short" !== t3.type)
            throw new Error("invalid curve type");
          this.curve = new h.short(t3), this.g = this.curve.g, this.n = this.curve.n, this.hash = t3.hash, f2(this.g.validate(), "Invalid curve"), f2(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
        }
        a.PresetCurve = c;
        try {
          i2 = r2(59);
        } catch (t3) {
          i2 = void 0;
        }
        s = "secp256k1", n = { type: "short", prime: "k256", p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f", a: "0", b: "7", n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141", h: "1", hash: o.sha256, beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee", lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72", basis: [{ a: "3086d221a7d46bcde86c90e49284eb15", b: "-e4437ed6010e88286f547fa90abfe4c3" }, { a: "114ca50f7a8e2f3f657c1108d9d44cfd8", b: "3086d221a7d46bcde86c90e49284eb15" }], gRed: false, g: ["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", i2] }, Object.defineProperty(a, s, { configurable: true, enumerable: true, get: function() {
          var t3 = new c(n);
          return Object.defineProperty(a, s, { configurable: true, enumerable: true, value: t3 }), t3;
        } });
      }, 630: (t2, e2, r2) => {
        "use strict";
        var i2 = r2(550), s = r2(156), n = r2(359), a = r2(626), o = r2(931), h = n.assert, f2 = r2(119), c = r2(911);
        function u(t3) {
          if (!(this instanceof u))
            return new u(t3);
          "string" == typeof t3 && (h(a.hasOwnProperty(t3), "Unknown curve " + t3), t3 = a[t3]), t3 instanceof a.PresetCurve && (t3 = { curve: t3 }), this.curve = t3.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = t3.curve.g, this.g.precompute(t3.curve.n.bitLength() + 1), this.hash = t3.hash || t3.curve.hash;
        }
        t2.exports = u, u.prototype.keyPair = function(t3) {
          return new f2(this, t3);
        }, u.prototype.keyFromPrivate = function(t3, e3) {
          return f2.fromPrivate(this, t3, e3);
        }, u.prototype.keyFromPublic = function(t3, e3) {
          return f2.fromPublic(this, t3, e3);
        }, u.prototype.genKeyPair = function(t3) {
          t3 || (t3 = {});
          for (var e3 = new s({ hash: this.hash, pers: t3.pers, persEnc: t3.persEnc || "utf8", entropy: t3.entropy || o(this.hash.hmacStrength), entropyEnc: t3.entropy && t3.entropyEnc || "utf8", nonce: this.n.toArray() }), r3 = this.n.byteLength(), n2 = this.n.sub(new i2(2)); ; ) {
            var a2 = new i2(e3.generate(r3));
            if (!(a2.cmp(n2) > 0))
              return a2.iaddn(1), this.keyFromPrivate(a2);
          }
        }, u.prototype._truncateToN = function(t3, e3) {
          var r3 = 8 * t3.byteLength() - this.n.bitLength();
          return r3 > 0 && (t3 = t3.ushrn(r3)), !e3 && t3.cmp(this.n) >= 0 ? t3.sub(this.n) : t3;
        }, u.prototype.sign = function(t3, e3, r3, n2) {
          "object" == typeof r3 && (n2 = r3, r3 = null), n2 || (n2 = {}), e3 = this.keyFromPrivate(e3, r3), t3 = this._truncateToN(new i2(t3, 16));
          for (var a2 = this.n.byteLength(), o2 = e3.getPrivate().toArray("be", a2), h2 = t3.toArray("be", a2), f3 = new s({ hash: this.hash, entropy: o2, nonce: h2, pers: n2.pers, persEnc: n2.persEnc || "utf8" }), u2 = this.n.sub(new i2(1)), d = 0; ; d++) {
            var l = n2.k ? n2.k(d) : new i2(f3.generate(this.n.byteLength()));
            if (!((l = this._truncateToN(l, true)).cmpn(1) <= 0 || l.cmp(u2) >= 0)) {
              var p = this.g.mul(l);
              if (!p.isInfinity()) {
                var b = p.getX(), m = b.umod(this.n);
                if (0 !== m.cmpn(0)) {
                  var g = l.invm(this.n).mul(m.mul(e3.getPrivate()).iadd(t3));
                  if (0 !== (g = g.umod(this.n)).cmpn(0)) {
                    var y = (p.getY().isOdd() ? 1 : 0) | (0 !== b.cmp(m) ? 2 : 0);
                    return n2.canonical && g.cmp(this.nh) > 0 && (g = this.n.sub(g), y ^= 1), new c({ r: m, s: g, recoveryParam: y });
                  }
                }
              }
            }
          }
        }, u.prototype.verify = function(t3, e3, r3, s2) {
          t3 = this._truncateToN(new i2(t3, 16)), r3 = this.keyFromPublic(r3, s2);
          var n2 = (e3 = new c(e3, "hex")).r, a2 = e3.s;
          if (n2.cmpn(1) < 0 || n2.cmp(this.n) >= 0)
            return false;
          if (a2.cmpn(1) < 0 || a2.cmp(this.n) >= 0)
            return false;
          var o2, h2 = a2.invm(this.n), f3 = h2.mul(t3).umod(this.n), u2 = h2.mul(n2).umod(this.n);
          return this.curve._maxwellTrick ? !(o2 = this.g.jmulAdd(f3, r3.getPublic(), u2)).isInfinity() && o2.eqXToP(n2) : !(o2 = this.g.mulAdd(f3, r3.getPublic(), u2)).isInfinity() && 0 === o2.getX().umod(this.n).cmp(n2);
        }, u.prototype.recoverPubKey = function(t3, e3, r3, s2) {
          h((3 & r3) === r3, "The recovery param is more than two bits"), e3 = new c(e3, s2);
          var n2 = this.n, a2 = new i2(t3), o2 = e3.r, f3 = e3.s, u2 = 1 & r3, d = r3 >> 1;
          if (o2.cmp(this.curve.p.umod(this.curve.n)) >= 0 && d)
            throw new Error("Unable to find sencond key candinate");
          o2 = d ? this.curve.pointFromX(o2.add(this.curve.n), u2) : this.curve.pointFromX(o2, u2);
          var l = e3.r.invm(n2), p = n2.sub(a2).mul(l).umod(n2), b = f3.mul(l).umod(n2);
          return this.g.mulAdd(p, o2, b);
        }, u.prototype.getKeyRecoveryParam = function(t3, e3, r3, i3) {
          if (null !== (e3 = new c(e3, i3)).recoveryParam)
            return e3.recoveryParam;
          for (var s2 = 0; s2 < 4; s2++) {
            var n2;
            try {
              n2 = this.recoverPubKey(t3, e3, s2);
            } catch (t4) {
              continue;
            }
            if (n2.eq(r3))
              return s2;
          }
          throw new Error("Unable to find valid recovery factor");
        };
      }, 119: (t2, e2, r2) => {
        "use strict";
        var i2 = r2(550), s = r2(359).assert;
        function n(t3, e3) {
          this.ec = t3, this.priv = null, this.pub = null, e3.priv && this._importPrivate(e3.priv, e3.privEnc), e3.pub && this._importPublic(e3.pub, e3.pubEnc);
        }
        t2.exports = n, n.fromPublic = function(t3, e3, r3) {
          return e3 instanceof n ? e3 : new n(t3, { pub: e3, pubEnc: r3 });
        }, n.fromPrivate = function(t3, e3, r3) {
          return e3 instanceof n ? e3 : new n(t3, { priv: e3, privEnc: r3 });
        }, n.prototype.validate = function() {
          var t3 = this.getPublic();
          return t3.isInfinity() ? { result: false, reason: "Invalid public key" } : t3.validate() ? t3.mul(this.ec.curve.n).isInfinity() ? { result: true, reason: null } : { result: false, reason: "Public key * N != O" } : { result: false, reason: "Public key is not a point" };
        }, n.prototype.getPublic = function(t3, e3) {
          return "string" == typeof t3 && (e3 = t3, t3 = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), e3 ? this.pub.encode(e3, t3) : this.pub;
        }, n.prototype.getPrivate = function(t3) {
          return "hex" === t3 ? this.priv.toString(16, 2) : this.priv;
        }, n.prototype._importPrivate = function(t3, e3) {
          this.priv = new i2(t3, e3 || 16), this.priv = this.priv.umod(this.ec.curve.n);
        }, n.prototype._importPublic = function(t3, e3) {
          if (t3.x || t3.y)
            return "mont" === this.ec.curve.type ? s(t3.x, "Need x coordinate") : "short" !== this.ec.curve.type && "edwards" !== this.ec.curve.type || s(t3.x && t3.y, "Need both x and y coordinate"), void (this.pub = this.ec.curve.point(t3.x, t3.y));
          this.pub = this.ec.curve.decodePoint(t3, e3);
        }, n.prototype.derive = function(t3) {
          return t3.mul(this.priv).getX();
        }, n.prototype.sign = function(t3, e3, r3) {
          return this.ec.sign(t3, this, e3, r3);
        }, n.prototype.verify = function(t3, e3) {
          return this.ec.verify(t3, e3, this);
        }, n.prototype.inspect = function() {
          return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
        };
      }, 911: (t2, e2, r2) => {
        "use strict";
        var i2 = r2(550), s = r2(359), n = s.assert;
        function a(t3, e3) {
          if (t3 instanceof a)
            return t3;
          this._importDER(t3, e3) || (n(t3.r && t3.s, "Signature without r or s"), this.r = new i2(t3.r, 16), this.s = new i2(t3.s, 16), void 0 === t3.recoveryParam ? this.recoveryParam = null : this.recoveryParam = t3.recoveryParam);
        }
        function o() {
          this.place = 0;
        }
        function h(t3, e3) {
          var r3 = t3[e3.place++];
          if (!(128 & r3))
            return r3;
          for (var i3 = 15 & r3, s2 = 0, n2 = 0, a2 = e3.place; n2 < i3; n2++, a2++)
            s2 <<= 8, s2 |= t3[a2];
          return e3.place = a2, s2;
        }
        function f2(t3) {
          for (var e3 = 0, r3 = t3.length - 1; !t3[e3] && !(128 & t3[e3 + 1]) && e3 < r3; )
            e3++;
          return 0 === e3 ? t3 : t3.slice(e3);
        }
        function c(t3, e3) {
          if (e3 < 128)
            t3.push(e3);
          else {
            var r3 = 1 + (Math.log(e3) / Math.LN2 >>> 3);
            for (t3.push(128 | r3); --r3; )
              t3.push(e3 >>> (r3 << 3) & 255);
            t3.push(e3);
          }
        }
        t2.exports = a, a.prototype._importDER = function(t3, e3) {
          t3 = s.toArray(t3, e3);
          var r3 = new o();
          if (48 !== t3[r3.place++])
            return false;
          if (h(t3, r3) + r3.place !== t3.length)
            return false;
          if (2 !== t3[r3.place++])
            return false;
          var n2 = h(t3, r3), a2 = t3.slice(r3.place, n2 + r3.place);
          if (r3.place += n2, 2 !== t3[r3.place++])
            return false;
          var f3 = h(t3, r3);
          if (t3.length !== f3 + r3.place)
            return false;
          var c2 = t3.slice(r3.place, f3 + r3.place);
          return 0 === a2[0] && 128 & a2[1] && (a2 = a2.slice(1)), 0 === c2[0] && 128 & c2[1] && (c2 = c2.slice(1)), this.r = new i2(a2), this.s = new i2(c2), this.recoveryParam = null, true;
        }, a.prototype.toDER = function(t3) {
          var e3 = this.r.toArray(), r3 = this.s.toArray();
          for (128 & e3[0] && (e3 = [0].concat(e3)), 128 & r3[0] && (r3 = [0].concat(r3)), e3 = f2(e3), r3 = f2(r3); !(r3[0] || 128 & r3[1]); )
            r3 = r3.slice(1);
          var i3 = [2];
          c(i3, e3.length), (i3 = i3.concat(e3)).push(2), c(i3, r3.length);
          var n2 = i3.concat(r3), a2 = [48];
          return c(a2, n2.length), a2 = a2.concat(n2), s.encode(a2, t3);
        };
      }, 59: (t2) => {
        t2.exports = { doubles: { step: 4, points: [["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a", "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"], ["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508", "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"], ["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739", "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"], ["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640", "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"], ["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c", "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"], ["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda", "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"], ["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa", "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"], ["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0", "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"], ["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d", "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"], ["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d", "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"], ["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1", "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"], ["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0", "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"], ["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047", "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"], ["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862", "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"], ["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7", "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"], ["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd", "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"], ["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83", "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"], ["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a", "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"], ["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8", "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"], ["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d", "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"], ["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725", "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"], ["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754", "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"], ["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c", "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"], ["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6", "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"], ["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39", "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"], ["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891", "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"], ["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b", "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"], ["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03", "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"], ["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d", "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"], ["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070", "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"], ["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4", "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"], ["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da", "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"], ["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11", "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"], ["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e", "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"], ["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41", "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"], ["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef", "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"], ["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8", "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"], ["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d", "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"], ["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96", "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"], ["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd", "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"], ["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5", "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"], ["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266", "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"], ["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71", "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"], ["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac", "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"], ["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751", "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"], ["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e", "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"], ["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241", "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"], ["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3", "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"], ["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f", "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"], ["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19", "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"], ["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be", "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"], ["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9", "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"], ["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2", "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"], ["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13", "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"], ["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c", "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"], ["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba", "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"], ["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151", "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"], ["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073", "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"], ["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458", "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"], ["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b", "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"], ["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366", "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"], ["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa", "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"], ["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0", "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"], ["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787", "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"], ["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e", "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]] }, naf: { wnd: 7, points: [["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9", "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"], ["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4", "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"], ["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc", "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"], ["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe", "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"], ["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb", "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"], ["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8", "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"], ["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e", "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"], ["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34", "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"], ["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c", "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"], ["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5", "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"], ["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f", "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"], ["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714", "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"], ["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729", "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"], ["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db", "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"], ["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4", "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"], ["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5", "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"], ["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479", "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"], ["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d", "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"], ["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f", "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"], ["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb", "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"], ["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9", "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"], ["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963", "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"], ["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74", "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"], ["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530", "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"], ["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b", "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"], ["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247", "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"], ["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1", "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"], ["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120", "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"], ["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435", "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"], ["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18", "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"], ["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8", "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"], ["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb", "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"], ["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f", "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"], ["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143", "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"], ["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba", "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"], ["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45", "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"], ["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a", "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"], ["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e", "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"], ["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8", "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"], ["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c", "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"], ["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519", "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"], ["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab", "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"], ["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca", "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"], ["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf", "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"], ["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610", "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"], ["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4", "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"], ["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c", "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"], ["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940", "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"], ["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980", "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"], ["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3", "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"], ["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf", "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"], ["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63", "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"], ["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448", "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"], ["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf", "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"], ["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5", "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"], ["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6", "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"], ["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5", "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"], ["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99", "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"], ["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51", "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"], ["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5", "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"], ["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5", "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"], ["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997", "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"], ["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881", "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"], ["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5", "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"], ["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66", "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"], ["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726", "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"], ["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede", "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"], ["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94", "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"], ["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31", "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"], ["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51", "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"], ["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252", "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"], ["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5", "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"], ["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b", "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"], ["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4", "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"], ["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f", "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"], ["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889", "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"], ["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246", "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"], ["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984", "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"], ["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a", "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"], ["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030", "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"], ["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197", "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"], ["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593", "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"], ["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef", "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"], ["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38", "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"], ["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a", "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"], ["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111", "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"], ["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502", "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"], ["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea", "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"], ["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26", "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"], ["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986", "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"], ["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e", "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"], ["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4", "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"], ["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda", "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"], ["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859", "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"], ["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f", "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"], ["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c", "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"], ["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942", "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"], ["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a", "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"], ["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80", "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"], ["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d", "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"], ["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1", "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"], ["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63", "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"], ["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352", "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"], ["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193", "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"], ["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00", "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"], ["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58", "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"], ["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7", "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"], ["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8", "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"], ["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e", "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"], ["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d", "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"], ["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b", "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"], ["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f", "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"], ["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6", "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"], ["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297", "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"], ["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a", "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"], ["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c", "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"], ["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52", "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"], ["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb", "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"], ["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065", "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"], ["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917", "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"], ["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9", "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"], ["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3", "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"], ["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57", "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"], ["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66", "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"], ["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8", "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"], ["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721", "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"], ["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180", "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]] } };
      }, 359: (t2, e2, r2) => {
        "use strict";
        var i2 = e2, s = r2(550), n = r2(746), a = r2(504);
        i2.assert = n, i2.toArray = a.toArray, i2.zero2 = a.zero2, i2.toHex = a.toHex, i2.encode = a.encode, i2.getNAF = function(t3, e3, r3) {
          var i3 = new Array(Math.max(t3.bitLength(), r3) + 1);
          i3.fill(0);
          for (var s2 = 1 << e3 + 1, n2 = t3.clone(), a2 = 0; a2 < i3.length; a2++) {
            var o, h = n2.andln(s2 - 1);
            n2.isOdd() ? (o = h > (s2 >> 1) - 1 ? (s2 >> 1) - h : h, n2.isubn(o)) : o = 0, i3[a2] = o, n2.iushrn(1);
          }
          return i3;
        }, i2.getJSF = function(t3, e3) {
          var r3 = [[], []];
          t3 = t3.clone(), e3 = e3.clone();
          for (var i3 = 0, s2 = 0; t3.cmpn(-i3) > 0 || e3.cmpn(-s2) > 0; ) {
            var n2, a2, o, h = t3.andln(3) + i3 & 3, f2 = e3.andln(3) + s2 & 3;
            3 === h && (h = -1), 3 === f2 && (f2 = -1), n2 = 0 == (1 & h) ? 0 : 3 != (o = t3.andln(7) + i3 & 7) && 5 !== o || 2 !== f2 ? h : -h, r3[0].push(n2), a2 = 0 == (1 & f2) ? 0 : 3 != (o = e3.andln(7) + s2 & 7) && 5 !== o || 2 !== h ? f2 : -f2, r3[1].push(a2), 2 * i3 === n2 + 1 && (i3 = 1 - i3), 2 * s2 === a2 + 1 && (s2 = 1 - s2), t3.iushrn(1), e3.iushrn(1);
          }
          return r3;
        }, i2.cachedProperty = function(t3, e3, r3) {
          var i3 = "_" + e3;
          t3.prototype[e3] = function() {
            return void 0 !== this[i3] ? this[i3] : this[i3] = r3.call(this);
          };
        }, i2.parseBytes = function(t3) {
          return "string" == typeof t3 ? i2.toArray(t3, "hex") : t3;
        }, i2.intFromLE = function(t3) {
          return new s(t3, "hex", "le");
        };
      }, 60: (t2) => {
        "use strict";
        t2.exports = { i8: "7.0.1" };
      }, 550: function(t2, e2, r2) {
        !function(t3, e3) {
          "use strict";
          function i2(t4, e4) {
            if (!t4)
              throw new Error(e4 || "Assertion failed");
          }
          function s(t4, e4) {
            t4.super_ = e4;
            var r3 = function() {
            };
            r3.prototype = e4.prototype, t4.prototype = new r3(), t4.prototype.constructor = t4;
          }
          function n(t4, e4, r3) {
            if (n.isBN(t4))
              return t4;
            this.negative = 0, this.words = null, this.length = 0, this.red = null, null !== t4 && ("le" !== e4 && "be" !== e4 || (r3 = e4, e4 = 10), this._init(t4 || 0, e4 || 10, r3 || "be"));
          }
          var a;
          "object" == typeof t3 ? t3.exports = n : e3.BN = n, n.BN = n, n.wordSize = 26;
          try {
            a = "undefined" != typeof window && void 0 !== window.Buffer ? window.Buffer : r2(293).Buffer;
          } catch (t4) {
          }
          function o(t4, e4) {
            var r3 = t4.charCodeAt(e4);
            return r3 >= 48 && r3 <= 57 ? r3 - 48 : r3 >= 65 && r3 <= 70 ? r3 - 55 : r3 >= 97 && r3 <= 102 ? r3 - 87 : void i2(false, "Invalid character in " + t4);
          }
          function h(t4, e4, r3) {
            var i3 = o(t4, r3);
            return r3 - 1 >= e4 && (i3 |= o(t4, r3 - 1) << 4), i3;
          }
          function f2(t4, e4, r3, s2) {
            for (var n2 = 0, a2 = 0, o2 = Math.min(t4.length, r3), h2 = e4; h2 < o2; h2++) {
              var f3 = t4.charCodeAt(h2) - 48;
              n2 *= s2, a2 = f3 >= 49 ? f3 - 49 + 10 : f3 >= 17 ? f3 - 17 + 10 : f3, i2(f3 >= 0 && a2 < s2, "Invalid character"), n2 += a2;
            }
            return n2;
          }
          function c(t4, e4) {
            t4.words = e4.words, t4.length = e4.length, t4.negative = e4.negative, t4.red = e4.red;
          }
          if (n.isBN = function(t4) {
            return t4 instanceof n || null !== t4 && "object" == typeof t4 && t4.constructor.wordSize === n.wordSize && Array.isArray(t4.words);
          }, n.max = function(t4, e4) {
            return t4.cmp(e4) > 0 ? t4 : e4;
          }, n.min = function(t4, e4) {
            return t4.cmp(e4) < 0 ? t4 : e4;
          }, n.prototype._init = function(t4, e4, r3) {
            if ("number" == typeof t4)
              return this._initNumber(t4, e4, r3);
            if ("object" == typeof t4)
              return this._initArray(t4, e4, r3);
            "hex" === e4 && (e4 = 16), i2(e4 === (0 | e4) && e4 >= 2 && e4 <= 36);
            var s2 = 0;
            "-" === (t4 = t4.toString().replace(/\s+/g, ""))[0] && (s2++, this.negative = 1), s2 < t4.length && (16 === e4 ? this._parseHex(t4, s2, r3) : (this._parseBase(t4, e4, s2), "le" === r3 && this._initArray(this.toArray(), e4, r3)));
          }, n.prototype._initNumber = function(t4, e4, r3) {
            t4 < 0 && (this.negative = 1, t4 = -t4), t4 < 67108864 ? (this.words = [67108863 & t4], this.length = 1) : t4 < 4503599627370496 ? (this.words = [67108863 & t4, t4 / 67108864 & 67108863], this.length = 2) : (i2(t4 < 9007199254740992), this.words = [67108863 & t4, t4 / 67108864 & 67108863, 1], this.length = 3), "le" === r3 && this._initArray(this.toArray(), e4, r3);
          }, n.prototype._initArray = function(t4, e4, r3) {
            if (i2("number" == typeof t4.length), t4.length <= 0)
              return this.words = [0], this.length = 1, this;
            this.length = Math.ceil(t4.length / 3), this.words = new Array(this.length);
            for (var s2 = 0; s2 < this.length; s2++)
              this.words[s2] = 0;
            var n2, a2, o2 = 0;
            if ("be" === r3)
              for (s2 = t4.length - 1, n2 = 0; s2 >= 0; s2 -= 3)
                a2 = t4[s2] | t4[s2 - 1] << 8 | t4[s2 - 2] << 16, this.words[n2] |= a2 << o2 & 67108863, this.words[n2 + 1] = a2 >>> 26 - o2 & 67108863, (o2 += 24) >= 26 && (o2 -= 26, n2++);
            else if ("le" === r3)
              for (s2 = 0, n2 = 0; s2 < t4.length; s2 += 3)
                a2 = t4[s2] | t4[s2 + 1] << 8 | t4[s2 + 2] << 16, this.words[n2] |= a2 << o2 & 67108863, this.words[n2 + 1] = a2 >>> 26 - o2 & 67108863, (o2 += 24) >= 26 && (o2 -= 26, n2++);
            return this._strip();
          }, n.prototype._parseHex = function(t4, e4, r3) {
            this.length = Math.ceil((t4.length - e4) / 6), this.words = new Array(this.length);
            for (var i3 = 0; i3 < this.length; i3++)
              this.words[i3] = 0;
            var s2, n2 = 0, a2 = 0;
            if ("be" === r3)
              for (i3 = t4.length - 1; i3 >= e4; i3 -= 2)
                s2 = h(t4, e4, i3) << n2, this.words[a2] |= 67108863 & s2, n2 >= 18 ? (n2 -= 18, a2 += 1, this.words[a2] |= s2 >>> 26) : n2 += 8;
            else
              for (i3 = (t4.length - e4) % 2 == 0 ? e4 + 1 : e4; i3 < t4.length; i3 += 2)
                s2 = h(t4, e4, i3) << n2, this.words[a2] |= 67108863 & s2, n2 >= 18 ? (n2 -= 18, a2 += 1, this.words[a2] |= s2 >>> 26) : n2 += 8;
            this._strip();
          }, n.prototype._parseBase = function(t4, e4, r3) {
            this.words = [0], this.length = 1;
            for (var i3 = 0, s2 = 1; s2 <= 67108863; s2 *= e4)
              i3++;
            i3--, s2 = s2 / e4 | 0;
            for (var n2 = t4.length - r3, a2 = n2 % i3, o2 = Math.min(n2, n2 - a2) + r3, h2 = 0, c2 = r3; c2 < o2; c2 += i3)
              h2 = f2(t4, c2, c2 + i3, e4), this.imuln(s2), this.words[0] + h2 < 67108864 ? this.words[0] += h2 : this._iaddn(h2);
            if (0 !== a2) {
              var u2 = 1;
              for (h2 = f2(t4, c2, t4.length, e4), c2 = 0; c2 < a2; c2++)
                u2 *= e4;
              this.imuln(u2), this.words[0] + h2 < 67108864 ? this.words[0] += h2 : this._iaddn(h2);
            }
            this._strip();
          }, n.prototype.copy = function(t4) {
            t4.words = new Array(this.length);
            for (var e4 = 0; e4 < this.length; e4++)
              t4.words[e4] = this.words[e4];
            t4.length = this.length, t4.negative = this.negative, t4.red = this.red;
          }, n.prototype._move = function(t4) {
            c(t4, this);
          }, n.prototype.clone = function() {
            var t4 = new n(null);
            return this.copy(t4), t4;
          }, n.prototype._expand = function(t4) {
            for (; this.length < t4; )
              this.words[this.length++] = 0;
            return this;
          }, n.prototype._strip = function() {
            for (; this.length > 1 && 0 === this.words[this.length - 1]; )
              this.length--;
            return this._normSign();
          }, n.prototype._normSign = function() {
            return 1 === this.length && 0 === this.words[0] && (this.negative = 0), this;
          }, "undefined" != typeof Symbol && "function" == typeof Symbol.for)
            try {
              n.prototype[Symbol.for("nodejs.util.inspect.custom")] = u;
            } catch (t4) {
              n.prototype.inspect = u;
            }
          else
            n.prototype.inspect = u;
          function u() {
            return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
          }
          var d = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], l = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], p = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
          function b(t4, e4, r3) {
            r3.negative = e4.negative ^ t4.negative;
            var i3 = t4.length + e4.length | 0;
            r3.length = i3, i3 = i3 - 1 | 0;
            var s2 = 0 | t4.words[0], n2 = 0 | e4.words[0], a2 = s2 * n2, o2 = 67108863 & a2, h2 = a2 / 67108864 | 0;
            r3.words[0] = o2;
            for (var f3 = 1; f3 < i3; f3++) {
              for (var c2 = h2 >>> 26, u2 = 67108863 & h2, d2 = Math.min(f3, e4.length - 1), l2 = Math.max(0, f3 - t4.length + 1); l2 <= d2; l2++) {
                var p2 = f3 - l2 | 0;
                c2 += (a2 = (s2 = 0 | t4.words[p2]) * (n2 = 0 | e4.words[l2]) + u2) / 67108864 | 0, u2 = 67108863 & a2;
              }
              r3.words[f3] = 0 | u2, h2 = 0 | c2;
            }
            return 0 !== h2 ? r3.words[f3] = 0 | h2 : r3.length--, r3._strip();
          }
          n.prototype.toString = function(t4, e4) {
            var r3;
            if (e4 = 0 | e4 || 1, 16 === (t4 = t4 || 10) || "hex" === t4) {
              r3 = "";
              for (var s2 = 0, n2 = 0, a2 = 0; a2 < this.length; a2++) {
                var o2 = this.words[a2], h2 = (16777215 & (o2 << s2 | n2)).toString(16);
                r3 = 0 != (n2 = o2 >>> 24 - s2 & 16777215) || a2 !== this.length - 1 ? d[6 - h2.length] + h2 + r3 : h2 + r3, (s2 += 2) >= 26 && (s2 -= 26, a2--);
              }
              for (0 !== n2 && (r3 = n2.toString(16) + r3); r3.length % e4 != 0; )
                r3 = "0" + r3;
              return 0 !== this.negative && (r3 = "-" + r3), r3;
            }
            if (t4 === (0 | t4) && t4 >= 2 && t4 <= 36) {
              var f3 = l[t4], c2 = p[t4];
              r3 = "";
              var u2 = this.clone();
              for (u2.negative = 0; !u2.isZero(); ) {
                var b2 = u2.modrn(c2).toString(t4);
                r3 = (u2 = u2.idivn(c2)).isZero() ? b2 + r3 : d[f3 - b2.length] + b2 + r3;
              }
              for (this.isZero() && (r3 = "0" + r3); r3.length % e4 != 0; )
                r3 = "0" + r3;
              return 0 !== this.negative && (r3 = "-" + r3), r3;
            }
            i2(false, "Base should be between 2 and 36");
          }, n.prototype.toNumber = function() {
            var t4 = this.words[0];
            return 2 === this.length ? t4 += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? t4 += 4503599627370496 + 67108864 * this.words[1] : this.length > 2 && i2(false, "Number can only safely store up to 53 bits"), 0 !== this.negative ? -t4 : t4;
          }, n.prototype.toJSON = function() {
            return this.toString(16, 2);
          }, a && (n.prototype.toBuffer = function(t4, e4) {
            return this.toArrayLike(a, t4, e4);
          }), n.prototype.toArray = function(t4, e4) {
            return this.toArrayLike(Array, t4, e4);
          }, n.prototype.toArrayLike = function(t4, e4, r3) {
            this._strip();
            var s2 = this.byteLength(), n2 = r3 || Math.max(1, s2);
            i2(s2 <= n2, "byte array longer than desired length"), i2(n2 > 0, "Requested array length <= 0");
            var a2 = function(t5, e5) {
              return t5.allocUnsafe ? t5.allocUnsafe(e5) : new t5(e5);
            }(t4, n2);
            return this["_toArrayLike" + ("le" === e4 ? "LE" : "BE")](a2, s2), a2;
          }, n.prototype._toArrayLikeLE = function(t4, e4) {
            for (var r3 = 0, i3 = 0, s2 = 0, n2 = 0; s2 < this.length; s2++) {
              var a2 = this.words[s2] << n2 | i3;
              t4[r3++] = 255 & a2, r3 < t4.length && (t4[r3++] = a2 >> 8 & 255), r3 < t4.length && (t4[r3++] = a2 >> 16 & 255), 6 === n2 ? (r3 < t4.length && (t4[r3++] = a2 >> 24 & 255), i3 = 0, n2 = 0) : (i3 = a2 >>> 24, n2 += 2);
            }
            if (r3 < t4.length)
              for (t4[r3++] = i3; r3 < t4.length; )
                t4[r3++] = 0;
          }, n.prototype._toArrayLikeBE = function(t4, e4) {
            for (var r3 = t4.length - 1, i3 = 0, s2 = 0, n2 = 0; s2 < this.length; s2++) {
              var a2 = this.words[s2] << n2 | i3;
              t4[r3--] = 255 & a2, r3 >= 0 && (t4[r3--] = a2 >> 8 & 255), r3 >= 0 && (t4[r3--] = a2 >> 16 & 255), 6 === n2 ? (r3 >= 0 && (t4[r3--] = a2 >> 24 & 255), i3 = 0, n2 = 0) : (i3 = a2 >>> 24, n2 += 2);
            }
            if (r3 >= 0)
              for (t4[r3--] = i3; r3 >= 0; )
                t4[r3--] = 0;
          }, Math.clz32 ? n.prototype._countBits = function(t4) {
            return 32 - Math.clz32(t4);
          } : n.prototype._countBits = function(t4) {
            var e4 = t4, r3 = 0;
            return e4 >= 4096 && (r3 += 13, e4 >>>= 13), e4 >= 64 && (r3 += 7, e4 >>>= 7), e4 >= 8 && (r3 += 4, e4 >>>= 4), e4 >= 2 && (r3 += 2, e4 >>>= 2), r3 + e4;
          }, n.prototype._zeroBits = function(t4) {
            if (0 === t4)
              return 26;
            var e4 = t4, r3 = 0;
            return 0 == (8191 & e4) && (r3 += 13, e4 >>>= 13), 0 == (127 & e4) && (r3 += 7, e4 >>>= 7), 0 == (15 & e4) && (r3 += 4, e4 >>>= 4), 0 == (3 & e4) && (r3 += 2, e4 >>>= 2), 0 == (1 & e4) && r3++, r3;
          }, n.prototype.bitLength = function() {
            var t4 = this.words[this.length - 1], e4 = this._countBits(t4);
            return 26 * (this.length - 1) + e4;
          }, n.prototype.zeroBits = function() {
            if (this.isZero())
              return 0;
            for (var t4 = 0, e4 = 0; e4 < this.length; e4++) {
              var r3 = this._zeroBits(this.words[e4]);
              if (t4 += r3, 26 !== r3)
                break;
            }
            return t4;
          }, n.prototype.byteLength = function() {
            return Math.ceil(this.bitLength() / 8);
          }, n.prototype.toTwos = function(t4) {
            return 0 !== this.negative ? this.abs().inotn(t4).iaddn(1) : this.clone();
          }, n.prototype.fromTwos = function(t4) {
            return this.testn(t4 - 1) ? this.notn(t4).iaddn(1).ineg() : this.clone();
          }, n.prototype.isNeg = function() {
            return 0 !== this.negative;
          }, n.prototype.neg = function() {
            return this.clone().ineg();
          }, n.prototype.ineg = function() {
            return this.isZero() || (this.negative ^= 1), this;
          }, n.prototype.iuor = function(t4) {
            for (; this.length < t4.length; )
              this.words[this.length++] = 0;
            for (var e4 = 0; e4 < t4.length; e4++)
              this.words[e4] = this.words[e4] | t4.words[e4];
            return this._strip();
          }, n.prototype.ior = function(t4) {
            return i2(0 == (this.negative | t4.negative)), this.iuor(t4);
          }, n.prototype.or = function(t4) {
            return this.length > t4.length ? this.clone().ior(t4) : t4.clone().ior(this);
          }, n.prototype.uor = function(t4) {
            return this.length > t4.length ? this.clone().iuor(t4) : t4.clone().iuor(this);
          }, n.prototype.iuand = function(t4) {
            var e4;
            e4 = this.length > t4.length ? t4 : this;
            for (var r3 = 0; r3 < e4.length; r3++)
              this.words[r3] = this.words[r3] & t4.words[r3];
            return this.length = e4.length, this._strip();
          }, n.prototype.iand = function(t4) {
            return i2(0 == (this.negative | t4.negative)), this.iuand(t4);
          }, n.prototype.and = function(t4) {
            return this.length > t4.length ? this.clone().iand(t4) : t4.clone().iand(this);
          }, n.prototype.uand = function(t4) {
            return this.length > t4.length ? this.clone().iuand(t4) : t4.clone().iuand(this);
          }, n.prototype.iuxor = function(t4) {
            var e4, r3;
            this.length > t4.length ? (e4 = this, r3 = t4) : (e4 = t4, r3 = this);
            for (var i3 = 0; i3 < r3.length; i3++)
              this.words[i3] = e4.words[i3] ^ r3.words[i3];
            if (this !== e4)
              for (; i3 < e4.length; i3++)
                this.words[i3] = e4.words[i3];
            return this.length = e4.length, this._strip();
          }, n.prototype.ixor = function(t4) {
            return i2(0 == (this.negative | t4.negative)), this.iuxor(t4);
          }, n.prototype.xor = function(t4) {
            return this.length > t4.length ? this.clone().ixor(t4) : t4.clone().ixor(this);
          }, n.prototype.uxor = function(t4) {
            return this.length > t4.length ? this.clone().iuxor(t4) : t4.clone().iuxor(this);
          }, n.prototype.inotn = function(t4) {
            i2("number" == typeof t4 && t4 >= 0);
            var e4 = 0 | Math.ceil(t4 / 26), r3 = t4 % 26;
            this._expand(e4), r3 > 0 && e4--;
            for (var s2 = 0; s2 < e4; s2++)
              this.words[s2] = 67108863 & ~this.words[s2];
            return r3 > 0 && (this.words[s2] = ~this.words[s2] & 67108863 >> 26 - r3), this._strip();
          }, n.prototype.notn = function(t4) {
            return this.clone().inotn(t4);
          }, n.prototype.setn = function(t4, e4) {
            i2("number" == typeof t4 && t4 >= 0);
            var r3 = t4 / 26 | 0, s2 = t4 % 26;
            return this._expand(r3 + 1), this.words[r3] = e4 ? this.words[r3] | 1 << s2 : this.words[r3] & ~(1 << s2), this._strip();
          }, n.prototype.iadd = function(t4) {
            var e4, r3, i3;
            if (0 !== this.negative && 0 === t4.negative)
              return this.negative = 0, e4 = this.isub(t4), this.negative ^= 1, this._normSign();
            if (0 === this.negative && 0 !== t4.negative)
              return t4.negative = 0, e4 = this.isub(t4), t4.negative = 1, e4._normSign();
            this.length > t4.length ? (r3 = this, i3 = t4) : (r3 = t4, i3 = this);
            for (var s2 = 0, n2 = 0; n2 < i3.length; n2++)
              e4 = (0 | r3.words[n2]) + (0 | i3.words[n2]) + s2, this.words[n2] = 67108863 & e4, s2 = e4 >>> 26;
            for (; 0 !== s2 && n2 < r3.length; n2++)
              e4 = (0 | r3.words[n2]) + s2, this.words[n2] = 67108863 & e4, s2 = e4 >>> 26;
            if (this.length = r3.length, 0 !== s2)
              this.words[this.length] = s2, this.length++;
            else if (r3 !== this)
              for (; n2 < r3.length; n2++)
                this.words[n2] = r3.words[n2];
            return this;
          }, n.prototype.add = function(t4) {
            var e4;
            return 0 !== t4.negative && 0 === this.negative ? (t4.negative = 0, e4 = this.sub(t4), t4.negative ^= 1, e4) : 0 === t4.negative && 0 !== this.negative ? (this.negative = 0, e4 = t4.sub(this), this.negative = 1, e4) : this.length > t4.length ? this.clone().iadd(t4) : t4.clone().iadd(this);
          }, n.prototype.isub = function(t4) {
            if (0 !== t4.negative) {
              t4.negative = 0;
              var e4 = this.iadd(t4);
              return t4.negative = 1, e4._normSign();
            }
            if (0 !== this.negative)
              return this.negative = 0, this.iadd(t4), this.negative = 1, this._normSign();
            var r3, i3, s2 = this.cmp(t4);
            if (0 === s2)
              return this.negative = 0, this.length = 1, this.words[0] = 0, this;
            s2 > 0 ? (r3 = this, i3 = t4) : (r3 = t4, i3 = this);
            for (var n2 = 0, a2 = 0; a2 < i3.length; a2++)
              n2 = (e4 = (0 | r3.words[a2]) - (0 | i3.words[a2]) + n2) >> 26, this.words[a2] = 67108863 & e4;
            for (; 0 !== n2 && a2 < r3.length; a2++)
              n2 = (e4 = (0 | r3.words[a2]) + n2) >> 26, this.words[a2] = 67108863 & e4;
            if (0 === n2 && a2 < r3.length && r3 !== this)
              for (; a2 < r3.length; a2++)
                this.words[a2] = r3.words[a2];
            return this.length = Math.max(this.length, a2), r3 !== this && (this.negative = 1), this._strip();
          }, n.prototype.sub = function(t4) {
            return this.clone().isub(t4);
          };
          var m = function(t4, e4, r3) {
            var i3, s2, n2, a2 = t4.words, o2 = e4.words, h2 = r3.words, f3 = 0, c2 = 0 | a2[0], u2 = 8191 & c2, d2 = c2 >>> 13, l2 = 0 | a2[1], p2 = 8191 & l2, b2 = l2 >>> 13, m2 = 0 | a2[2], g2 = 8191 & m2, y2 = m2 >>> 13, w2 = 0 | a2[3], v2 = 8191 & w2, S2 = w2 >>> 13, _2 = 0 | a2[4], B2 = 8191 & _2, I2 = _2 >>> 13, O2 = 0 | a2[5], E2 = 8191 & O2, P2 = O2 >>> 13, k = 0 | a2[6], N = 8191 & k, A = k >>> 13, x = 0 | a2[7], R = 8191 & x, M = x >>> 13, T = 0 | a2[8], C = 8191 & T, H = T >>> 13, L = 0 | a2[9], K = 8191 & L, F = L >>> 13, U = 0 | o2[0], D = 8191 & U, V = U >>> 13, j = 0 | o2[1], q = 8191 & j, z = j >>> 13, G = 0 | o2[2], J = 8191 & G, Y = G >>> 13, W = 0 | o2[3], Q = 8191 & W, X = W >>> 13, Z = 0 | o2[4], $ = 8191 & Z, tt = Z >>> 13, et = 0 | o2[5], rt = 8191 & et, it = et >>> 13, st = 0 | o2[6], nt = 8191 & st, at = st >>> 13, ot = 0 | o2[7], ht = 8191 & ot, ft = ot >>> 13, ct = 0 | o2[8], ut = 8191 & ct, dt = ct >>> 13, lt = 0 | o2[9], pt = 8191 & lt, bt = lt >>> 13;
            r3.negative = t4.negative ^ e4.negative, r3.length = 19;
            var mt = (f3 + (i3 = Math.imul(u2, D)) | 0) + ((8191 & (s2 = (s2 = Math.imul(u2, V)) + Math.imul(d2, D) | 0)) << 13) | 0;
            f3 = ((n2 = Math.imul(d2, V)) + (s2 >>> 13) | 0) + (mt >>> 26) | 0, mt &= 67108863, i3 = Math.imul(p2, D), s2 = (s2 = Math.imul(p2, V)) + Math.imul(b2, D) | 0, n2 = Math.imul(b2, V);
            var gt = (f3 + (i3 = i3 + Math.imul(u2, q) | 0) | 0) + ((8191 & (s2 = (s2 = s2 + Math.imul(u2, z) | 0) + Math.imul(d2, q) | 0)) << 13) | 0;
            f3 = ((n2 = n2 + Math.imul(d2, z) | 0) + (s2 >>> 13) | 0) + (gt >>> 26) | 0, gt &= 67108863, i3 = Math.imul(g2, D), s2 = (s2 = Math.imul(g2, V)) + Math.imul(y2, D) | 0, n2 = Math.imul(y2, V), i3 = i3 + Math.imul(p2, q) | 0, s2 = (s2 = s2 + Math.imul(p2, z) | 0) + Math.imul(b2, q) | 0, n2 = n2 + Math.imul(b2, z) | 0;
            var yt = (f3 + (i3 = i3 + Math.imul(u2, J) | 0) | 0) + ((8191 & (s2 = (s2 = s2 + Math.imul(u2, Y) | 0) + Math.imul(d2, J) | 0)) << 13) | 0;
            f3 = ((n2 = n2 + Math.imul(d2, Y) | 0) + (s2 >>> 13) | 0) + (yt >>> 26) | 0, yt &= 67108863, i3 = Math.imul(v2, D), s2 = (s2 = Math.imul(v2, V)) + Math.imul(S2, D) | 0, n2 = Math.imul(S2, V), i3 = i3 + Math.imul(g2, q) | 0, s2 = (s2 = s2 + Math.imul(g2, z) | 0) + Math.imul(y2, q) | 0, n2 = n2 + Math.imul(y2, z) | 0, i3 = i3 + Math.imul(p2, J) | 0, s2 = (s2 = s2 + Math.imul(p2, Y) | 0) + Math.imul(b2, J) | 0, n2 = n2 + Math.imul(b2, Y) | 0;
            var wt = (f3 + (i3 = i3 + Math.imul(u2, Q) | 0) | 0) + ((8191 & (s2 = (s2 = s2 + Math.imul(u2, X) | 0) + Math.imul(d2, Q) | 0)) << 13) | 0;
            f3 = ((n2 = n2 + Math.imul(d2, X) | 0) + (s2 >>> 13) | 0) + (wt >>> 26) | 0, wt &= 67108863, i3 = Math.imul(B2, D), s2 = (s2 = Math.imul(B2, V)) + Math.imul(I2, D) | 0, n2 = Math.imul(I2, V), i3 = i3 + Math.imul(v2, q) | 0, s2 = (s2 = s2 + Math.imul(v2, z) | 0) + Math.imul(S2, q) | 0, n2 = n2 + Math.imul(S2, z) | 0, i3 = i3 + Math.imul(g2, J) | 0, s2 = (s2 = s2 + Math.imul(g2, Y) | 0) + Math.imul(y2, J) | 0, n2 = n2 + Math.imul(y2, Y) | 0, i3 = i3 + Math.imul(p2, Q) | 0, s2 = (s2 = s2 + Math.imul(p2, X) | 0) + Math.imul(b2, Q) | 0, n2 = n2 + Math.imul(b2, X) | 0;
            var vt = (f3 + (i3 = i3 + Math.imul(u2, $) | 0) | 0) + ((8191 & (s2 = (s2 = s2 + Math.imul(u2, tt) | 0) + Math.imul(d2, $) | 0)) << 13) | 0;
            f3 = ((n2 = n2 + Math.imul(d2, tt) | 0) + (s2 >>> 13) | 0) + (vt >>> 26) | 0, vt &= 67108863, i3 = Math.imul(E2, D), s2 = (s2 = Math.imul(E2, V)) + Math.imul(P2, D) | 0, n2 = Math.imul(P2, V), i3 = i3 + Math.imul(B2, q) | 0, s2 = (s2 = s2 + Math.imul(B2, z) | 0) + Math.imul(I2, q) | 0, n2 = n2 + Math.imul(I2, z) | 0, i3 = i3 + Math.imul(v2, J) | 0, s2 = (s2 = s2 + Math.imul(v2, Y) | 0) + Math.imul(S2, J) | 0, n2 = n2 + Math.imul(S2, Y) | 0, i3 = i3 + Math.imul(g2, Q) | 0, s2 = (s2 = s2 + Math.imul(g2, X) | 0) + Math.imul(y2, Q) | 0, n2 = n2 + Math.imul(y2, X) | 0, i3 = i3 + Math.imul(p2, $) | 0, s2 = (s2 = s2 + Math.imul(p2, tt) | 0) + Math.imul(b2, $) | 0, n2 = n2 + Math.imul(b2, tt) | 0;
            var St = (f3 + (i3 = i3 + Math.imul(u2, rt) | 0) | 0) + ((8191 & (s2 = (s2 = s2 + Math.imul(u2, it) | 0) + Math.imul(d2, rt) | 0)) << 13) | 0;
            f3 = ((n2 = n2 + Math.imul(d2, it) | 0) + (s2 >>> 13) | 0) + (St >>> 26) | 0, St &= 67108863, i3 = Math.imul(N, D), s2 = (s2 = Math.imul(N, V)) + Math.imul(A, D) | 0, n2 = Math.imul(A, V), i3 = i3 + Math.imul(E2, q) | 0, s2 = (s2 = s2 + Math.imul(E2, z) | 0) + Math.imul(P2, q) | 0, n2 = n2 + Math.imul(P2, z) | 0, i3 = i3 + Math.imul(B2, J) | 0, s2 = (s2 = s2 + Math.imul(B2, Y) | 0) + Math.imul(I2, J) | 0, n2 = n2 + Math.imul(I2, Y) | 0, i3 = i3 + Math.imul(v2, Q) | 0, s2 = (s2 = s2 + Math.imul(v2, X) | 0) + Math.imul(S2, Q) | 0, n2 = n2 + Math.imul(S2, X) | 0, i3 = i3 + Math.imul(g2, $) | 0, s2 = (s2 = s2 + Math.imul(g2, tt) | 0) + Math.imul(y2, $) | 0, n2 = n2 + Math.imul(y2, tt) | 0, i3 = i3 + Math.imul(p2, rt) | 0, s2 = (s2 = s2 + Math.imul(p2, it) | 0) + Math.imul(b2, rt) | 0, n2 = n2 + Math.imul(b2, it) | 0;
            var _t = (f3 + (i3 = i3 + Math.imul(u2, nt) | 0) | 0) + ((8191 & (s2 = (s2 = s2 + Math.imul(u2, at) | 0) + Math.imul(d2, nt) | 0)) << 13) | 0;
            f3 = ((n2 = n2 + Math.imul(d2, at) | 0) + (s2 >>> 13) | 0) + (_t >>> 26) | 0, _t &= 67108863, i3 = Math.imul(R, D), s2 = (s2 = Math.imul(R, V)) + Math.imul(M, D) | 0, n2 = Math.imul(M, V), i3 = i3 + Math.imul(N, q) | 0, s2 = (s2 = s2 + Math.imul(N, z) | 0) + Math.imul(A, q) | 0, n2 = n2 + Math.imul(A, z) | 0, i3 = i3 + Math.imul(E2, J) | 0, s2 = (s2 = s2 + Math.imul(E2, Y) | 0) + Math.imul(P2, J) | 0, n2 = n2 + Math.imul(P2, Y) | 0, i3 = i3 + Math.imul(B2, Q) | 0, s2 = (s2 = s2 + Math.imul(B2, X) | 0) + Math.imul(I2, Q) | 0, n2 = n2 + Math.imul(I2, X) | 0, i3 = i3 + Math.imul(v2, $) | 0, s2 = (s2 = s2 + Math.imul(v2, tt) | 0) + Math.imul(S2, $) | 0, n2 = n2 + Math.imul(S2, tt) | 0, i3 = i3 + Math.imul(g2, rt) | 0, s2 = (s2 = s2 + Math.imul(g2, it) | 0) + Math.imul(y2, rt) | 0, n2 = n2 + Math.imul(y2, it) | 0, i3 = i3 + Math.imul(p2, nt) | 0, s2 = (s2 = s2 + Math.imul(p2, at) | 0) + Math.imul(b2, nt) | 0, n2 = n2 + Math.imul(b2, at) | 0;
            var Bt = (f3 + (i3 = i3 + Math.imul(u2, ht) | 0) | 0) + ((8191 & (s2 = (s2 = s2 + Math.imul(u2, ft) | 0) + Math.imul(d2, ht) | 0)) << 13) | 0;
            f3 = ((n2 = n2 + Math.imul(d2, ft) | 0) + (s2 >>> 13) | 0) + (Bt >>> 26) | 0, Bt &= 67108863, i3 = Math.imul(C, D), s2 = (s2 = Math.imul(C, V)) + Math.imul(H, D) | 0, n2 = Math.imul(H, V), i3 = i3 + Math.imul(R, q) | 0, s2 = (s2 = s2 + Math.imul(R, z) | 0) + Math.imul(M, q) | 0, n2 = n2 + Math.imul(M, z) | 0, i3 = i3 + Math.imul(N, J) | 0, s2 = (s2 = s2 + Math.imul(N, Y) | 0) + Math.imul(A, J) | 0, n2 = n2 + Math.imul(A, Y) | 0, i3 = i3 + Math.imul(E2, Q) | 0, s2 = (s2 = s2 + Math.imul(E2, X) | 0) + Math.imul(P2, Q) | 0, n2 = n2 + Math.imul(P2, X) | 0, i3 = i3 + Math.imul(B2, $) | 0, s2 = (s2 = s2 + Math.imul(B2, tt) | 0) + Math.imul(I2, $) | 0, n2 = n2 + Math.imul(I2, tt) | 0, i3 = i3 + Math.imul(v2, rt) | 0, s2 = (s2 = s2 + Math.imul(v2, it) | 0) + Math.imul(S2, rt) | 0, n2 = n2 + Math.imul(S2, it) | 0, i3 = i3 + Math.imul(g2, nt) | 0, s2 = (s2 = s2 + Math.imul(g2, at) | 0) + Math.imul(y2, nt) | 0, n2 = n2 + Math.imul(y2, at) | 0, i3 = i3 + Math.imul(p2, ht) | 0, s2 = (s2 = s2 + Math.imul(p2, ft) | 0) + Math.imul(b2, ht) | 0, n2 = n2 + Math.imul(b2, ft) | 0;
            var It = (f3 + (i3 = i3 + Math.imul(u2, ut) | 0) | 0) + ((8191 & (s2 = (s2 = s2 + Math.imul(u2, dt) | 0) + Math.imul(d2, ut) | 0)) << 13) | 0;
            f3 = ((n2 = n2 + Math.imul(d2, dt) | 0) + (s2 >>> 13) | 0) + (It >>> 26) | 0, It &= 67108863, i3 = Math.imul(K, D), s2 = (s2 = Math.imul(K, V)) + Math.imul(F, D) | 0, n2 = Math.imul(F, V), i3 = i3 + Math.imul(C, q) | 0, s2 = (s2 = s2 + Math.imul(C, z) | 0) + Math.imul(H, q) | 0, n2 = n2 + Math.imul(H, z) | 0, i3 = i3 + Math.imul(R, J) | 0, s2 = (s2 = s2 + Math.imul(R, Y) | 0) + Math.imul(M, J) | 0, n2 = n2 + Math.imul(M, Y) | 0, i3 = i3 + Math.imul(N, Q) | 0, s2 = (s2 = s2 + Math.imul(N, X) | 0) + Math.imul(A, Q) | 0, n2 = n2 + Math.imul(A, X) | 0, i3 = i3 + Math.imul(E2, $) | 0, s2 = (s2 = s2 + Math.imul(E2, tt) | 0) + Math.imul(P2, $) | 0, n2 = n2 + Math.imul(P2, tt) | 0, i3 = i3 + Math.imul(B2, rt) | 0, s2 = (s2 = s2 + Math.imul(B2, it) | 0) + Math.imul(I2, rt) | 0, n2 = n2 + Math.imul(I2, it) | 0, i3 = i3 + Math.imul(v2, nt) | 0, s2 = (s2 = s2 + Math.imul(v2, at) | 0) + Math.imul(S2, nt) | 0, n2 = n2 + Math.imul(S2, at) | 0, i3 = i3 + Math.imul(g2, ht) | 0, s2 = (s2 = s2 + Math.imul(g2, ft) | 0) + Math.imul(y2, ht) | 0, n2 = n2 + Math.imul(y2, ft) | 0, i3 = i3 + Math.imul(p2, ut) | 0, s2 = (s2 = s2 + Math.imul(p2, dt) | 0) + Math.imul(b2, ut) | 0, n2 = n2 + Math.imul(b2, dt) | 0;
            var Ot = (f3 + (i3 = i3 + Math.imul(u2, pt) | 0) | 0) + ((8191 & (s2 = (s2 = s2 + Math.imul(u2, bt) | 0) + Math.imul(d2, pt) | 0)) << 13) | 0;
            f3 = ((n2 = n2 + Math.imul(d2, bt) | 0) + (s2 >>> 13) | 0) + (Ot >>> 26) | 0, Ot &= 67108863, i3 = Math.imul(K, q), s2 = (s2 = Math.imul(K, z)) + Math.imul(F, q) | 0, n2 = Math.imul(F, z), i3 = i3 + Math.imul(C, J) | 0, s2 = (s2 = s2 + Math.imul(C, Y) | 0) + Math.imul(H, J) | 0, n2 = n2 + Math.imul(H, Y) | 0, i3 = i3 + Math.imul(R, Q) | 0, s2 = (s2 = s2 + Math.imul(R, X) | 0) + Math.imul(M, Q) | 0, n2 = n2 + Math.imul(M, X) | 0, i3 = i3 + Math.imul(N, $) | 0, s2 = (s2 = s2 + Math.imul(N, tt) | 0) + Math.imul(A, $) | 0, n2 = n2 + Math.imul(A, tt) | 0, i3 = i3 + Math.imul(E2, rt) | 0, s2 = (s2 = s2 + Math.imul(E2, it) | 0) + Math.imul(P2, rt) | 0, n2 = n2 + Math.imul(P2, it) | 0, i3 = i3 + Math.imul(B2, nt) | 0, s2 = (s2 = s2 + Math.imul(B2, at) | 0) + Math.imul(I2, nt) | 0, n2 = n2 + Math.imul(I2, at) | 0, i3 = i3 + Math.imul(v2, ht) | 0, s2 = (s2 = s2 + Math.imul(v2, ft) | 0) + Math.imul(S2, ht) | 0, n2 = n2 + Math.imul(S2, ft) | 0, i3 = i3 + Math.imul(g2, ut) | 0, s2 = (s2 = s2 + Math.imul(g2, dt) | 0) + Math.imul(y2, ut) | 0, n2 = n2 + Math.imul(y2, dt) | 0;
            var Et = (f3 + (i3 = i3 + Math.imul(p2, pt) | 0) | 0) + ((8191 & (s2 = (s2 = s2 + Math.imul(p2, bt) | 0) + Math.imul(b2, pt) | 0)) << 13) | 0;
            f3 = ((n2 = n2 + Math.imul(b2, bt) | 0) + (s2 >>> 13) | 0) + (Et >>> 26) | 0, Et &= 67108863, i3 = Math.imul(K, J), s2 = (s2 = Math.imul(K, Y)) + Math.imul(F, J) | 0, n2 = Math.imul(F, Y), i3 = i3 + Math.imul(C, Q) | 0, s2 = (s2 = s2 + Math.imul(C, X) | 0) + Math.imul(H, Q) | 0, n2 = n2 + Math.imul(H, X) | 0, i3 = i3 + Math.imul(R, $) | 0, s2 = (s2 = s2 + Math.imul(R, tt) | 0) + Math.imul(M, $) | 0, n2 = n2 + Math.imul(M, tt) | 0, i3 = i3 + Math.imul(N, rt) | 0, s2 = (s2 = s2 + Math.imul(N, it) | 0) + Math.imul(A, rt) | 0, n2 = n2 + Math.imul(A, it) | 0, i3 = i3 + Math.imul(E2, nt) | 0, s2 = (s2 = s2 + Math.imul(E2, at) | 0) + Math.imul(P2, nt) | 0, n2 = n2 + Math.imul(P2, at) | 0, i3 = i3 + Math.imul(B2, ht) | 0, s2 = (s2 = s2 + Math.imul(B2, ft) | 0) + Math.imul(I2, ht) | 0, n2 = n2 + Math.imul(I2, ft) | 0, i3 = i3 + Math.imul(v2, ut) | 0, s2 = (s2 = s2 + Math.imul(v2, dt) | 0) + Math.imul(S2, ut) | 0, n2 = n2 + Math.imul(S2, dt) | 0;
            var Pt = (f3 + (i3 = i3 + Math.imul(g2, pt) | 0) | 0) + ((8191 & (s2 = (s2 = s2 + Math.imul(g2, bt) | 0) + Math.imul(y2, pt) | 0)) << 13) | 0;
            f3 = ((n2 = n2 + Math.imul(y2, bt) | 0) + (s2 >>> 13) | 0) + (Pt >>> 26) | 0, Pt &= 67108863, i3 = Math.imul(K, Q), s2 = (s2 = Math.imul(K, X)) + Math.imul(F, Q) | 0, n2 = Math.imul(F, X), i3 = i3 + Math.imul(C, $) | 0, s2 = (s2 = s2 + Math.imul(C, tt) | 0) + Math.imul(H, $) | 0, n2 = n2 + Math.imul(H, tt) | 0, i3 = i3 + Math.imul(R, rt) | 0, s2 = (s2 = s2 + Math.imul(R, it) | 0) + Math.imul(M, rt) | 0, n2 = n2 + Math.imul(M, it) | 0, i3 = i3 + Math.imul(N, nt) | 0, s2 = (s2 = s2 + Math.imul(N, at) | 0) + Math.imul(A, nt) | 0, n2 = n2 + Math.imul(A, at) | 0, i3 = i3 + Math.imul(E2, ht) | 0, s2 = (s2 = s2 + Math.imul(E2, ft) | 0) + Math.imul(P2, ht) | 0, n2 = n2 + Math.imul(P2, ft) | 0, i3 = i3 + Math.imul(B2, ut) | 0, s2 = (s2 = s2 + Math.imul(B2, dt) | 0) + Math.imul(I2, ut) | 0, n2 = n2 + Math.imul(I2, dt) | 0;
            var kt = (f3 + (i3 = i3 + Math.imul(v2, pt) | 0) | 0) + ((8191 & (s2 = (s2 = s2 + Math.imul(v2, bt) | 0) + Math.imul(S2, pt) | 0)) << 13) | 0;
            f3 = ((n2 = n2 + Math.imul(S2, bt) | 0) + (s2 >>> 13) | 0) + (kt >>> 26) | 0, kt &= 67108863, i3 = Math.imul(K, $), s2 = (s2 = Math.imul(K, tt)) + Math.imul(F, $) | 0, n2 = Math.imul(F, tt), i3 = i3 + Math.imul(C, rt) | 0, s2 = (s2 = s2 + Math.imul(C, it) | 0) + Math.imul(H, rt) | 0, n2 = n2 + Math.imul(H, it) | 0, i3 = i3 + Math.imul(R, nt) | 0, s2 = (s2 = s2 + Math.imul(R, at) | 0) + Math.imul(M, nt) | 0, n2 = n2 + Math.imul(M, at) | 0, i3 = i3 + Math.imul(N, ht) | 0, s2 = (s2 = s2 + Math.imul(N, ft) | 0) + Math.imul(A, ht) | 0, n2 = n2 + Math.imul(A, ft) | 0, i3 = i3 + Math.imul(E2, ut) | 0, s2 = (s2 = s2 + Math.imul(E2, dt) | 0) + Math.imul(P2, ut) | 0, n2 = n2 + Math.imul(P2, dt) | 0;
            var Nt = (f3 + (i3 = i3 + Math.imul(B2, pt) | 0) | 0) + ((8191 & (s2 = (s2 = s2 + Math.imul(B2, bt) | 0) + Math.imul(I2, pt) | 0)) << 13) | 0;
            f3 = ((n2 = n2 + Math.imul(I2, bt) | 0) + (s2 >>> 13) | 0) + (Nt >>> 26) | 0, Nt &= 67108863, i3 = Math.imul(K, rt), s2 = (s2 = Math.imul(K, it)) + Math.imul(F, rt) | 0, n2 = Math.imul(F, it), i3 = i3 + Math.imul(C, nt) | 0, s2 = (s2 = s2 + Math.imul(C, at) | 0) + Math.imul(H, nt) | 0, n2 = n2 + Math.imul(H, at) | 0, i3 = i3 + Math.imul(R, ht) | 0, s2 = (s2 = s2 + Math.imul(R, ft) | 0) + Math.imul(M, ht) | 0, n2 = n2 + Math.imul(M, ft) | 0, i3 = i3 + Math.imul(N, ut) | 0, s2 = (s2 = s2 + Math.imul(N, dt) | 0) + Math.imul(A, ut) | 0, n2 = n2 + Math.imul(A, dt) | 0;
            var At = (f3 + (i3 = i3 + Math.imul(E2, pt) | 0) | 0) + ((8191 & (s2 = (s2 = s2 + Math.imul(E2, bt) | 0) + Math.imul(P2, pt) | 0)) << 13) | 0;
            f3 = ((n2 = n2 + Math.imul(P2, bt) | 0) + (s2 >>> 13) | 0) + (At >>> 26) | 0, At &= 67108863, i3 = Math.imul(K, nt), s2 = (s2 = Math.imul(K, at)) + Math.imul(F, nt) | 0, n2 = Math.imul(F, at), i3 = i3 + Math.imul(C, ht) | 0, s2 = (s2 = s2 + Math.imul(C, ft) | 0) + Math.imul(H, ht) | 0, n2 = n2 + Math.imul(H, ft) | 0, i3 = i3 + Math.imul(R, ut) | 0, s2 = (s2 = s2 + Math.imul(R, dt) | 0) + Math.imul(M, ut) | 0, n2 = n2 + Math.imul(M, dt) | 0;
            var xt = (f3 + (i3 = i3 + Math.imul(N, pt) | 0) | 0) + ((8191 & (s2 = (s2 = s2 + Math.imul(N, bt) | 0) + Math.imul(A, pt) | 0)) << 13) | 0;
            f3 = ((n2 = n2 + Math.imul(A, bt) | 0) + (s2 >>> 13) | 0) + (xt >>> 26) | 0, xt &= 67108863, i3 = Math.imul(K, ht), s2 = (s2 = Math.imul(K, ft)) + Math.imul(F, ht) | 0, n2 = Math.imul(F, ft), i3 = i3 + Math.imul(C, ut) | 0, s2 = (s2 = s2 + Math.imul(C, dt) | 0) + Math.imul(H, ut) | 0, n2 = n2 + Math.imul(H, dt) | 0;
            var Rt = (f3 + (i3 = i3 + Math.imul(R, pt) | 0) | 0) + ((8191 & (s2 = (s2 = s2 + Math.imul(R, bt) | 0) + Math.imul(M, pt) | 0)) << 13) | 0;
            f3 = ((n2 = n2 + Math.imul(M, bt) | 0) + (s2 >>> 13) | 0) + (Rt >>> 26) | 0, Rt &= 67108863, i3 = Math.imul(K, ut), s2 = (s2 = Math.imul(K, dt)) + Math.imul(F, ut) | 0, n2 = Math.imul(F, dt);
            var Mt = (f3 + (i3 = i3 + Math.imul(C, pt) | 0) | 0) + ((8191 & (s2 = (s2 = s2 + Math.imul(C, bt) | 0) + Math.imul(H, pt) | 0)) << 13) | 0;
            f3 = ((n2 = n2 + Math.imul(H, bt) | 0) + (s2 >>> 13) | 0) + (Mt >>> 26) | 0, Mt &= 67108863;
            var Tt = (f3 + (i3 = Math.imul(K, pt)) | 0) + ((8191 & (s2 = (s2 = Math.imul(K, bt)) + Math.imul(F, pt) | 0)) << 13) | 0;
            return f3 = ((n2 = Math.imul(F, bt)) + (s2 >>> 13) | 0) + (Tt >>> 26) | 0, Tt &= 67108863, h2[0] = mt, h2[1] = gt, h2[2] = yt, h2[3] = wt, h2[4] = vt, h2[5] = St, h2[6] = _t, h2[7] = Bt, h2[8] = It, h2[9] = Ot, h2[10] = Et, h2[11] = Pt, h2[12] = kt, h2[13] = Nt, h2[14] = At, h2[15] = xt, h2[16] = Rt, h2[17] = Mt, h2[18] = Tt, 0 !== f3 && (h2[19] = f3, r3.length++), r3;
          };
          function g(t4, e4, r3) {
            r3.negative = e4.negative ^ t4.negative, r3.length = t4.length + e4.length;
            for (var i3 = 0, s2 = 0, n2 = 0; n2 < r3.length - 1; n2++) {
              var a2 = s2;
              s2 = 0;
              for (var o2 = 67108863 & i3, h2 = Math.min(n2, e4.length - 1), f3 = Math.max(0, n2 - t4.length + 1); f3 <= h2; f3++) {
                var c2 = n2 - f3, u2 = (0 | t4.words[c2]) * (0 | e4.words[f3]), d2 = 67108863 & u2;
                o2 = 67108863 & (d2 = d2 + o2 | 0), s2 += (a2 = (a2 = a2 + (u2 / 67108864 | 0) | 0) + (d2 >>> 26) | 0) >>> 26, a2 &= 67108863;
              }
              r3.words[n2] = o2, i3 = a2, a2 = s2;
            }
            return 0 !== i3 ? r3.words[n2] = i3 : r3.length--, r3._strip();
          }
          function y(t4, e4, r3) {
            return g(t4, e4, r3);
          }
          function w(t4, e4) {
            this.x = t4, this.y = e4;
          }
          Math.imul || (m = b), n.prototype.mulTo = function(t4, e4) {
            var r3 = this.length + t4.length;
            return 10 === this.length && 10 === t4.length ? m(this, t4, e4) : r3 < 63 ? b(this, t4, e4) : r3 < 1024 ? g(this, t4, e4) : y(this, t4, e4);
          }, w.prototype.makeRBT = function(t4) {
            for (var e4 = new Array(t4), r3 = n.prototype._countBits(t4) - 1, i3 = 0; i3 < t4; i3++)
              e4[i3] = this.revBin(i3, r3, t4);
            return e4;
          }, w.prototype.revBin = function(t4, e4, r3) {
            if (0 === t4 || t4 === r3 - 1)
              return t4;
            for (var i3 = 0, s2 = 0; s2 < e4; s2++)
              i3 |= (1 & t4) << e4 - s2 - 1, t4 >>= 1;
            return i3;
          }, w.prototype.permute = function(t4, e4, r3, i3, s2, n2) {
            for (var a2 = 0; a2 < n2; a2++)
              i3[a2] = e4[t4[a2]], s2[a2] = r3[t4[a2]];
          }, w.prototype.transform = function(t4, e4, r3, i3, s2, n2) {
            this.permute(n2, t4, e4, r3, i3, s2);
            for (var a2 = 1; a2 < s2; a2 <<= 1)
              for (var o2 = a2 << 1, h2 = Math.cos(2 * Math.PI / o2), f3 = Math.sin(2 * Math.PI / o2), c2 = 0; c2 < s2; c2 += o2)
                for (var u2 = h2, d2 = f3, l2 = 0; l2 < a2; l2++) {
                  var p2 = r3[c2 + l2], b2 = i3[c2 + l2], m2 = r3[c2 + l2 + a2], g2 = i3[c2 + l2 + a2], y2 = u2 * m2 - d2 * g2;
                  g2 = u2 * g2 + d2 * m2, m2 = y2, r3[c2 + l2] = p2 + m2, i3[c2 + l2] = b2 + g2, r3[c2 + l2 + a2] = p2 - m2, i3[c2 + l2 + a2] = b2 - g2, l2 !== o2 && (y2 = h2 * u2 - f3 * d2, d2 = h2 * d2 + f3 * u2, u2 = y2);
                }
          }, w.prototype.guessLen13b = function(t4, e4) {
            var r3 = 1 | Math.max(e4, t4), i3 = 1 & r3, s2 = 0;
            for (r3 = r3 / 2 | 0; r3; r3 >>>= 1)
              s2++;
            return 1 << s2 + 1 + i3;
          }, w.prototype.conjugate = function(t4, e4, r3) {
            if (!(r3 <= 1))
              for (var i3 = 0; i3 < r3 / 2; i3++) {
                var s2 = t4[i3];
                t4[i3] = t4[r3 - i3 - 1], t4[r3 - i3 - 1] = s2, s2 = e4[i3], e4[i3] = -e4[r3 - i3 - 1], e4[r3 - i3 - 1] = -s2;
              }
          }, w.prototype.normalize13b = function(t4, e4) {
            for (var r3 = 0, i3 = 0; i3 < e4 / 2; i3++) {
              var s2 = 8192 * Math.round(t4[2 * i3 + 1] / e4) + Math.round(t4[2 * i3] / e4) + r3;
              t4[i3] = 67108863 & s2, r3 = s2 < 67108864 ? 0 : s2 / 67108864 | 0;
            }
            return t4;
          }, w.prototype.convert13b = function(t4, e4, r3, s2) {
            for (var n2 = 0, a2 = 0; a2 < e4; a2++)
              n2 += 0 | t4[a2], r3[2 * a2] = 8191 & n2, n2 >>>= 13, r3[2 * a2 + 1] = 8191 & n2, n2 >>>= 13;
            for (a2 = 2 * e4; a2 < s2; ++a2)
              r3[a2] = 0;
            i2(0 === n2), i2(0 == (-8192 & n2));
          }, w.prototype.stub = function(t4) {
            for (var e4 = new Array(t4), r3 = 0; r3 < t4; r3++)
              e4[r3] = 0;
            return e4;
          }, w.prototype.mulp = function(t4, e4, r3) {
            var i3 = 2 * this.guessLen13b(t4.length, e4.length), s2 = this.makeRBT(i3), n2 = this.stub(i3), a2 = new Array(i3), o2 = new Array(i3), h2 = new Array(i3), f3 = new Array(i3), c2 = new Array(i3), u2 = new Array(i3), d2 = r3.words;
            d2.length = i3, this.convert13b(t4.words, t4.length, a2, i3), this.convert13b(e4.words, e4.length, f3, i3), this.transform(a2, n2, o2, h2, i3, s2), this.transform(f3, n2, c2, u2, i3, s2);
            for (var l2 = 0; l2 < i3; l2++) {
              var p2 = o2[l2] * c2[l2] - h2[l2] * u2[l2];
              h2[l2] = o2[l2] * u2[l2] + h2[l2] * c2[l2], o2[l2] = p2;
            }
            return this.conjugate(o2, h2, i3), this.transform(o2, h2, d2, n2, i3, s2), this.conjugate(d2, n2, i3), this.normalize13b(d2, i3), r3.negative = t4.negative ^ e4.negative, r3.length = t4.length + e4.length, r3._strip();
          }, n.prototype.mul = function(t4) {
            var e4 = new n(null);
            return e4.words = new Array(this.length + t4.length), this.mulTo(t4, e4);
          }, n.prototype.mulf = function(t4) {
            var e4 = new n(null);
            return e4.words = new Array(this.length + t4.length), y(this, t4, e4);
          }, n.prototype.imul = function(t4) {
            return this.clone().mulTo(t4, this);
          }, n.prototype.imuln = function(t4) {
            var e4 = t4 < 0;
            e4 && (t4 = -t4), i2("number" == typeof t4), i2(t4 < 67108864);
            for (var r3 = 0, s2 = 0; s2 < this.length; s2++) {
              var n2 = (0 | this.words[s2]) * t4, a2 = (67108863 & n2) + (67108863 & r3);
              r3 >>= 26, r3 += n2 / 67108864 | 0, r3 += a2 >>> 26, this.words[s2] = 67108863 & a2;
            }
            return 0 !== r3 && (this.words[s2] = r3, this.length++), e4 ? this.ineg() : this;
          }, n.prototype.muln = function(t4) {
            return this.clone().imuln(t4);
          }, n.prototype.sqr = function() {
            return this.mul(this);
          }, n.prototype.isqr = function() {
            return this.imul(this.clone());
          }, n.prototype.pow = function(t4) {
            var e4 = function(t5) {
              for (var e5 = new Array(t5.bitLength()), r4 = 0; r4 < e5.length; r4++) {
                var i4 = r4 / 26 | 0, s3 = r4 % 26;
                e5[r4] = t5.words[i4] >>> s3 & 1;
              }
              return e5;
            }(t4);
            if (0 === e4.length)
              return new n(1);
            for (var r3 = this, i3 = 0; i3 < e4.length && 0 === e4[i3]; i3++, r3 = r3.sqr())
              ;
            if (++i3 < e4.length)
              for (var s2 = r3.sqr(); i3 < e4.length; i3++, s2 = s2.sqr())
                0 !== e4[i3] && (r3 = r3.mul(s2));
            return r3;
          }, n.prototype.iushln = function(t4) {
            i2("number" == typeof t4 && t4 >= 0);
            var e4, r3 = t4 % 26, s2 = (t4 - r3) / 26, n2 = 67108863 >>> 26 - r3 << 26 - r3;
            if (0 !== r3) {
              var a2 = 0;
              for (e4 = 0; e4 < this.length; e4++) {
                var o2 = this.words[e4] & n2, h2 = (0 | this.words[e4]) - o2 << r3;
                this.words[e4] = h2 | a2, a2 = o2 >>> 26 - r3;
              }
              a2 && (this.words[e4] = a2, this.length++);
            }
            if (0 !== s2) {
              for (e4 = this.length - 1; e4 >= 0; e4--)
                this.words[e4 + s2] = this.words[e4];
              for (e4 = 0; e4 < s2; e4++)
                this.words[e4] = 0;
              this.length += s2;
            }
            return this._strip();
          }, n.prototype.ishln = function(t4) {
            return i2(0 === this.negative), this.iushln(t4);
          }, n.prototype.iushrn = function(t4, e4, r3) {
            var s2;
            i2("number" == typeof t4 && t4 >= 0), s2 = e4 ? (e4 - e4 % 26) / 26 : 0;
            var n2 = t4 % 26, a2 = Math.min((t4 - n2) / 26, this.length), o2 = 67108863 ^ 67108863 >>> n2 << n2, h2 = r3;
            if (s2 -= a2, s2 = Math.max(0, s2), h2) {
              for (var f3 = 0; f3 < a2; f3++)
                h2.words[f3] = this.words[f3];
              h2.length = a2;
            }
            if (0 === a2)
              ;
            else if (this.length > a2)
              for (this.length -= a2, f3 = 0; f3 < this.length; f3++)
                this.words[f3] = this.words[f3 + a2];
            else
              this.words[0] = 0, this.length = 1;
            var c2 = 0;
            for (f3 = this.length - 1; f3 >= 0 && (0 !== c2 || f3 >= s2); f3--) {
              var u2 = 0 | this.words[f3];
              this.words[f3] = c2 << 26 - n2 | u2 >>> n2, c2 = u2 & o2;
            }
            return h2 && 0 !== c2 && (h2.words[h2.length++] = c2), 0 === this.length && (this.words[0] = 0, this.length = 1), this._strip();
          }, n.prototype.ishrn = function(t4, e4, r3) {
            return i2(0 === this.negative), this.iushrn(t4, e4, r3);
          }, n.prototype.shln = function(t4) {
            return this.clone().ishln(t4);
          }, n.prototype.ushln = function(t4) {
            return this.clone().iushln(t4);
          }, n.prototype.shrn = function(t4) {
            return this.clone().ishrn(t4);
          }, n.prototype.ushrn = function(t4) {
            return this.clone().iushrn(t4);
          }, n.prototype.testn = function(t4) {
            i2("number" == typeof t4 && t4 >= 0);
            var e4 = t4 % 26, r3 = (t4 - e4) / 26, s2 = 1 << e4;
            return !(this.length <= r3 || !(this.words[r3] & s2));
          }, n.prototype.imaskn = function(t4) {
            i2("number" == typeof t4 && t4 >= 0);
            var e4 = t4 % 26, r3 = (t4 - e4) / 26;
            if (i2(0 === this.negative, "imaskn works only with positive numbers"), this.length <= r3)
              return this;
            if (0 !== e4 && r3++, this.length = Math.min(r3, this.length), 0 !== e4) {
              var s2 = 67108863 ^ 67108863 >>> e4 << e4;
              this.words[this.length - 1] &= s2;
            }
            return this._strip();
          }, n.prototype.maskn = function(t4) {
            return this.clone().imaskn(t4);
          }, n.prototype.iaddn = function(t4) {
            return i2("number" == typeof t4), i2(t4 < 67108864), t4 < 0 ? this.isubn(-t4) : 0 !== this.negative ? 1 === this.length && (0 | this.words[0]) <= t4 ? (this.words[0] = t4 - (0 | this.words[0]), this.negative = 0, this) : (this.negative = 0, this.isubn(t4), this.negative = 1, this) : this._iaddn(t4);
          }, n.prototype._iaddn = function(t4) {
            this.words[0] += t4;
            for (var e4 = 0; e4 < this.length && this.words[e4] >= 67108864; e4++)
              this.words[e4] -= 67108864, e4 === this.length - 1 ? this.words[e4 + 1] = 1 : this.words[e4 + 1]++;
            return this.length = Math.max(this.length, e4 + 1), this;
          }, n.prototype.isubn = function(t4) {
            if (i2("number" == typeof t4), i2(t4 < 67108864), t4 < 0)
              return this.iaddn(-t4);
            if (0 !== this.negative)
              return this.negative = 0, this.iaddn(t4), this.negative = 1, this;
            if (this.words[0] -= t4, 1 === this.length && this.words[0] < 0)
              this.words[0] = -this.words[0], this.negative = 1;
            else
              for (var e4 = 0; e4 < this.length && this.words[e4] < 0; e4++)
                this.words[e4] += 67108864, this.words[e4 + 1] -= 1;
            return this._strip();
          }, n.prototype.addn = function(t4) {
            return this.clone().iaddn(t4);
          }, n.prototype.subn = function(t4) {
            return this.clone().isubn(t4);
          }, n.prototype.iabs = function() {
            return this.negative = 0, this;
          }, n.prototype.abs = function() {
            return this.clone().iabs();
          }, n.prototype._ishlnsubmul = function(t4, e4, r3) {
            var s2, n2, a2 = t4.length + r3;
            this._expand(a2);
            var o2 = 0;
            for (s2 = 0; s2 < t4.length; s2++) {
              n2 = (0 | this.words[s2 + r3]) + o2;
              var h2 = (0 | t4.words[s2]) * e4;
              o2 = ((n2 -= 67108863 & h2) >> 26) - (h2 / 67108864 | 0), this.words[s2 + r3] = 67108863 & n2;
            }
            for (; s2 < this.length - r3; s2++)
              o2 = (n2 = (0 | this.words[s2 + r3]) + o2) >> 26, this.words[s2 + r3] = 67108863 & n2;
            if (0 === o2)
              return this._strip();
            for (i2(-1 === o2), o2 = 0, s2 = 0; s2 < this.length; s2++)
              o2 = (n2 = -(0 | this.words[s2]) + o2) >> 26, this.words[s2] = 67108863 & n2;
            return this.negative = 1, this._strip();
          }, n.prototype._wordDiv = function(t4, e4) {
            var r3 = (this.length, t4.length), i3 = this.clone(), s2 = t4, a2 = 0 | s2.words[s2.length - 1];
            0 != (r3 = 26 - this._countBits(a2)) && (s2 = s2.ushln(r3), i3.iushln(r3), a2 = 0 | s2.words[s2.length - 1]);
            var o2, h2 = i3.length - s2.length;
            if ("mod" !== e4) {
              (o2 = new n(null)).length = h2 + 1, o2.words = new Array(o2.length);
              for (var f3 = 0; f3 < o2.length; f3++)
                o2.words[f3] = 0;
            }
            var c2 = i3.clone()._ishlnsubmul(s2, 1, h2);
            0 === c2.negative && (i3 = c2, o2 && (o2.words[h2] = 1));
            for (var u2 = h2 - 1; u2 >= 0; u2--) {
              var d2 = 67108864 * (0 | i3.words[s2.length + u2]) + (0 | i3.words[s2.length + u2 - 1]);
              for (d2 = Math.min(d2 / a2 | 0, 67108863), i3._ishlnsubmul(s2, d2, u2); 0 !== i3.negative; )
                d2--, i3.negative = 0, i3._ishlnsubmul(s2, 1, u2), i3.isZero() || (i3.negative ^= 1);
              o2 && (o2.words[u2] = d2);
            }
            return o2 && o2._strip(), i3._strip(), "div" !== e4 && 0 !== r3 && i3.iushrn(r3), { div: o2 || null, mod: i3 };
          }, n.prototype.divmod = function(t4, e4, r3) {
            return i2(!t4.isZero()), this.isZero() ? { div: new n(0), mod: new n(0) } : 0 !== this.negative && 0 === t4.negative ? (o2 = this.neg().divmod(t4, e4), "mod" !== e4 && (s2 = o2.div.neg()), "div" !== e4 && (a2 = o2.mod.neg(), r3 && 0 !== a2.negative && a2.iadd(t4)), { div: s2, mod: a2 }) : 0 === this.negative && 0 !== t4.negative ? (o2 = this.divmod(t4.neg(), e4), "mod" !== e4 && (s2 = o2.div.neg()), { div: s2, mod: o2.mod }) : 0 != (this.negative & t4.negative) ? (o2 = this.neg().divmod(t4.neg(), e4), "div" !== e4 && (a2 = o2.mod.neg(), r3 && 0 !== a2.negative && a2.isub(t4)), { div: o2.div, mod: a2 }) : t4.length > this.length || this.cmp(t4) < 0 ? { div: new n(0), mod: this } : 1 === t4.length ? "div" === e4 ? { div: this.divn(t4.words[0]), mod: null } : "mod" === e4 ? { div: null, mod: new n(this.modrn(t4.words[0])) } : { div: this.divn(t4.words[0]), mod: new n(this.modrn(t4.words[0])) } : this._wordDiv(t4, e4);
            var s2, a2, o2;
          }, n.prototype.div = function(t4) {
            return this.divmod(t4, "div", false).div;
          }, n.prototype.mod = function(t4) {
            return this.divmod(t4, "mod", false).mod;
          }, n.prototype.umod = function(t4) {
            return this.divmod(t4, "mod", true).mod;
          }, n.prototype.divRound = function(t4) {
            var e4 = this.divmod(t4);
            if (e4.mod.isZero())
              return e4.div;
            var r3 = 0 !== e4.div.negative ? e4.mod.isub(t4) : e4.mod, i3 = t4.ushrn(1), s2 = t4.andln(1), n2 = r3.cmp(i3);
            return n2 < 0 || 1 === s2 && 0 === n2 ? e4.div : 0 !== e4.div.negative ? e4.div.isubn(1) : e4.div.iaddn(1);
          }, n.prototype.modrn = function(t4) {
            var e4 = t4 < 0;
            e4 && (t4 = -t4), i2(t4 <= 67108863);
            for (var r3 = (1 << 26) % t4, s2 = 0, n2 = this.length - 1; n2 >= 0; n2--)
              s2 = (r3 * s2 + (0 | this.words[n2])) % t4;
            return e4 ? -s2 : s2;
          }, n.prototype.modn = function(t4) {
            return this.modrn(t4);
          }, n.prototype.idivn = function(t4) {
            var e4 = t4 < 0;
            e4 && (t4 = -t4), i2(t4 <= 67108863);
            for (var r3 = 0, s2 = this.length - 1; s2 >= 0; s2--) {
              var n2 = (0 | this.words[s2]) + 67108864 * r3;
              this.words[s2] = n2 / t4 | 0, r3 = n2 % t4;
            }
            return this._strip(), e4 ? this.ineg() : this;
          }, n.prototype.divn = function(t4) {
            return this.clone().idivn(t4);
          }, n.prototype.egcd = function(t4) {
            i2(0 === t4.negative), i2(!t4.isZero());
            var e4 = this, r3 = t4.clone();
            e4 = 0 !== e4.negative ? e4.umod(t4) : e4.clone();
            for (var s2 = new n(1), a2 = new n(0), o2 = new n(0), h2 = new n(1), f3 = 0; e4.isEven() && r3.isEven(); )
              e4.iushrn(1), r3.iushrn(1), ++f3;
            for (var c2 = r3.clone(), u2 = e4.clone(); !e4.isZero(); ) {
              for (var d2 = 0, l2 = 1; 0 == (e4.words[0] & l2) && d2 < 26; ++d2, l2 <<= 1)
                ;
              if (d2 > 0)
                for (e4.iushrn(d2); d2-- > 0; )
                  (s2.isOdd() || a2.isOdd()) && (s2.iadd(c2), a2.isub(u2)), s2.iushrn(1), a2.iushrn(1);
              for (var p2 = 0, b2 = 1; 0 == (r3.words[0] & b2) && p2 < 26; ++p2, b2 <<= 1)
                ;
              if (p2 > 0)
                for (r3.iushrn(p2); p2-- > 0; )
                  (o2.isOdd() || h2.isOdd()) && (o2.iadd(c2), h2.isub(u2)), o2.iushrn(1), h2.iushrn(1);
              e4.cmp(r3) >= 0 ? (e4.isub(r3), s2.isub(o2), a2.isub(h2)) : (r3.isub(e4), o2.isub(s2), h2.isub(a2));
            }
            return { a: o2, b: h2, gcd: r3.iushln(f3) };
          }, n.prototype._invmp = function(t4) {
            i2(0 === t4.negative), i2(!t4.isZero());
            var e4 = this, r3 = t4.clone();
            e4 = 0 !== e4.negative ? e4.umod(t4) : e4.clone();
            for (var s2, a2 = new n(1), o2 = new n(0), h2 = r3.clone(); e4.cmpn(1) > 0 && r3.cmpn(1) > 0; ) {
              for (var f3 = 0, c2 = 1; 0 == (e4.words[0] & c2) && f3 < 26; ++f3, c2 <<= 1)
                ;
              if (f3 > 0)
                for (e4.iushrn(f3); f3-- > 0; )
                  a2.isOdd() && a2.iadd(h2), a2.iushrn(1);
              for (var u2 = 0, d2 = 1; 0 == (r3.words[0] & d2) && u2 < 26; ++u2, d2 <<= 1)
                ;
              if (u2 > 0)
                for (r3.iushrn(u2); u2-- > 0; )
                  o2.isOdd() && o2.iadd(h2), o2.iushrn(1);
              e4.cmp(r3) >= 0 ? (e4.isub(r3), a2.isub(o2)) : (r3.isub(e4), o2.isub(a2));
            }
            return (s2 = 0 === e4.cmpn(1) ? a2 : o2).cmpn(0) < 0 && s2.iadd(t4), s2;
          }, n.prototype.gcd = function(t4) {
            if (this.isZero())
              return t4.abs();
            if (t4.isZero())
              return this.abs();
            var e4 = this.clone(), r3 = t4.clone();
            e4.negative = 0, r3.negative = 0;
            for (var i3 = 0; e4.isEven() && r3.isEven(); i3++)
              e4.iushrn(1), r3.iushrn(1);
            for (; ; ) {
              for (; e4.isEven(); )
                e4.iushrn(1);
              for (; r3.isEven(); )
                r3.iushrn(1);
              var s2 = e4.cmp(r3);
              if (s2 < 0) {
                var n2 = e4;
                e4 = r3, r3 = n2;
              } else if (0 === s2 || 0 === r3.cmpn(1))
                break;
              e4.isub(r3);
            }
            return r3.iushln(i3);
          }, n.prototype.invm = function(t4) {
            return this.egcd(t4).a.umod(t4);
          }, n.prototype.isEven = function() {
            return 0 == (1 & this.words[0]);
          }, n.prototype.isOdd = function() {
            return 1 == (1 & this.words[0]);
          }, n.prototype.andln = function(t4) {
            return this.words[0] & t4;
          }, n.prototype.bincn = function(t4) {
            i2("number" == typeof t4);
            var e4 = t4 % 26, r3 = (t4 - e4) / 26, s2 = 1 << e4;
            if (this.length <= r3)
              return this._expand(r3 + 1), this.words[r3] |= s2, this;
            for (var n2 = s2, a2 = r3; 0 !== n2 && a2 < this.length; a2++) {
              var o2 = 0 | this.words[a2];
              n2 = (o2 += n2) >>> 26, o2 &= 67108863, this.words[a2] = o2;
            }
            return 0 !== n2 && (this.words[a2] = n2, this.length++), this;
          }, n.prototype.isZero = function() {
            return 1 === this.length && 0 === this.words[0];
          }, n.prototype.cmpn = function(t4) {
            var e4, r3 = t4 < 0;
            if (0 !== this.negative && !r3)
              return -1;
            if (0 === this.negative && r3)
              return 1;
            if (this._strip(), this.length > 1)
              e4 = 1;
            else {
              r3 && (t4 = -t4), i2(t4 <= 67108863, "Number is too big");
              var s2 = 0 | this.words[0];
              e4 = s2 === t4 ? 0 : s2 < t4 ? -1 : 1;
            }
            return 0 !== this.negative ? 0 | -e4 : e4;
          }, n.prototype.cmp = function(t4) {
            if (0 !== this.negative && 0 === t4.negative)
              return -1;
            if (0 === this.negative && 0 !== t4.negative)
              return 1;
            var e4 = this.ucmp(t4);
            return 0 !== this.negative ? 0 | -e4 : e4;
          }, n.prototype.ucmp = function(t4) {
            if (this.length > t4.length)
              return 1;
            if (this.length < t4.length)
              return -1;
            for (var e4 = 0, r3 = this.length - 1; r3 >= 0; r3--) {
              var i3 = 0 | this.words[r3], s2 = 0 | t4.words[r3];
              if (i3 !== s2) {
                i3 < s2 ? e4 = -1 : i3 > s2 && (e4 = 1);
                break;
              }
            }
            return e4;
          }, n.prototype.gtn = function(t4) {
            return 1 === this.cmpn(t4);
          }, n.prototype.gt = function(t4) {
            return 1 === this.cmp(t4);
          }, n.prototype.gten = function(t4) {
            return this.cmpn(t4) >= 0;
          }, n.prototype.gte = function(t4) {
            return this.cmp(t4) >= 0;
          }, n.prototype.ltn = function(t4) {
            return -1 === this.cmpn(t4);
          }, n.prototype.lt = function(t4) {
            return -1 === this.cmp(t4);
          }, n.prototype.lten = function(t4) {
            return this.cmpn(t4) <= 0;
          }, n.prototype.lte = function(t4) {
            return this.cmp(t4) <= 0;
          }, n.prototype.eqn = function(t4) {
            return 0 === this.cmpn(t4);
          }, n.prototype.eq = function(t4) {
            return 0 === this.cmp(t4);
          }, n.red = function(t4) {
            return new E(t4);
          }, n.prototype.toRed = function(t4) {
            return i2(!this.red, "Already a number in reduction context"), i2(0 === this.negative, "red works only with positives"), t4.convertTo(this)._forceRed(t4);
          }, n.prototype.fromRed = function() {
            return i2(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
          }, n.prototype._forceRed = function(t4) {
            return this.red = t4, this;
          }, n.prototype.forceRed = function(t4) {
            return i2(!this.red, "Already a number in reduction context"), this._forceRed(t4);
          }, n.prototype.redAdd = function(t4) {
            return i2(this.red, "redAdd works only with red numbers"), this.red.add(this, t4);
          }, n.prototype.redIAdd = function(t4) {
            return i2(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, t4);
          }, n.prototype.redSub = function(t4) {
            return i2(this.red, "redSub works only with red numbers"), this.red.sub(this, t4);
          }, n.prototype.redISub = function(t4) {
            return i2(this.red, "redISub works only with red numbers"), this.red.isub(this, t4);
          }, n.prototype.redShl = function(t4) {
            return i2(this.red, "redShl works only with red numbers"), this.red.shl(this, t4);
          }, n.prototype.redMul = function(t4) {
            return i2(this.red, "redMul works only with red numbers"), this.red._verify2(this, t4), this.red.mul(this, t4);
          }, n.prototype.redIMul = function(t4) {
            return i2(this.red, "redMul works only with red numbers"), this.red._verify2(this, t4), this.red.imul(this, t4);
          }, n.prototype.redSqr = function() {
            return i2(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
          }, n.prototype.redISqr = function() {
            return i2(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
          }, n.prototype.redSqrt = function() {
            return i2(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
          }, n.prototype.redInvm = function() {
            return i2(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
          }, n.prototype.redNeg = function() {
            return i2(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
          }, n.prototype.redPow = function(t4) {
            return i2(this.red && !t4.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, t4);
          };
          var v = { k256: null, p224: null, p192: null, p25519: null };
          function S(t4, e4) {
            this.name = t4, this.p = new n(e4, 16), this.n = this.p.bitLength(), this.k = new n(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
          }
          function _() {
            S.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
          }
          function B() {
            S.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
          }
          function I() {
            S.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
          }
          function O() {
            S.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
          }
          function E(t4) {
            if ("string" == typeof t4) {
              var e4 = n._prime(t4);
              this.m = e4.p, this.prime = e4;
            } else
              i2(t4.gtn(1), "modulus must be greater than 1"), this.m = t4, this.prime = null;
          }
          function P(t4) {
            E.call(this, t4), this.shift = this.m.bitLength(), this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26), this.r = new n(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
          }
          S.prototype._tmp = function() {
            var t4 = new n(null);
            return t4.words = new Array(Math.ceil(this.n / 13)), t4;
          }, S.prototype.ireduce = function(t4) {
            var e4, r3 = t4;
            do {
              this.split(r3, this.tmp), e4 = (r3 = (r3 = this.imulK(r3)).iadd(this.tmp)).bitLength();
            } while (e4 > this.n);
            var i3 = e4 < this.n ? -1 : r3.ucmp(this.p);
            return 0 === i3 ? (r3.words[0] = 0, r3.length = 1) : i3 > 0 ? r3.isub(this.p) : void 0 !== r3.strip ? r3.strip() : r3._strip(), r3;
          }, S.prototype.split = function(t4, e4) {
            t4.iushrn(this.n, 0, e4);
          }, S.prototype.imulK = function(t4) {
            return t4.imul(this.k);
          }, s(_, S), _.prototype.split = function(t4, e4) {
            for (var r3 = 4194303, i3 = Math.min(t4.length, 9), s2 = 0; s2 < i3; s2++)
              e4.words[s2] = t4.words[s2];
            if (e4.length = i3, t4.length <= 9)
              return t4.words[0] = 0, void (t4.length = 1);
            var n2 = t4.words[9];
            for (e4.words[e4.length++] = n2 & r3, s2 = 10; s2 < t4.length; s2++) {
              var a2 = 0 | t4.words[s2];
              t4.words[s2 - 10] = (a2 & r3) << 4 | n2 >>> 22, n2 = a2;
            }
            n2 >>>= 22, t4.words[s2 - 10] = n2, 0 === n2 && t4.length > 10 ? t4.length -= 10 : t4.length -= 9;
          }, _.prototype.imulK = function(t4) {
            t4.words[t4.length] = 0, t4.words[t4.length + 1] = 0, t4.length += 2;
            for (var e4 = 0, r3 = 0; r3 < t4.length; r3++) {
              var i3 = 0 | t4.words[r3];
              e4 += 977 * i3, t4.words[r3] = 67108863 & e4, e4 = 64 * i3 + (e4 / 67108864 | 0);
            }
            return 0 === t4.words[t4.length - 1] && (t4.length--, 0 === t4.words[t4.length - 1] && t4.length--), t4;
          }, s(B, S), s(I, S), s(O, S), O.prototype.imulK = function(t4) {
            for (var e4 = 0, r3 = 0; r3 < t4.length; r3++) {
              var i3 = 19 * (0 | t4.words[r3]) + e4, s2 = 67108863 & i3;
              i3 >>>= 26, t4.words[r3] = s2, e4 = i3;
            }
            return 0 !== e4 && (t4.words[t4.length++] = e4), t4;
          }, n._prime = function(t4) {
            if (v[t4])
              return v[t4];
            var e4;
            if ("k256" === t4)
              e4 = new _();
            else if ("p224" === t4)
              e4 = new B();
            else if ("p192" === t4)
              e4 = new I();
            else {
              if ("p25519" !== t4)
                throw new Error("Unknown prime " + t4);
              e4 = new O();
            }
            return v[t4] = e4, e4;
          }, E.prototype._verify1 = function(t4) {
            i2(0 === t4.negative, "red works only with positives"), i2(t4.red, "red works only with red numbers");
          }, E.prototype._verify2 = function(t4, e4) {
            i2(0 == (t4.negative | e4.negative), "red works only with positives"), i2(t4.red && t4.red === e4.red, "red works only with red numbers");
          }, E.prototype.imod = function(t4) {
            return this.prime ? this.prime.ireduce(t4)._forceRed(this) : (c(t4, t4.umod(this.m)._forceRed(this)), t4);
          }, E.prototype.neg = function(t4) {
            return t4.isZero() ? t4.clone() : this.m.sub(t4)._forceRed(this);
          }, E.prototype.add = function(t4, e4) {
            this._verify2(t4, e4);
            var r3 = t4.add(e4);
            return r3.cmp(this.m) >= 0 && r3.isub(this.m), r3._forceRed(this);
          }, E.prototype.iadd = function(t4, e4) {
            this._verify2(t4, e4);
            var r3 = t4.iadd(e4);
            return r3.cmp(this.m) >= 0 && r3.isub(this.m), r3;
          }, E.prototype.sub = function(t4, e4) {
            this._verify2(t4, e4);
            var r3 = t4.sub(e4);
            return r3.cmpn(0) < 0 && r3.iadd(this.m), r3._forceRed(this);
          }, E.prototype.isub = function(t4, e4) {
            this._verify2(t4, e4);
            var r3 = t4.isub(e4);
            return r3.cmpn(0) < 0 && r3.iadd(this.m), r3;
          }, E.prototype.shl = function(t4, e4) {
            return this._verify1(t4), this.imod(t4.ushln(e4));
          }, E.prototype.imul = function(t4, e4) {
            return this._verify2(t4, e4), this.imod(t4.imul(e4));
          }, E.prototype.mul = function(t4, e4) {
            return this._verify2(t4, e4), this.imod(t4.mul(e4));
          }, E.prototype.isqr = function(t4) {
            return this.imul(t4, t4.clone());
          }, E.prototype.sqr = function(t4) {
            return this.mul(t4, t4);
          }, E.prototype.sqrt = function(t4) {
            if (t4.isZero())
              return t4.clone();
            var e4 = this.m.andln(3);
            if (i2(e4 % 2 == 1), 3 === e4) {
              var r3 = this.m.add(new n(1)).iushrn(2);
              return this.pow(t4, r3);
            }
            for (var s2 = this.m.subn(1), a2 = 0; !s2.isZero() && 0 === s2.andln(1); )
              a2++, s2.iushrn(1);
            i2(!s2.isZero());
            var o2 = new n(1).toRed(this), h2 = o2.redNeg(), f3 = this.m.subn(1).iushrn(1), c2 = this.m.bitLength();
            for (c2 = new n(2 * c2 * c2).toRed(this); 0 !== this.pow(c2, f3).cmp(h2); )
              c2.redIAdd(h2);
            for (var u2 = this.pow(c2, s2), d2 = this.pow(t4, s2.addn(1).iushrn(1)), l2 = this.pow(t4, s2), p2 = a2; 0 !== l2.cmp(o2); ) {
              for (var b2 = l2, m2 = 0; 0 !== b2.cmp(o2); m2++)
                b2 = b2.redSqr();
              i2(m2 < p2);
              var g2 = this.pow(u2, new n(1).iushln(p2 - m2 - 1));
              d2 = d2.redMul(g2), u2 = g2.redSqr(), l2 = l2.redMul(u2), p2 = m2;
            }
            return d2;
          }, E.prototype.invm = function(t4) {
            var e4 = t4._invmp(this.m);
            return 0 !== e4.negative ? (e4.negative = 0, this.imod(e4).redNeg()) : this.imod(e4);
          }, E.prototype.pow = function(t4, e4) {
            if (e4.isZero())
              return new n(1).toRed(this);
            if (0 === e4.cmpn(1))
              return t4.clone();
            var r3 = new Array(16);
            r3[0] = new n(1).toRed(this), r3[1] = t4;
            for (var i3 = 2; i3 < r3.length; i3++)
              r3[i3] = this.mul(r3[i3 - 1], t4);
            var s2 = r3[0], a2 = 0, o2 = 0, h2 = e4.bitLength() % 26;
            for (0 === h2 && (h2 = 26), i3 = e4.length - 1; i3 >= 0; i3--) {
              for (var f3 = e4.words[i3], c2 = h2 - 1; c2 >= 0; c2--) {
                var u2 = f3 >> c2 & 1;
                s2 !== r3[0] && (s2 = this.sqr(s2)), 0 !== u2 || 0 !== a2 ? (a2 <<= 1, a2 |= u2, (4 == ++o2 || 0 === i3 && 0 === c2) && (s2 = this.mul(s2, r3[a2]), o2 = 0, a2 = 0)) : o2 = 0;
              }
              h2 = 26;
            }
            return s2;
          }, E.prototype.convertTo = function(t4) {
            var e4 = t4.umod(this.m);
            return e4 === t4 ? e4.clone() : e4;
          }, E.prototype.convertFrom = function(t4) {
            var e4 = t4.clone();
            return e4.red = null, e4;
          }, n.mont = function(t4) {
            return new P(t4);
          }, s(P, E), P.prototype.convertTo = function(t4) {
            return this.imod(t4.ushln(this.shift));
          }, P.prototype.convertFrom = function(t4) {
            var e4 = this.imod(t4.mul(this.rinv));
            return e4.red = null, e4;
          }, P.prototype.imul = function(t4, e4) {
            if (t4.isZero() || e4.isZero())
              return t4.words[0] = 0, t4.length = 1, t4;
            var r3 = t4.imul(e4), i3 = r3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), s2 = r3.isub(i3).iushrn(this.shift), n2 = s2;
            return s2.cmp(this.m) >= 0 ? n2 = s2.isub(this.m) : s2.cmpn(0) < 0 && (n2 = s2.iadd(this.m)), n2._forceRed(this);
          }, P.prototype.mul = function(t4, e4) {
            if (t4.isZero() || e4.isZero())
              return new n(0)._forceRed(this);
            var r3 = t4.mul(e4), i3 = r3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), s2 = r3.isub(i3).iushrn(this.shift), a2 = s2;
            return s2.cmp(this.m) >= 0 ? a2 = s2.isub(this.m) : s2.cmpn(0) < 0 && (a2 = s2.iadd(this.m)), a2._forceRed(this);
          }, P.prototype.invm = function(t4) {
            return this.imod(t4._invmp(this.m).mul(this.r2))._forceRed(this);
          };
        }(t2 = r2.nmd(t2), this);
      }, 931: (t2, e2, r2) => {
        var i2;
        function s(t3) {
          this.rand = t3;
        }
        if (t2.exports = function(t3) {
          return i2 || (i2 = new s(null)), i2.generate(t3);
        }, t2.exports.Rand = s, s.prototype.generate = function(t3) {
          return this._rand(t3);
        }, s.prototype._rand = function(t3) {
          if (this.rand.getBytes)
            return this.rand.getBytes(t3);
          for (var e3 = new Uint8Array(t3), r3 = 0; r3 < e3.length; r3++)
            e3[r3] = this.rand.getByte();
          return e3;
        }, "object" == typeof self)
          self.crypto && self.crypto.getRandomValues ? s.prototype._rand = function(t3) {
            var e3 = new Uint8Array(t3);
            return self.crypto.getRandomValues(e3), e3;
          } : self.msCrypto && self.msCrypto.getRandomValues ? s.prototype._rand = function(t3) {
            var e3 = new Uint8Array(t3);
            return self.msCrypto.getRandomValues(e3), e3;
          } : "object" == typeof window && (s.prototype._rand = function() {
            throw new Error("Not implemented yet");
          });
        else
          try {
            var n = r2(417);
            if ("function" != typeof n.randomBytes)
              throw new Error("Not supported");
            s.prototype._rand = function(t3) {
              return n.randomBytes(t3);
            };
          } catch (t3) {
          }
      }, 191: (t2, e2, r2) => {
        var i2 = r2(162);
        t2.exports = i2("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
      }, 555: (t2, e2, r2) => {
        t2.exports = r2(417).createHmac;
      }, 715: (t2, e2, r2) => {
        var i2 = e2;
        i2.utils = r2(436), i2.common = r2(772), i2.sha = r2(41), i2.ripemd = r2(949), i2.hmac = r2(326), i2.sha1 = i2.sha.sha1, i2.sha256 = i2.sha.sha256, i2.sha224 = i2.sha.sha224, i2.sha384 = i2.sha.sha384, i2.sha512 = i2.sha.sha512, i2.ripemd160 = i2.ripemd.ripemd160;
      }, 772: (t2, e2, r2) => {
        "use strict";
        var i2 = r2(436), s = r2(746);
        function n() {
          this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, this.outSize = this.constructor.outSize, this.hmacStrength = this.constructor.hmacStrength, this.padLength = this.constructor.padLength / 8, this.endian = "big", this._delta8 = this.blockSize / 8, this._delta32 = this.blockSize / 32;
        }
        e2.BlockHash = n, n.prototype.update = function(t3, e3) {
          if (t3 = i2.toArray(t3, e3), this.pending ? this.pending = this.pending.concat(t3) : this.pending = t3, this.pendingTotal += t3.length, this.pending.length >= this._delta8) {
            var r3 = (t3 = this.pending).length % this._delta8;
            this.pending = t3.slice(t3.length - r3, t3.length), 0 === this.pending.length && (this.pending = null), t3 = i2.join32(t3, 0, t3.length - r3, this.endian);
            for (var s2 = 0; s2 < t3.length; s2 += this._delta32)
              this._update(t3, s2, s2 + this._delta32);
          }
          return this;
        }, n.prototype.digest = function(t3) {
          return this.update(this._pad()), s(null === this.pending), this._digest(t3);
        }, n.prototype._pad = function() {
          var t3 = this.pendingTotal, e3 = this._delta8, r3 = e3 - (t3 + this.padLength) % e3, i3 = new Array(r3 + this.padLength);
          i3[0] = 128;
          for (var s2 = 1; s2 < r3; s2++)
            i3[s2] = 0;
          if (t3 <<= 3, "big" === this.endian) {
            for (var n2 = 8; n2 < this.padLength; n2++)
              i3[s2++] = 0;
            i3[s2++] = 0, i3[s2++] = 0, i3[s2++] = 0, i3[s2++] = 0, i3[s2++] = t3 >>> 24 & 255, i3[s2++] = t3 >>> 16 & 255, i3[s2++] = t3 >>> 8 & 255, i3[s2++] = 255 & t3;
          } else
            for (i3[s2++] = 255 & t3, i3[s2++] = t3 >>> 8 & 255, i3[s2++] = t3 >>> 16 & 255, i3[s2++] = t3 >>> 24 & 255, i3[s2++] = 0, i3[s2++] = 0, i3[s2++] = 0, i3[s2++] = 0, n2 = 8; n2 < this.padLength; n2++)
              i3[s2++] = 0;
          return i3;
        };
      }, 326: (t2, e2, r2) => {
        "use strict";
        var i2 = r2(436), s = r2(746);
        function n(t3, e3, r3) {
          if (!(this instanceof n))
            return new n(t3, e3, r3);
          this.Hash = t3, this.blockSize = t3.blockSize / 8, this.outSize = t3.outSize / 8, this.inner = null, this.outer = null, this._init(i2.toArray(e3, r3));
        }
        t2.exports = n, n.prototype._init = function(t3) {
          t3.length > this.blockSize && (t3 = new this.Hash().update(t3).digest()), s(t3.length <= this.blockSize);
          for (var e3 = t3.length; e3 < this.blockSize; e3++)
            t3.push(0);
          for (e3 = 0; e3 < t3.length; e3++)
            t3[e3] ^= 54;
          for (this.inner = new this.Hash().update(t3), e3 = 0; e3 < t3.length; e3++)
            t3[e3] ^= 106;
          this.outer = new this.Hash().update(t3);
        }, n.prototype.update = function(t3, e3) {
          return this.inner.update(t3, e3), this;
        }, n.prototype.digest = function(t3) {
          return this.outer.update(this.inner.digest()), this.outer.digest(t3);
        };
      }, 949: (t2, e2, r2) => {
        "use strict";
        var i2 = r2(436), s = r2(772), n = i2.rotl32, a = i2.sum32, o = i2.sum32_3, h = i2.sum32_4, f2 = s.BlockHash;
        function c() {
          if (!(this instanceof c))
            return new c();
          f2.call(this), this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.endian = "little";
        }
        function u(t3, e3, r3, i3) {
          return t3 <= 15 ? e3 ^ r3 ^ i3 : t3 <= 31 ? e3 & r3 | ~e3 & i3 : t3 <= 47 ? (e3 | ~r3) ^ i3 : t3 <= 63 ? e3 & i3 | r3 & ~i3 : e3 ^ (r3 | ~i3);
        }
        function d(t3) {
          return t3 <= 15 ? 0 : t3 <= 31 ? 1518500249 : t3 <= 47 ? 1859775393 : t3 <= 63 ? 2400959708 : 2840853838;
        }
        function l(t3) {
          return t3 <= 15 ? 1352829926 : t3 <= 31 ? 1548603684 : t3 <= 47 ? 1836072691 : t3 <= 63 ? 2053994217 : 0;
        }
        i2.inherits(c, f2), e2.ripemd160 = c, c.blockSize = 512, c.outSize = 160, c.hmacStrength = 192, c.padLength = 64, c.prototype._update = function(t3, e3) {
          for (var r3 = this.h[0], i3 = this.h[1], s2 = this.h[2], f3 = this.h[3], c2 = this.h[4], y = r3, w = i3, v = s2, S = f3, _ = c2, B = 0; B < 80; B++) {
            var I = a(n(h(r3, u(B, i3, s2, f3), t3[p[B] + e3], d(B)), m[B]), c2);
            r3 = c2, c2 = f3, f3 = n(s2, 10), s2 = i3, i3 = I, I = a(n(h(y, u(79 - B, w, v, S), t3[b[B] + e3], l(B)), g[B]), _), y = _, _ = S, S = n(v, 10), v = w, w = I;
          }
          I = o(this.h[1], s2, S), this.h[1] = o(this.h[2], f3, _), this.h[2] = o(this.h[3], c2, y), this.h[3] = o(this.h[4], r3, w), this.h[4] = o(this.h[0], i3, v), this.h[0] = I;
        }, c.prototype._digest = function(t3) {
          return "hex" === t3 ? i2.toHex32(this.h, "little") : i2.split32(this.h, "little");
        };
        var p = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13], b = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11], m = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6], g = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
      }, 41: (t2, e2, r2) => {
        "use strict";
        e2.sha1 = r2(761), e2.sha224 = r2(799), e2.sha256 = r2(344), e2.sha384 = r2(978), e2.sha512 = r2(900);
      }, 761: (t2, e2, r2) => {
        "use strict";
        var i2 = r2(436), s = r2(772), n = r2(38), a = i2.rotl32, o = i2.sum32, h = i2.sum32_5, f2 = n.ft_1, c = s.BlockHash, u = [1518500249, 1859775393, 2400959708, 3395469782];
        function d() {
          if (!(this instanceof d))
            return new d();
          c.call(this), this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.W = new Array(80);
        }
        i2.inherits(d, c), t2.exports = d, d.blockSize = 512, d.outSize = 160, d.hmacStrength = 80, d.padLength = 64, d.prototype._update = function(t3, e3) {
          for (var r3 = this.W, i3 = 0; i3 < 16; i3++)
            r3[i3] = t3[e3 + i3];
          for (; i3 < r3.length; i3++)
            r3[i3] = a(r3[i3 - 3] ^ r3[i3 - 8] ^ r3[i3 - 14] ^ r3[i3 - 16], 1);
          var s2 = this.h[0], n2 = this.h[1], c2 = this.h[2], d2 = this.h[3], l = this.h[4];
          for (i3 = 0; i3 < r3.length; i3++) {
            var p = ~~(i3 / 20), b = h(a(s2, 5), f2(p, n2, c2, d2), l, r3[i3], u[p]);
            l = d2, d2 = c2, c2 = a(n2, 30), n2 = s2, s2 = b;
          }
          this.h[0] = o(this.h[0], s2), this.h[1] = o(this.h[1], n2), this.h[2] = o(this.h[2], c2), this.h[3] = o(this.h[3], d2), this.h[4] = o(this.h[4], l);
        }, d.prototype._digest = function(t3) {
          return "hex" === t3 ? i2.toHex32(this.h, "big") : i2.split32(this.h, "big");
        };
      }, 799: (t2, e2, r2) => {
        "use strict";
        var i2 = r2(436), s = r2(344);
        function n() {
          if (!(this instanceof n))
            return new n();
          s.call(this), this.h = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428];
        }
        i2.inherits(n, s), t2.exports = n, n.blockSize = 512, n.outSize = 224, n.hmacStrength = 192, n.padLength = 64, n.prototype._digest = function(t3) {
          return "hex" === t3 ? i2.toHex32(this.h.slice(0, 7), "big") : i2.split32(this.h.slice(0, 7), "big");
        };
      }, 344: (t2, e2, r2) => {
        "use strict";
        var i2 = r2(436), s = r2(772), n = r2(38), a = r2(746), o = i2.sum32, h = i2.sum32_4, f2 = i2.sum32_5, c = n.ch32, u = n.maj32, d = n.s0_256, l = n.s1_256, p = n.g0_256, b = n.g1_256, m = s.BlockHash, g = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];
        function y() {
          if (!(this instanceof y))
            return new y();
          m.call(this), this.h = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225], this.k = g, this.W = new Array(64);
        }
        i2.inherits(y, m), t2.exports = y, y.blockSize = 512, y.outSize = 256, y.hmacStrength = 192, y.padLength = 64, y.prototype._update = function(t3, e3) {
          for (var r3 = this.W, i3 = 0; i3 < 16; i3++)
            r3[i3] = t3[e3 + i3];
          for (; i3 < r3.length; i3++)
            r3[i3] = h(b(r3[i3 - 2]), r3[i3 - 7], p(r3[i3 - 15]), r3[i3 - 16]);
          var s2 = this.h[0], n2 = this.h[1], m2 = this.h[2], g2 = this.h[3], y2 = this.h[4], w = this.h[5], v = this.h[6], S = this.h[7];
          for (a(this.k.length === r3.length), i3 = 0; i3 < r3.length; i3++) {
            var _ = f2(S, l(y2), c(y2, w, v), this.k[i3], r3[i3]), B = o(d(s2), u(s2, n2, m2));
            S = v, v = w, w = y2, y2 = o(g2, _), g2 = m2, m2 = n2, n2 = s2, s2 = o(_, B);
          }
          this.h[0] = o(this.h[0], s2), this.h[1] = o(this.h[1], n2), this.h[2] = o(this.h[2], m2), this.h[3] = o(this.h[3], g2), this.h[4] = o(this.h[4], y2), this.h[5] = o(this.h[5], w), this.h[6] = o(this.h[6], v), this.h[7] = o(this.h[7], S);
        }, y.prototype._digest = function(t3) {
          return "hex" === t3 ? i2.toHex32(this.h, "big") : i2.split32(this.h, "big");
        };
      }, 978: (t2, e2, r2) => {
        "use strict";
        var i2 = r2(436), s = r2(900);
        function n() {
          if (!(this instanceof n))
            return new n();
          s.call(this), this.h = [3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428];
        }
        i2.inherits(n, s), t2.exports = n, n.blockSize = 1024, n.outSize = 384, n.hmacStrength = 192, n.padLength = 128, n.prototype._digest = function(t3) {
          return "hex" === t3 ? i2.toHex32(this.h.slice(0, 12), "big") : i2.split32(this.h.slice(0, 12), "big");
        };
      }, 900: (t2, e2, r2) => {
        "use strict";
        var i2 = r2(436), s = r2(772), n = r2(746), a = i2.rotr64_hi, o = i2.rotr64_lo, h = i2.shr64_hi, f2 = i2.shr64_lo, c = i2.sum64, u = i2.sum64_hi, d = i2.sum64_lo, l = i2.sum64_4_hi, p = i2.sum64_4_lo, b = i2.sum64_5_hi, m = i2.sum64_5_lo, g = s.BlockHash, y = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591];
        function w() {
          if (!(this instanceof w))
            return new w();
          g.call(this), this.h = [1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209], this.k = y, this.W = new Array(160);
        }
        function v(t3, e3, r3, i3, s2) {
          var n2 = t3 & r3 ^ ~t3 & s2;
          return n2 < 0 && (n2 += 4294967296), n2;
        }
        function S(t3, e3, r3, i3, s2, n2) {
          var a2 = e3 & i3 ^ ~e3 & n2;
          return a2 < 0 && (a2 += 4294967296), a2;
        }
        function _(t3, e3, r3, i3, s2) {
          var n2 = t3 & r3 ^ t3 & s2 ^ r3 & s2;
          return n2 < 0 && (n2 += 4294967296), n2;
        }
        function B(t3, e3, r3, i3, s2, n2) {
          var a2 = e3 & i3 ^ e3 & n2 ^ i3 & n2;
          return a2 < 0 && (a2 += 4294967296), a2;
        }
        function I(t3, e3) {
          var r3 = a(t3, e3, 28) ^ a(e3, t3, 2) ^ a(e3, t3, 7);
          return r3 < 0 && (r3 += 4294967296), r3;
        }
        function O(t3, e3) {
          var r3 = o(t3, e3, 28) ^ o(e3, t3, 2) ^ o(e3, t3, 7);
          return r3 < 0 && (r3 += 4294967296), r3;
        }
        function E(t3, e3) {
          var r3 = o(t3, e3, 14) ^ o(t3, e3, 18) ^ o(e3, t3, 9);
          return r3 < 0 && (r3 += 4294967296), r3;
        }
        function P(t3, e3) {
          var r3 = a(t3, e3, 1) ^ a(t3, e3, 8) ^ h(t3, e3, 7);
          return r3 < 0 && (r3 += 4294967296), r3;
        }
        function k(t3, e3) {
          var r3 = o(t3, e3, 1) ^ o(t3, e3, 8) ^ f2(t3, e3, 7);
          return r3 < 0 && (r3 += 4294967296), r3;
        }
        function N(t3, e3) {
          var r3 = o(t3, e3, 19) ^ o(e3, t3, 29) ^ f2(t3, e3, 6);
          return r3 < 0 && (r3 += 4294967296), r3;
        }
        i2.inherits(w, g), t2.exports = w, w.blockSize = 1024, w.outSize = 512, w.hmacStrength = 192, w.padLength = 128, w.prototype._prepareBlock = function(t3, e3) {
          for (var r3 = this.W, i3 = 0; i3 < 32; i3++)
            r3[i3] = t3[e3 + i3];
          for (; i3 < r3.length; i3 += 2) {
            var s2 = (m2 = r3[i3 - 4], g2 = r3[i3 - 3], y2 = void 0, (y2 = a(m2, g2, 19) ^ a(g2, m2, 29) ^ h(m2, g2, 6)) < 0 && (y2 += 4294967296), y2), n2 = N(r3[i3 - 4], r3[i3 - 3]), o2 = r3[i3 - 14], f3 = r3[i3 - 13], c2 = P(r3[i3 - 30], r3[i3 - 29]), u2 = k(r3[i3 - 30], r3[i3 - 29]), d2 = r3[i3 - 32], b2 = r3[i3 - 31];
            r3[i3] = l(s2, n2, o2, f3, c2, u2, d2, b2), r3[i3 + 1] = p(s2, n2, o2, f3, c2, u2, d2, b2);
          }
          var m2, g2, y2;
        }, w.prototype._update = function(t3, e3) {
          this._prepareBlock(t3, e3);
          var r3, i3, s2, o2 = this.W, h2 = this.h[0], f3 = this.h[1], l2 = this.h[2], p2 = this.h[3], g2 = this.h[4], y2 = this.h[5], w2 = this.h[6], P2 = this.h[7], k2 = this.h[8], N2 = this.h[9], A = this.h[10], x = this.h[11], R = this.h[12], M = this.h[13], T = this.h[14], C = this.h[15];
          n(this.k.length === o2.length);
          for (var H = 0; H < o2.length; H += 2) {
            var L = T, K = C, F = (s2 = void 0, (s2 = a(r3 = k2, i3 = N2, 14) ^ a(r3, i3, 18) ^ a(i3, r3, 9)) < 0 && (s2 += 4294967296), s2), U = E(k2, N2), D = v(k2, 0, A, 0, R), V = S(0, N2, 0, x, 0, M), j = this.k[H], q = this.k[H + 1], z = o2[H], G = o2[H + 1], J = b(L, K, F, U, D, V, j, q, z, G), Y = m(L, K, F, U, D, V, j, q, z, G);
            L = I(h2, f3), K = O(h2, f3), F = _(h2, 0, l2, 0, g2), U = B(0, f3, 0, p2, 0, y2);
            var W = u(L, K, F, U), Q = d(L, K, F, U);
            T = R, C = M, R = A, M = x, A = k2, x = N2, k2 = u(w2, P2, J, Y), N2 = d(P2, P2, J, Y), w2 = g2, P2 = y2, g2 = l2, y2 = p2, l2 = h2, p2 = f3, h2 = u(J, Y, W, Q), f3 = d(J, Y, W, Q);
          }
          c(this.h, 0, h2, f3), c(this.h, 2, l2, p2), c(this.h, 4, g2, y2), c(this.h, 6, w2, P2), c(this.h, 8, k2, N2), c(this.h, 10, A, x), c(this.h, 12, R, M), c(this.h, 14, T, C);
        }, w.prototype._digest = function(t3) {
          return "hex" === t3 ? i2.toHex32(this.h, "big") : i2.split32(this.h, "big");
        };
      }, 38: (t2, e2, r2) => {
        "use strict";
        var i2 = r2(436).rotr32;
        function s(t3, e3, r3) {
          return t3 & e3 ^ ~t3 & r3;
        }
        function n(t3, e3, r3) {
          return t3 & e3 ^ t3 & r3 ^ e3 & r3;
        }
        function a(t3, e3, r3) {
          return t3 ^ e3 ^ r3;
        }
        e2.ft_1 = function(t3, e3, r3, i3) {
          return 0 === t3 ? s(e3, r3, i3) : 1 === t3 || 3 === t3 ? a(e3, r3, i3) : 2 === t3 ? n(e3, r3, i3) : void 0;
        }, e2.ch32 = s, e2.maj32 = n, e2.p32 = a, e2.s0_256 = function(t3) {
          return i2(t3, 2) ^ i2(t3, 13) ^ i2(t3, 22);
        }, e2.s1_256 = function(t3) {
          return i2(t3, 6) ^ i2(t3, 11) ^ i2(t3, 25);
        }, e2.g0_256 = function(t3) {
          return i2(t3, 7) ^ i2(t3, 18) ^ t3 >>> 3;
        }, e2.g1_256 = function(t3) {
          return i2(t3, 17) ^ i2(t3, 19) ^ t3 >>> 10;
        };
      }, 436: (t2, e2, r2) => {
        "use strict";
        var i2 = r2(746), s = r2(378);
        function n(t3, e3) {
          return 55296 == (64512 & t3.charCodeAt(e3)) && !(e3 < 0 || e3 + 1 >= t3.length) && 56320 == (64512 & t3.charCodeAt(e3 + 1));
        }
        function a(t3) {
          return (t3 >>> 24 | t3 >>> 8 & 65280 | t3 << 8 & 16711680 | (255 & t3) << 24) >>> 0;
        }
        function o(t3) {
          return 1 === t3.length ? "0" + t3 : t3;
        }
        function h(t3) {
          return 7 === t3.length ? "0" + t3 : 6 === t3.length ? "00" + t3 : 5 === t3.length ? "000" + t3 : 4 === t3.length ? "0000" + t3 : 3 === t3.length ? "00000" + t3 : 2 === t3.length ? "000000" + t3 : 1 === t3.length ? "0000000" + t3 : t3;
        }
        e2.inherits = s, e2.toArray = function(t3, e3) {
          if (Array.isArray(t3))
            return t3.slice();
          if (!t3)
            return [];
          var r3 = [];
          if ("string" == typeof t3)
            if (e3) {
              if ("hex" === e3)
                for ((t3 = t3.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (t3 = "0" + t3), s2 = 0; s2 < t3.length; s2 += 2)
                  r3.push(parseInt(t3[s2] + t3[s2 + 1], 16));
            } else
              for (var i3 = 0, s2 = 0; s2 < t3.length; s2++) {
                var a2 = t3.charCodeAt(s2);
                a2 < 128 ? r3[i3++] = a2 : a2 < 2048 ? (r3[i3++] = a2 >> 6 | 192, r3[i3++] = 63 & a2 | 128) : n(t3, s2) ? (a2 = 65536 + ((1023 & a2) << 10) + (1023 & t3.charCodeAt(++s2)), r3[i3++] = a2 >> 18 | 240, r3[i3++] = a2 >> 12 & 63 | 128, r3[i3++] = a2 >> 6 & 63 | 128, r3[i3++] = 63 & a2 | 128) : (r3[i3++] = a2 >> 12 | 224, r3[i3++] = a2 >> 6 & 63 | 128, r3[i3++] = 63 & a2 | 128);
              }
          else
            for (s2 = 0; s2 < t3.length; s2++)
              r3[s2] = 0 | t3[s2];
          return r3;
        }, e2.toHex = function(t3) {
          for (var e3 = "", r3 = 0; r3 < t3.length; r3++)
            e3 += o(t3[r3].toString(16));
          return e3;
        }, e2.htonl = a, e2.toHex32 = function(t3, e3) {
          for (var r3 = "", i3 = 0; i3 < t3.length; i3++) {
            var s2 = t3[i3];
            "little" === e3 && (s2 = a(s2)), r3 += h(s2.toString(16));
          }
          return r3;
        }, e2.zero2 = o, e2.zero8 = h, e2.join32 = function(t3, e3, r3, s2) {
          var n2 = r3 - e3;
          i2(n2 % 4 == 0);
          for (var a2 = new Array(n2 / 4), o2 = 0, h2 = e3; o2 < a2.length; o2++, h2 += 4) {
            var f2;
            f2 = "big" === s2 ? t3[h2] << 24 | t3[h2 + 1] << 16 | t3[h2 + 2] << 8 | t3[h2 + 3] : t3[h2 + 3] << 24 | t3[h2 + 2] << 16 | t3[h2 + 1] << 8 | t3[h2], a2[o2] = f2 >>> 0;
          }
          return a2;
        }, e2.split32 = function(t3, e3) {
          for (var r3 = new Array(4 * t3.length), i3 = 0, s2 = 0; i3 < t3.length; i3++, s2 += 4) {
            var n2 = t3[i3];
            "big" === e3 ? (r3[s2] = n2 >>> 24, r3[s2 + 1] = n2 >>> 16 & 255, r3[s2 + 2] = n2 >>> 8 & 255, r3[s2 + 3] = 255 & n2) : (r3[s2 + 3] = n2 >>> 24, r3[s2 + 2] = n2 >>> 16 & 255, r3[s2 + 1] = n2 >>> 8 & 255, r3[s2] = 255 & n2);
          }
          return r3;
        }, e2.rotr32 = function(t3, e3) {
          return t3 >>> e3 | t3 << 32 - e3;
        }, e2.rotl32 = function(t3, e3) {
          return t3 << e3 | t3 >>> 32 - e3;
        }, e2.sum32 = function(t3, e3) {
          return t3 + e3 >>> 0;
        }, e2.sum32_3 = function(t3, e3, r3) {
          return t3 + e3 + r3 >>> 0;
        }, e2.sum32_4 = function(t3, e3, r3, i3) {
          return t3 + e3 + r3 + i3 >>> 0;
        }, e2.sum32_5 = function(t3, e3, r3, i3, s2) {
          return t3 + e3 + r3 + i3 + s2 >>> 0;
        }, e2.sum64 = function(t3, e3, r3, i3) {
          var s2 = t3[e3], n2 = i3 + t3[e3 + 1] >>> 0, a2 = (n2 < i3 ? 1 : 0) + r3 + s2;
          t3[e3] = a2 >>> 0, t3[e3 + 1] = n2;
        }, e2.sum64_hi = function(t3, e3, r3, i3) {
          return (e3 + i3 >>> 0 < e3 ? 1 : 0) + t3 + r3 >>> 0;
        }, e2.sum64_lo = function(t3, e3, r3, i3) {
          return e3 + i3 >>> 0;
        }, e2.sum64_4_hi = function(t3, e3, r3, i3, s2, n2, a2, o2) {
          var h2 = 0, f2 = e3;
          return h2 += (f2 = f2 + i3 >>> 0) < e3 ? 1 : 0, h2 += (f2 = f2 + n2 >>> 0) < n2 ? 1 : 0, t3 + r3 + s2 + a2 + (h2 += (f2 = f2 + o2 >>> 0) < o2 ? 1 : 0) >>> 0;
        }, e2.sum64_4_lo = function(t3, e3, r3, i3, s2, n2, a2, o2) {
          return e3 + i3 + n2 + o2 >>> 0;
        }, e2.sum64_5_hi = function(t3, e3, r3, i3, s2, n2, a2, o2, h2, f2) {
          var c = 0, u = e3;
          return c += (u = u + i3 >>> 0) < e3 ? 1 : 0, c += (u = u + n2 >>> 0) < n2 ? 1 : 0, c += (u = u + o2 >>> 0) < o2 ? 1 : 0, t3 + r3 + s2 + a2 + h2 + (c += (u = u + f2 >>> 0) < f2 ? 1 : 0) >>> 0;
        }, e2.sum64_5_lo = function(t3, e3, r3, i3, s2, n2, a2, o2, h2, f2) {
          return e3 + i3 + n2 + o2 + f2 >>> 0;
        }, e2.rotr64_hi = function(t3, e3, r3) {
          return (e3 << 32 - r3 | t3 >>> r3) >>> 0;
        }, e2.rotr64_lo = function(t3, e3, r3) {
          return (t3 << 32 - r3 | e3 >>> r3) >>> 0;
        }, e2.shr64_hi = function(t3, e3, r3) {
          return t3 >>> r3;
        }, e2.shr64_lo = function(t3, e3, r3) {
          return (t3 << 32 - r3 | e3 >>> r3) >>> 0;
        };
      }, 156: (t2, e2, r2) => {
        "use strict";
        var i2 = r2(715), s = r2(504), n = r2(746);
        function a(t3) {
          if (!(this instanceof a))
            return new a(t3);
          this.hash = t3.hash, this.predResist = !!t3.predResist, this.outLen = this.hash.outSize, this.minEntropy = t3.minEntropy || this.hash.hmacStrength, this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;
          var e3 = s.toArray(t3.entropy, t3.entropyEnc || "hex"), r3 = s.toArray(t3.nonce, t3.nonceEnc || "hex"), i3 = s.toArray(t3.pers, t3.persEnc || "hex");
          n(e3.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._init(e3, r3, i3);
        }
        t2.exports = a, a.prototype._init = function(t3, e3, r3) {
          var i3 = t3.concat(e3).concat(r3);
          this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);
          for (var s2 = 0; s2 < this.V.length; s2++)
            this.K[s2] = 0, this.V[s2] = 1;
          this._update(i3), this._reseed = 1, this.reseedInterval = 281474976710656;
        }, a.prototype._hmac = function() {
          return new i2.hmac(this.hash, this.K);
        }, a.prototype._update = function(t3) {
          var e3 = this._hmac().update(this.V).update([0]);
          t3 && (e3 = e3.update(t3)), this.K = e3.digest(), this.V = this._hmac().update(this.V).digest(), t3 && (this.K = this._hmac().update(this.V).update([1]).update(t3).digest(), this.V = this._hmac().update(this.V).digest());
        }, a.prototype.reseed = function(t3, e3, r3, i3) {
          "string" != typeof e3 && (i3 = r3, r3 = e3, e3 = null), t3 = s.toArray(t3, e3), r3 = s.toArray(r3, i3), n(t3.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._update(t3.concat(r3 || [])), this._reseed = 1;
        }, a.prototype.generate = function(t3, e3, r3, i3) {
          if (this._reseed > this.reseedInterval)
            throw new Error("Reseed is required");
          "string" != typeof e3 && (i3 = r3, r3 = e3, e3 = null), r3 && (r3 = s.toArray(r3, i3 || "hex"), this._update(r3));
          for (var n2 = []; n2.length < t3; )
            this.V = this._hmac().update(this.V).digest(), n2 = n2.concat(this.V);
          var a2 = n2.slice(0, t3);
          return this._update(r3), this._reseed++, s.encode(a2, e3);
        };
      }, 378: (t2, e2, r2) => {
        try {
          var i2 = r2(669);
          if ("function" != typeof i2.inherits)
            throw "";
          t2.exports = i2.inherits;
        } catch (e3) {
          t2.exports = r2(717);
        }
      }, 717: (t2) => {
        "function" == typeof Object.create ? t2.exports = function(t3, e2) {
          e2 && (t3.super_ = e2, t3.prototype = Object.create(e2.prototype, { constructor: { value: t3, enumerable: false, writable: true, configurable: true } }));
        } : t2.exports = function(t3, e2) {
          if (e2) {
            t3.super_ = e2;
            var r2 = function() {
            };
            r2.prototype = e2.prototype, t3.prototype = new r2(), t3.prototype.constructor = t3;
          }
        };
      }, 484: (t2) => {
        "use strict";
        var e2 = /([0-9]|[a-f])/gim;
        t2.exports = function(t3) {
          return "string" == typeof t3 && (t3.match(e2) || []).length === t3.length;
        };
      }, 746: (t2) => {
        function e2(t3, e3) {
          if (!t3)
            throw new Error(e3 || "Assertion failed");
        }
        t2.exports = e2, e2.equal = function(t3, e3, r2) {
          if (t3 != e3)
            throw new Error(r2 || "Assertion failed: " + t3 + " != " + e3);
        };
      }, 504: (t2, e2) => {
        "use strict";
        var r2 = e2;
        function i2(t3) {
          return 1 === t3.length ? "0" + t3 : t3;
        }
        function s(t3) {
          for (var e3 = "", r3 = 0; r3 < t3.length; r3++)
            e3 += i2(t3[r3].toString(16));
          return e3;
        }
        r2.toArray = function(t3, e3) {
          if (Array.isArray(t3))
            return t3.slice();
          if (!t3)
            return [];
          var r3 = [];
          if ("string" != typeof t3) {
            for (var i3 = 0; i3 < t3.length; i3++)
              r3[i3] = 0 | t3[i3];
            return r3;
          }
          if ("hex" === e3)
            for ((t3 = t3.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (t3 = "0" + t3), i3 = 0; i3 < t3.length; i3 += 2)
              r3.push(parseInt(t3[i3] + t3[i3 + 1], 16));
          else
            for (i3 = 0; i3 < t3.length; i3++) {
              var s2 = t3.charCodeAt(i3), n = s2 >> 8, a = 255 & s2;
              n ? r3.push(n, a) : r3.push(a);
            }
          return r3;
        }, r2.zero2 = i2, r2.toHex = s, r2.encode = function(t3, e3) {
          return "hex" === e3 ? s(t3) : t3;
        };
      }, 601: (t2, e2, r2) => {
        var i2 = r2(417), s = r2(357), n = r2(368), a = r2(777);
        i2.pbkdf2Sync && -1 !== i2.pbkdf2Sync.toString().indexOf("keylen, digest") ? (e2.pbkdf2Sync = function(t3, e3, r3, o, h) {
          return s(r3, o), t3 = a(t3, n, "Password"), e3 = a(e3, n, "Salt"), h = h || "sha1", i2.pbkdf2Sync(t3, e3, r3, o, h);
        }, e2.pbkdf2 = function(t3, e3, r3, o, h, f2) {
          if (s(r3, o), t3 = a(t3, n, "Password"), e3 = a(e3, n, "Salt"), "function" == typeof h && (f2 = h, h = "sha1"), "function" != typeof f2)
            throw new Error("No callback provided to pbkdf2");
          return i2.pbkdf2(t3, e3, r3, o, h, f2);
        }) : (e2.pbkdf2Sync = r2(493), e2.pbkdf2 = r2(638));
      }, 638: (t2, e2, r2) => {
        var i2, s = r2(509).Buffer, n = r2(357), a = r2(368), o = r2(493), h = r2(777), f2 = _global.crypto && _global.crypto.subtle, c = { sha: "SHA-1", "sha-1": "SHA-1", sha1: "SHA-1", sha256: "SHA-256", "sha-256": "SHA-256", sha384: "SHA-384", "sha-384": "SHA-384", "sha-512": "SHA-512", sha512: "SHA-512" }, u = [];
        function d(t3, e3, r3, i3, n2) {
          return f2.importKey("raw", t3, { name: "PBKDF2" }, false, ["deriveBits"]).then(function(t4) {
            return f2.deriveBits({ name: "PBKDF2", salt: e3, iterations: r3, hash: { name: n2 } }, t4, i3 << 3);
          }).then(function(t4) {
            return s.from(t4);
          });
        }
        t2.exports = function(t3, e3, r3, l, p, b) {
          "function" == typeof p && (b = p, p = void 0);
          var m = c[(p = p || "sha1").toLowerCase()];
          if (!m || "function" != typeof _global.Promise)
            return import_process.default.nextTick(function() {
              var i3;
              try {
                i3 = o(t3, e3, r3, l, p);
              } catch (t4) {
                return b(t4);
              }
              b(null, i3);
            });
          if (n(r3, l), t3 = h(t3, a, "Password"), e3 = h(e3, a, "Salt"), "function" != typeof b)
            throw new Error("No callback provided to pbkdf2");
          !function(t4, e4) {
            t4.then(function(t5) {
              import_process.default.nextTick(function() {
                e4(null, t5);
              });
            }, function(t5) {
              import_process.default.nextTick(function() {
                e4(t5);
              });
            });
          }(function(t4) {
            if (_global.process && !_global.process.browser)
              return Promise.resolve(false);
            if (!f2 || !f2.importKey || !f2.deriveBits)
              return Promise.resolve(false);
            if (void 0 !== u[t4])
              return u[t4];
            var e4 = d(i2 = i2 || s.alloc(8), i2, 10, 128, t4).then(function() {
              return true;
            }).catch(function() {
              return false;
            });
            return u[t4] = e4, e4;
          }(m).then(function(i3) {
            return i3 ? d(t3, e3, r3, l, m) : o(t3, e3, r3, l, p);
          }), b);
        };
      }, 368: (t2) => {
        var e2;
        e2 = import_process.default.browser ? "utf-8" : import_process.default.version ? parseInt(import_process.default.version.split(".")[0].slice(1), 10) >= 6 ? "utf-8" : "binary" : "utf-8", t2.exports = e2;
      }, 357: (t2) => {
        var e2 = Math.pow(2, 30) - 1;
        t2.exports = function(t3, r2) {
          if ("number" != typeof t3)
            throw new TypeError("Iterations not a number");
          if (t3 < 0)
            throw new TypeError("Bad iterations");
          if ("number" != typeof r2)
            throw new TypeError("Key length not a number");
          if (r2 < 0 || r2 > e2 || r2 != r2)
            throw new TypeError("Bad key length");
        };
      }, 493: (t2, e2, r2) => {
        var i2 = { md5: 16, sha1: 20, sha224: 28, sha256: 32, sha384: 48, sha512: 64, rmd160: 20, ripemd160: 20 }, s = r2(555), n = r2(509).Buffer, a = r2(357), o = r2(368), h = r2(777);
        t2.exports = function(t3, e3, r3, f2, c) {
          a(r3, f2), t3 = h(t3, o, "Password"), e3 = h(e3, o, "Salt"), c = c || "sha1";
          var u = n.allocUnsafe(f2), d = n.allocUnsafe(e3.length + 4);
          e3.copy(d, 0, 0, e3.length);
          for (var l = 0, p = i2[c], b = Math.ceil(f2 / p), m = 1; m <= b; m++) {
            d.writeUInt32BE(m, e3.length);
            for (var g = s(c, t3).update(d).digest(), y = g, w = 1; w < r3; w++) {
              y = s(c, t3).update(y).digest();
              for (var v = 0; v < p; v++)
                g[v] ^= y[v];
            }
            g.copy(u, l), l += p;
          }
          return u;
        };
      }, 777: (t2, e2, r2) => {
        var i2 = r2(509).Buffer;
        t2.exports = function(t3, e3, r3) {
          if (i2.isBuffer(t3))
            return t3;
          if ("string" == typeof t3)
            return i2.from(t3, e3);
          if (ArrayBuffer.isView(t3))
            return i2.from(t3.buffer);
          throw new TypeError(r3 + " must be a string, a Buffer, a typed array or a DataView");
        };
      }, 353: (t2, e2, r2) => {
        t2.exports = r2(417).randomBytes;
      }, 509: (t2, e2, r2) => {
        var i2 = r2(293), s = i2.Buffer;
        function n(t3, e3) {
          for (var r3 in t3)
            e3[r3] = t3[r3];
        }
        function a(t3, e3, r3) {
          return s(t3, e3, r3);
        }
        s.from && s.alloc && s.allocUnsafe && s.allocUnsafeSlow ? t2.exports = i2 : (n(i2, e2), e2.Buffer = a), a.prototype = Object.create(s.prototype), n(s, a), a.from = function(t3, e3, r3) {
          if ("number" == typeof t3)
            throw new TypeError("Argument must not be a number");
          return s(t3, e3, r3);
        }, a.alloc = function(t3, e3, r3) {
          if ("number" != typeof t3)
            throw new TypeError("Argument must be a number");
          var i3 = s(t3);
          return void 0 !== e3 ? "string" == typeof r3 ? i3.fill(e3, r3) : i3.fill(e3) : i3.fill(0), i3;
        }, a.allocUnsafe = function(t3) {
          if ("number" != typeof t3)
            throw new TypeError("Argument must be a number");
          return s(t3);
        }, a.allocUnsafeSlow = function(t3) {
          if ("number" != typeof t3)
            throw new TypeError("Argument must be a number");
          return i2.SlowBuffer(t3);
        };
      }, 293: (t2) => {
        "use strict";
        t2.exports = require_buffer();
      }, 417: (t2) => {
        "use strict";
        t2.exports = require_crypto_browserify();
      }, 669: (t2) => {
        "use strict";
        t2.exports = require_util();
      } }, e = {};
      function r(i2) {
        var s = e[i2];
        if (void 0 !== s)
          return s.exports;
        var n = e[i2] = { id: i2, loaded: false, exports: {} };
        return t[i2].call(n.exports, n, n.exports, r), n.loaded = true, n.exports;
      }
      r.n = (t2) => {
        var e2 = t2 && t2.__esModule ? () => t2.default : () => t2;
        return r.d(e2, { a: e2 }), e2;
      }, r.d = (t2, e2) => {
        for (var i2 in e2)
          r.o(e2, i2) && !r.o(t2, i2) && Object.defineProperty(t2, i2, { enumerable: true, get: e2[i2] });
      }, r.o = (t2, e2) => Object.prototype.hasOwnProperty.call(t2, e2), r.r = (t2) => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
      }, r.nmd = (t2) => (t2.paths = [], t2.children || (t2.children = []), t2);
      var i = r(671);
      module.exports = i;
    })();
  }
});

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/dist/browser/axios.cjs
var require_axios = __commonJS({
  "node_modules/.pnpm/axios@1.2.2/node_modules/axios/dist/browser/axios.cjs"(exports, module) {
    "use strict";
    init_shim();
    function bind2(fn, thisArg) {
      return function wrap() {
        return fn.apply(thisArg, arguments);
      };
    }
    var { toString: toString3 } = Object.prototype;
    var { getPrototypeOf: getPrototypeOf2 } = Object;
    var kindOf2 = ((cache) => (thing) => {
      const str = toString3.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(/* @__PURE__ */ Object.create(null));
    var kindOfTest2 = (type) => {
      type = type.toLowerCase();
      return (thing) => kindOf2(thing) === type;
    };
    var typeOfTest2 = (type) => (thing) => typeof thing === type;
    var { isArray: isArray2 } = Array;
    var isUndefined2 = typeOfTest2("undefined");
    function isBuffer2(val) {
      return val !== null && !isUndefined2(val) && val.constructor !== null && !isUndefined2(val.constructor) && isFunction2(val.constructor.isBuffer) && val.constructor.isBuffer(val);
    }
    var isArrayBuffer2 = kindOfTest2("ArrayBuffer");
    function isArrayBufferView2(val) {
      let result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer2(val.buffer);
      }
      return result;
    }
    var isString2 = typeOfTest2("string");
    var isFunction2 = typeOfTest2("function");
    var isNumber2 = typeOfTest2("number");
    var isObject2 = (thing) => thing !== null && typeof thing === "object";
    var isBoolean2 = (thing) => thing === true || thing === false;
    var isPlainObject2 = (val) => {
      if (kindOf2(val) !== "object") {
        return false;
      }
      const prototype4 = getPrototypeOf2(val);
      return (prototype4 === null || prototype4 === Object.prototype || Object.getPrototypeOf(prototype4) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
    };
    var isDate2 = kindOfTest2("Date");
    var isFile2 = kindOfTest2("File");
    var isBlob2 = kindOfTest2("Blob");
    var isFileList2 = kindOfTest2("FileList");
    var isStream2 = (val) => isObject2(val) && isFunction2(val.pipe);
    var isFormData2 = (thing) => {
      const pattern = "[object FormData]";
      return thing && (typeof FormData === "function" && thing instanceof FormData || toString3.call(thing) === pattern || isFunction2(thing.toString) && thing.toString() === pattern);
    };
    var isURLSearchParams2 = kindOfTest2("URLSearchParams");
    var trim2 = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    function forEach2(obj, fn, { allOwnKeys = false } = {}) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      let i;
      let l;
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray2(obj)) {
        for (i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
        const len = keys.length;
        let key;
        for (i = 0; i < len; i++) {
          key = keys[i];
          fn.call(null, obj[key], key, obj);
        }
      }
    }
    function findKey2(obj, key) {
      key = key.toLowerCase();
      const keys = Object.keys(obj);
      let i = keys.length;
      let _key;
      while (i-- > 0) {
        _key = keys[i];
        if (key === _key.toLowerCase()) {
          return _key;
        }
      }
      return null;
    }
    var _global3 = (() => {
      if (typeof globalThis !== "undefined")
        return globalThis;
      return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : _global;
    })();
    var isContextDefined2 = (context) => !isUndefined2(context) && context !== _global3;
    function merge2() {
      const { caseless } = isContextDefined2(this) && this || {};
      const result = {};
      const assignValue = (val, key) => {
        const targetKey = caseless && findKey2(result, key) || key;
        if (isPlainObject2(result[targetKey]) && isPlainObject2(val)) {
          result[targetKey] = merge2(result[targetKey], val);
        } else if (isPlainObject2(val)) {
          result[targetKey] = merge2({}, val);
        } else if (isArray2(val)) {
          result[targetKey] = val.slice();
        } else {
          result[targetKey] = val;
        }
      };
      for (let i = 0, l = arguments.length; i < l; i++) {
        arguments[i] && forEach2(arguments[i], assignValue);
      }
      return result;
    }
    var extend2 = (a, b, thisArg, { allOwnKeys } = {}) => {
      forEach2(b, (val, key) => {
        if (thisArg && isFunction2(val)) {
          a[key] = bind2(val, thisArg);
        } else {
          a[key] = val;
        }
      }, { allOwnKeys });
      return a;
    };
    var stripBOM2 = (content) => {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    };
    var inherits2 = (constructor, superConstructor, props, descriptors3) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors3);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, "super", {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };
    var toFlatObject2 = (sourceObj, destObj, filter2, propFilter) => {
      let props;
      let i;
      let prop;
      const merged = {};
      destObj = destObj || {};
      if (sourceObj == null)
        return destObj;
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter2 !== false && getPrototypeOf2(sourceObj);
      } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    };
    var endsWith2 = (str, searchString, position) => {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
    var toArray2 = (thing) => {
      if (!thing)
        return null;
      if (isArray2(thing))
        return thing;
      let i = thing.length;
      if (!isNumber2(i))
        return null;
      const arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    };
    var isTypedArray2 = ((TypedArray) => {
      return (thing) => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== "undefined" && getPrototypeOf2(Uint8Array));
    var forEachEntry2 = (obj, fn) => {
      const generator = obj && obj[Symbol.iterator];
      const iterator = generator.call(obj);
      let result;
      while ((result = iterator.next()) && !result.done) {
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };
    var matchAll2 = (regExp, str) => {
      let matches;
      const arr = [];
      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }
      return arr;
    };
    var isHTMLForm2 = kindOfTest2("HTMLFormElement");
    var toCamelCase2 = (str) => {
      return str.toLowerCase().replace(
        /[_-\s]([a-z\d])(\w*)/g,
        function replacer(m, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };
    var hasOwnProperty2 = (({ hasOwnProperty: hasOwnProperty3 }) => (obj, prop) => hasOwnProperty3.call(obj, prop))(Object.prototype);
    var isRegExp2 = kindOfTest2("RegExp");
    var reduceDescriptors2 = (obj, reducer) => {
      const descriptors3 = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};
      forEach2(descriptors3, (descriptor, name) => {
        if (reducer(descriptor, name, obj) !== false) {
          reducedDescriptors[name] = descriptor;
        }
      });
      Object.defineProperties(obj, reducedDescriptors);
    };
    var freezeMethods2 = (obj) => {
      reduceDescriptors2(obj, (descriptor, name) => {
        if (isFunction2(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
          return false;
        }
        const value = obj[name];
        if (!isFunction2(value))
          return;
        descriptor.enumerable = false;
        if ("writable" in descriptor) {
          descriptor.writable = false;
          return;
        }
        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error("Can not rewrite read-only method '" + name + "'");
          };
        }
      });
    };
    var toObjectSet2 = (arrayOrString, delimiter) => {
      const obj = {};
      const define2 = (arr) => {
        arr.forEach((value) => {
          obj[value] = true;
        });
      };
      isArray2(arrayOrString) ? define2(arrayOrString) : define2(String(arrayOrString).split(delimiter));
      return obj;
    };
    var noop2 = () => {
    };
    var toFiniteNumber2 = (value, defaultValue) => {
      value = +value;
      return Number.isFinite(value) ? value : defaultValue;
    };
    var toJSONObject2 = (obj) => {
      const stack = new Array(10);
      const visit = (source, i) => {
        if (isObject2(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }
          if (!("toJSON" in source)) {
            stack[i] = source;
            const target = isArray2(source) ? [] : {};
            forEach2(source, (value, key) => {
              const reducedValue = visit(value, i + 1);
              !isUndefined2(reducedValue) && (target[key] = reducedValue);
            });
            stack[i] = void 0;
            return target;
          }
        }
        return source;
      };
      return visit(obj, 0);
    };
    var utils = {
      isArray: isArray2,
      isArrayBuffer: isArrayBuffer2,
      isBuffer: isBuffer2,
      isFormData: isFormData2,
      isArrayBufferView: isArrayBufferView2,
      isString: isString2,
      isNumber: isNumber2,
      isBoolean: isBoolean2,
      isObject: isObject2,
      isPlainObject: isPlainObject2,
      isUndefined: isUndefined2,
      isDate: isDate2,
      isFile: isFile2,
      isBlob: isBlob2,
      isRegExp: isRegExp2,
      isFunction: isFunction2,
      isStream: isStream2,
      isURLSearchParams: isURLSearchParams2,
      isTypedArray: isTypedArray2,
      isFileList: isFileList2,
      forEach: forEach2,
      merge: merge2,
      extend: extend2,
      trim: trim2,
      stripBOM: stripBOM2,
      inherits: inherits2,
      toFlatObject: toFlatObject2,
      kindOf: kindOf2,
      kindOfTest: kindOfTest2,
      endsWith: endsWith2,
      toArray: toArray2,
      forEachEntry: forEachEntry2,
      matchAll: matchAll2,
      isHTMLForm: isHTMLForm2,
      hasOwnProperty: hasOwnProperty2,
      hasOwnProp: hasOwnProperty2,
      reduceDescriptors: reduceDescriptors2,
      freezeMethods: freezeMethods2,
      toObjectSet: toObjectSet2,
      toCamelCase: toCamelCase2,
      noop: noop2,
      toFiniteNumber: toFiniteNumber2,
      findKey: findKey2,
      global: _global3,
      isContextDefined: isContextDefined2,
      toJSONObject: toJSONObject2
    };
    function AxiosError3(message, code, config, request, response) {
      Error.call(this);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack;
      }
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      response && (this.response = response);
    }
    utils.inherits(AxiosError3, Error, {
      toJSON: function toJSON2() {
        return {
          message: this.message,
          name: this.name,
          description: this.description,
          number: this.number,
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          config: utils.toJSONObject(this.config),
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });
    var prototype$1 = AxiosError3.prototype;
    var descriptors2 = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED",
      "ERR_NOT_SUPPORT",
      "ERR_INVALID_URL"
    ].forEach((code) => {
      descriptors2[code] = { value: code };
    });
    Object.defineProperties(AxiosError3, descriptors2);
    Object.defineProperty(prototype$1, "isAxiosError", { value: true });
    AxiosError3.from = (error, code, config, request, response, customProps) => {
      const axiosError = Object.create(prototype$1);
      utils.toFlatObject(error, axiosError, function filter2(obj) {
        return obj !== Error.prototype;
      }, (prop) => {
        return prop !== "isAxiosError";
      });
      AxiosError3.call(axiosError, error.message, code, config, request, response);
      axiosError.cause = error;
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    var browser = typeof self == "object" ? self.FormData : window.FormData;
    var FormData$2 = browser;
    function isVisitable2(thing) {
      return utils.isPlainObject(thing) || utils.isArray(thing);
    }
    function removeBrackets2(key) {
      return utils.endsWith(key, "[]") ? key.slice(0, -2) : key;
    }
    function renderKey2(path, key, dots) {
      if (!path)
        return key;
      return path.concat(key).map(function each(token, i) {
        token = removeBrackets2(token);
        return !dots && i ? "[" + token + "]" : token;
      }).join(dots ? "." : "");
    }
    function isFlatArray2(arr) {
      return utils.isArray(arr) && !arr.some(isVisitable2);
    }
    var predicates2 = utils.toFlatObject(utils, {}, null, function filter2(prop) {
      return /^is[A-Z]/.test(prop);
    });
    function isSpecCompliant2(thing) {
      return thing && utils.isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator];
    }
    function toFormData3(obj, formData, options) {
      if (!utils.isObject(obj)) {
        throw new TypeError("target must be an object");
      }
      formData = formData || new (FormData$2 || FormData)();
      options = utils.toFlatObject(options, {
        metaTokens: true,
        dots: false,
        indexes: false
      }, false, function defined(option, source) {
        return !utils.isUndefined(source[option]);
      });
      const metaTokens = options.metaTokens;
      const visitor = options.visitor || defaultVisitor;
      const dots = options.dots;
      const indexes = options.indexes;
      const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
      const useBlob = _Blob && isSpecCompliant2(formData);
      if (!utils.isFunction(visitor)) {
        throw new TypeError("visitor must be a function");
      }
      function convertValue(value) {
        if (value === null)
          return "";
        if (utils.isDate(value)) {
          return value.toISOString();
        }
        if (!useBlob && utils.isBlob(value)) {
          throw new AxiosError3("Blob is not supported. Use a Buffer instead.");
        }
        if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
          return useBlob && typeof Blob === "function" ? new Blob([value]) : import_buffer.Buffer.from(value);
        }
        return value;
      }
      function defaultVisitor(value, key, path) {
        let arr = value;
        if (value && !path && typeof value === "object") {
          if (utils.endsWith(key, "{}")) {
            key = metaTokens ? key : key.slice(0, -2);
            value = JSON.stringify(value);
          } else if (utils.isArray(value) && isFlatArray2(value) || (utils.isFileList(value) || utils.endsWith(key, "[]") && (arr = utils.toArray(value)))) {
            key = removeBrackets2(key);
            arr.forEach(function each(el, index) {
              !(utils.isUndefined(el) || el === null) && formData.append(
                indexes === true ? renderKey2([key], index, dots) : indexes === null ? key : key + "[]",
                convertValue(el)
              );
            });
            return false;
          }
        }
        if (isVisitable2(value)) {
          return true;
        }
        formData.append(renderKey2(path, key, dots), convertValue(value));
        return false;
      }
      const stack = [];
      const exposedHelpers = Object.assign(predicates2, {
        defaultVisitor,
        convertValue,
        isVisitable: isVisitable2
      });
      function build(value, path) {
        if (utils.isUndefined(value))
          return;
        if (stack.indexOf(value) !== -1) {
          throw Error("Circular reference detected in " + path.join("."));
        }
        stack.push(value);
        utils.forEach(value, function each(el, key) {
          const result = !(utils.isUndefined(el) || el === null) && visitor.call(
            formData,
            el,
            utils.isString(key) ? key.trim() : key,
            path,
            exposedHelpers
          );
          if (result === true) {
            build(el, path ? path.concat(key) : [key]);
          }
        });
        stack.pop();
      }
      if (!utils.isObject(obj)) {
        throw new TypeError("data must be an object");
      }
      build(obj);
      return formData;
    }
    function encode$1(str) {
      const charMap = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+",
        "%00": "\0"
      };
      return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
        return charMap[match];
      });
    }
    function AxiosURLSearchParams2(params, options) {
      this._pairs = [];
      params && toFormData3(params, this, options);
    }
    var prototype3 = AxiosURLSearchParams2.prototype;
    prototype3.append = function append2(name, value) {
      this._pairs.push([name, value]);
    };
    prototype3.toString = function toString4(encoder) {
      const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode$1);
      } : encode$1;
      return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + "=" + _encode(pair[1]);
      }, "").join("&");
    };
    function encode3(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    function buildURL2(url, params, options) {
      if (!params) {
        return url;
      }
      const _encode = options && options.encode || encode3;
      const serializeFn = options && options.serialize;
      let serializedParams;
      if (serializeFn) {
        serializedParams = serializeFn(params, options);
      } else {
        serializedParams = utils.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams2(params, options).toString(_encode);
      }
      if (serializedParams) {
        const hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    }
    var InterceptorManager2 = class {
      constructor() {
        this.handlers = [];
      }
      use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }
      eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      }
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }
      forEach(fn) {
        utils.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      }
    };
    var InterceptorManager$1 = InterceptorManager2;
    var transitionalDefaults = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
    var URLSearchParams$1 = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams2;
    var FormData$1 = FormData;
    var isStandardBrowserEnv2 = (() => {
      let product;
      if (typeof navigator !== "undefined" && ((product = navigator.product) === "ReactNative" || product === "NativeScript" || product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    })();
    var isStandardBrowserWebWorkerEnv2 = (() => {
      return typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
    })();
    var platform = {
      isBrowser: true,
      classes: {
        URLSearchParams: URLSearchParams$1,
        FormData: FormData$1,
        Blob
      },
      isStandardBrowserEnv: isStandardBrowserEnv2,
      isStandardBrowserWebWorkerEnv: isStandardBrowserWebWorkerEnv2,
      protocols: ["http", "https", "file", "blob", "url", "data"]
    };
    function toURLEncodedForm2(data, options) {
      return toFormData3(data, new platform.classes.URLSearchParams(), Object.assign({
        visitor: function(value, key, path, helpers) {
          if (platform.isNode && utils.isBuffer(value)) {
            this.append(key, value.toString("base64"));
            return false;
          }
          return helpers.defaultVisitor.apply(this, arguments);
        }
      }, options));
    }
    function parsePropPath2(name) {
      return utils.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
        return match[0] === "[]" ? "" : match[1] || match[0];
      });
    }
    function arrayToObject2(arr) {
      const obj = {};
      const keys = Object.keys(arr);
      let i;
      const len = keys.length;
      let key;
      for (i = 0; i < len; i++) {
        key = keys[i];
        obj[key] = arr[key];
      }
      return obj;
    }
    function formDataToJSON2(formData) {
      function buildPath(path, value, target, index) {
        let name = path[index++];
        const isNumericKey = Number.isFinite(+name);
        const isLast = index >= path.length;
        name = !name && utils.isArray(target) ? target.length : name;
        if (isLast) {
          if (utils.hasOwnProp(target, name)) {
            target[name] = [target[name], value];
          } else {
            target[name] = value;
          }
          return !isNumericKey;
        }
        if (!target[name] || !utils.isObject(target[name])) {
          target[name] = [];
        }
        const result = buildPath(path, value, target[name], index);
        if (result && utils.isArray(target[name])) {
          target[name] = arrayToObject2(target[name]);
        }
        return !isNumericKey;
      }
      if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {
        const obj = {};
        utils.forEachEntry(formData, (name, value) => {
          buildPath(parsePropPath2(name), value, obj, 0);
        });
        return obj;
      }
      return null;
    }
    var DEFAULT_CONTENT_TYPE2 = {
      "Content-Type": void 0
    };
    function stringifySafely2(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults2 = {
      transitional: transitionalDefaults,
      adapter: ["xhr", "http"],
      transformRequest: [function transformRequest2(data, headers) {
        const contentType = headers.getContentType() || "";
        const hasJSONContentType = contentType.indexOf("application/json") > -1;
        const isObjectPayload = utils.isObject(data);
        if (isObjectPayload && utils.isHTMLForm(data)) {
          data = new FormData(data);
        }
        const isFormData3 = utils.isFormData(data);
        if (isFormData3) {
          if (!hasJSONContentType) {
            return data;
          }
          return hasJSONContentType ? JSON.stringify(formDataToJSON2(data)) : data;
        }
        if (utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
          return data.toString();
        }
        let isFileList3;
        if (isObjectPayload) {
          if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
            return toURLEncodedForm2(data, this.formSerializer).toString();
          }
          if ((isFileList3 = utils.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
            const _FormData = this.env && this.env.FormData;
            return toFormData3(
              isFileList3 ? { "files[]": data } : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }
        if (isObjectPayload || hasJSONContentType) {
          headers.setContentType("application/json", false);
          return stringifySafely2(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse2(data) {
        const transitional2 = this.transitional || defaults2.transitional;
        const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
        const JSONRequested = this.responseType === "json";
        if (data && utils.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
          const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError3.from(e, AxiosError3.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: platform.classes.FormData,
        Blob: platform.classes.Blob
      },
      validateStatus: function validateStatus2(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData3(method) {
      defaults2.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData3(method) {
      defaults2.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE2);
    });
    var defaults$1 = defaults2;
    var ignoreDuplicateOf2 = utils.toObjectSet([
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ]);
    var parseHeaders = (rawHeaders) => {
      const parsed = {};
      let key;
      let val;
      let i;
      rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
        i = line.indexOf(":");
        key = line.substring(0, i).trim().toLowerCase();
        val = line.substring(i + 1).trim();
        if (!key || parsed[key] && ignoreDuplicateOf2[key]) {
          return;
        }
        if (key === "set-cookie") {
          if (parsed[key]) {
            parsed[key].push(val);
          } else {
            parsed[key] = [val];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
      });
      return parsed;
    };
    var $internals2 = Symbol("internals");
    function normalizeHeader2(header) {
      return header && String(header).trim().toLowerCase();
    }
    function normalizeValue2(value) {
      if (value === false || value == null) {
        return value;
      }
      return utils.isArray(value) ? value.map(normalizeValue2) : String(value);
    }
    function parseTokens2(str) {
      const tokens = /* @__PURE__ */ Object.create(null);
      const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
      let match;
      while (match = tokensRE.exec(str)) {
        tokens[match[1]] = match[2];
      }
      return tokens;
    }
    function isValidHeaderName2(str) {
      return /^[-_a-zA-Z]+$/.test(str.trim());
    }
    function matchHeaderValue2(context, value, header, filter2) {
      if (utils.isFunction(filter2)) {
        return filter2.call(this, value, header);
      }
      if (!utils.isString(value))
        return;
      if (utils.isString(filter2)) {
        return value.indexOf(filter2) !== -1;
      }
      if (utils.isRegExp(filter2)) {
        return filter2.test(value);
      }
    }
    function formatHeader2(header) {
      return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
        return char.toUpperCase() + str;
      });
    }
    function buildAccessors2(obj, header) {
      const accessorName = utils.toCamelCase(" " + header);
      ["get", "set", "has"].forEach((methodName) => {
        Object.defineProperty(obj, methodName + accessorName, {
          value: function(arg1, arg2, arg3) {
            return this[methodName].call(this, header, arg1, arg2, arg3);
          },
          configurable: true
        });
      });
    }
    var AxiosHeaders3 = class {
      constructor(headers) {
        headers && this.set(headers);
      }
      set(header, valueOrRewrite, rewrite) {
        const self2 = this;
        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader2(_header);
          if (!lHeader) {
            throw new Error("header name must be a non-empty string");
          }
          const key = utils.findKey(self2, lHeader);
          if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
            self2[key || _header] = normalizeValue2(_value);
          }
        }
        const setHeaders = (headers, _rewrite) => utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
        if (utils.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders(header, valueOrRewrite);
        } else if (utils.isString(header) && (header = header.trim()) && !isValidHeaderName2(header)) {
          setHeaders(parseHeaders(header), valueOrRewrite);
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }
        return this;
      }
      get(header, parser) {
        header = normalizeHeader2(header);
        if (header) {
          const key = utils.findKey(this, header);
          if (key) {
            const value = this[key];
            if (!parser) {
              return value;
            }
            if (parser === true) {
              return parseTokens2(value);
            }
            if (utils.isFunction(parser)) {
              return parser.call(this, value, key);
            }
            if (utils.isRegExp(parser)) {
              return parser.exec(value);
            }
            throw new TypeError("parser must be boolean|regexp|function");
          }
        }
      }
      has(header, matcher) {
        header = normalizeHeader2(header);
        if (header) {
          const key = utils.findKey(this, header);
          return !!(key && (!matcher || matchHeaderValue2(this, this[key], key, matcher)));
        }
        return false;
      }
      delete(header, matcher) {
        const self2 = this;
        let deleted = false;
        function deleteHeader(_header) {
          _header = normalizeHeader2(_header);
          if (_header) {
            const key = utils.findKey(self2, _header);
            if (key && (!matcher || matchHeaderValue2(self2, self2[key], key, matcher))) {
              delete self2[key];
              deleted = true;
            }
          }
        }
        if (utils.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }
        return deleted;
      }
      clear() {
        return Object.keys(this).forEach(this.delete.bind(this));
      }
      normalize(format) {
        const self2 = this;
        const headers = {};
        utils.forEach(this, (value, header) => {
          const key = utils.findKey(headers, header);
          if (key) {
            self2[key] = normalizeValue2(value);
            delete self2[header];
            return;
          }
          const normalized = format ? formatHeader2(header) : String(header).trim();
          if (normalized !== header) {
            delete self2[header];
          }
          self2[normalized] = normalizeValue2(value);
          headers[normalized] = true;
        });
        return this;
      }
      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }
      toJSON(asStrings) {
        const obj = /* @__PURE__ */ Object.create(null);
        utils.forEach(this, (value, header) => {
          value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(", ") : value);
        });
        return obj;
      }
      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }
      toString() {
        return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
      }
      get [Symbol.toStringTag]() {
        return "AxiosHeaders";
      }
      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }
      static concat(first, ...targets) {
        const computed = new this(first);
        targets.forEach((target) => computed.set(target));
        return computed;
      }
      static accessor(header) {
        const internals = this[$internals2] = this[$internals2] = {
          accessors: {}
        };
        const accessors = internals.accessors;
        const prototype4 = this.prototype;
        function defineAccessor(_header) {
          const lHeader = normalizeHeader2(_header);
          if (!accessors[lHeader]) {
            buildAccessors2(prototype4, _header);
            accessors[lHeader] = true;
          }
        }
        utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
      }
    };
    AxiosHeaders3.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent"]);
    utils.freezeMethods(AxiosHeaders3.prototype);
    utils.freezeMethods(AxiosHeaders3);
    var AxiosHeaders$1 = AxiosHeaders3;
    function transformData2(fns, response) {
      const config = this || defaults$1;
      const context = response || config;
      const headers = AxiosHeaders$1.from(context.headers);
      let data = context.data;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
      });
      headers.normalize();
      return data;
    }
    function isCancel3(value) {
      return !!(value && value.__CANCEL__);
    }
    function CanceledError3(message, config, request) {
      AxiosError3.call(this, message == null ? "canceled" : message, AxiosError3.ERR_CANCELED, config, request);
      this.name = "CanceledError";
    }
    utils.inherits(CanceledError3, AxiosError3, {
      __CANCEL__: true
    });
    var httpAdapter = null;
    function settle2(resolve, reject, response) {
      const validateStatus2 = response.config.validateStatus;
      if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError3(
          "Request failed with status code " + response.status,
          [AxiosError3.ERR_BAD_REQUEST, AxiosError3.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    }
    var cookies = platform.isStandardBrowserEnv ? function standardBrowserEnv3() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          const cookie = [];
          cookie.push(name + "=" + encodeURIComponent(value));
          if (utils.isNumber(expires)) {
            cookie.push("expires=" + new Date(expires).toGMTString());
          }
          if (utils.isString(path)) {
            cookie.push("path=" + path);
          }
          if (utils.isString(domain)) {
            cookie.push("domain=" + domain);
          }
          if (secure === true) {
            cookie.push("secure");
          }
          document.cookie = cookie.join("; ");
        },
        read: function read(name) {
          const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      };
    }() : function nonStandardBrowserEnv3() {
      return {
        write: function write() {
        },
        read: function read() {
          return null;
        },
        remove: function remove() {
        }
      };
    }();
    function isAbsoluteURL2(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    }
    function combineURLs2(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    }
    function buildFullPath2(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL2(requestedURL)) {
        return combineURLs2(baseURL, requestedURL);
      }
      return requestedURL;
    }
    var isURLSameOrigin = platform.isStandardBrowserEnv ? function standardBrowserEnv3() {
      const msie = /(msie|trident)/i.test(navigator.userAgent);
      const urlParsingNode = document.createElement("a");
      let originURL;
      function resolveURL(url) {
        let href = url;
        if (msie) {
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin2(requestURL) {
        const parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }() : function nonStandardBrowserEnv3() {
      return function isURLSameOrigin2() {
        return true;
      };
    }();
    function parseProtocol2(url) {
      const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || "";
    }
    function speedometer2(samplesCount, min) {
      samplesCount = samplesCount || 10;
      const bytes = new Array(samplesCount);
      const timestamps = new Array(samplesCount);
      let head = 0;
      let tail = 0;
      let firstSampleTS;
      min = min !== void 0 ? min : 1e3;
      return function push(chunkLength) {
        const now = Date.now();
        const startedAt = timestamps[tail];
        if (!firstSampleTS) {
          firstSampleTS = now;
        }
        bytes[head] = chunkLength;
        timestamps[head] = now;
        let i = tail;
        let bytesCount = 0;
        while (i !== head) {
          bytesCount += bytes[i++];
          i = i % samplesCount;
        }
        head = (head + 1) % samplesCount;
        if (head === tail) {
          tail = (tail + 1) % samplesCount;
        }
        if (now - firstSampleTS < min) {
          return;
        }
        const passed = startedAt && now - startedAt;
        return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
      };
    }
    function progressEventReducer2(listener, isDownloadStream) {
      let bytesNotified = 0;
      const _speedometer = speedometer2(50, 250);
      return (e) => {
        const loaded = e.loaded;
        const total = e.lengthComputable ? e.total : void 0;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded <= total;
        bytesNotified = loaded;
        const data = {
          loaded,
          total,
          progress: total ? loaded / total : void 0,
          bytes: progressBytes,
          rate: rate ? rate : void 0,
          estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
          event: e
        };
        data[isDownloadStream ? "download" : "upload"] = true;
        listener(data);
      };
    }
    var isXHRAdapterSupported2 = typeof XMLHttpRequest !== "undefined";
    var xhrAdapter = isXHRAdapterSupported2 && function(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        let requestData = config.data;
        const requestHeaders = AxiosHeaders$1.from(config.headers).normalize();
        const responseType = config.responseType;
        let onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData) && (platform.isStandardBrowserEnv || platform.isStandardBrowserWebWorkerEnv)) {
          requestHeaders.setContentType(false);
        }
        let request = new XMLHttpRequest();
        if (config.auth) {
          const username = config.auth.username || "";
          const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.set("Authorization", "Basic " + btoa(username + ":" + password));
        }
        const fullPath = buildFullPath2(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL2(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          const responseHeaders = AxiosHeaders$1.from(
            "getAllResponseHeaders" in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle2(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError3("Request aborted", AxiosError3.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError3("Network Error", AxiosError3.ERR_NETWORK, config, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          const transitional2 = config.transitional || transitionalDefaults;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(new AxiosError3(
            timeoutErrorMessage,
            transitional2.clarifyTimeoutError ? AxiosError3.ETIMEDOUT : AxiosError3.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        if (platform.isStandardBrowserEnv) {
          const xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName && cookies.read(config.xsrfCookieName);
          if (xsrfValue) {
            requestHeaders.set(config.xsrfHeaderName, xsrfValue);
          }
        }
        requestData === void 0 && requestHeaders.setContentType(null);
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", progressEventReducer2(config.onDownloadProgress, true));
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", progressEventReducer2(config.onUploadProgress));
        }
        if (config.cancelToken || config.signal) {
          onCanceled = (cancel) => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError3(null, config, request) : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        const protocol = parseProtocol2(fullPath);
        if (protocol && platform.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError3("Unsupported protocol " + protocol + ":", AxiosError3.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData || null);
      });
    };
    var knownAdapters2 = {
      http: httpAdapter,
      xhr: xhrAdapter
    };
    utils.forEach(knownAdapters2, (fn, value) => {
      if (fn) {
        try {
          Object.defineProperty(fn, "name", { value });
        } catch (e) {
        }
        Object.defineProperty(fn, "adapterName", { value });
      }
    });
    var adapters = {
      getAdapter: (adapters2) => {
        adapters2 = utils.isArray(adapters2) ? adapters2 : [adapters2];
        const { length } = adapters2;
        let nameOrAdapter;
        let adapter;
        for (let i = 0; i < length; i++) {
          nameOrAdapter = adapters2[i];
          if (adapter = utils.isString(nameOrAdapter) ? knownAdapters2[nameOrAdapter.toLowerCase()] : nameOrAdapter) {
            break;
          }
        }
        if (!adapter) {
          if (adapter === false) {
            throw new AxiosError3(
              `Adapter ${nameOrAdapter} is not supported by the environment`,
              "ERR_NOT_SUPPORT"
            );
          }
          throw new Error(
            utils.hasOwnProp(knownAdapters2, nameOrAdapter) ? `Adapter '${nameOrAdapter}' is not available in the build` : `Unknown adapter '${nameOrAdapter}'`
          );
        }
        if (!utils.isFunction(adapter)) {
          throw new TypeError("adapter is not a function");
        }
        return adapter;
      },
      adapters: knownAdapters2
    };
    function throwIfCancellationRequested2(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new CanceledError3(null, config);
      }
    }
    function dispatchRequest2(config) {
      throwIfCancellationRequested2(config);
      config.headers = AxiosHeaders$1.from(config.headers);
      config.data = transformData2.call(
        config,
        config.transformRequest
      );
      if (["post", "put", "patch"].indexOf(config.method) !== -1) {
        config.headers.setContentType("application/x-www-form-urlencoded", false);
      }
      const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested2(config);
        response.data = transformData2.call(
          config,
          config.transformResponse,
          response
        );
        response.headers = AxiosHeaders$1.from(response.headers);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel3(reason)) {
          throwIfCancellationRequested2(config);
          if (reason && reason.response) {
            reason.response.data = transformData2.call(
              config,
              config.transformResponse,
              reason.response
            );
            reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
          }
        }
        return Promise.reject(reason);
      });
    }
    var headersToObject2 = (thing) => thing instanceof AxiosHeaders$1 ? thing.toJSON() : thing;
    function mergeConfig3(config1, config2) {
      config2 = config2 || {};
      const config = {};
      function getMergedValue(target, source, caseless) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge.call({ caseless }, target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(a, b, caseless) {
        if (!utils.isUndefined(b)) {
          return getMergedValue(a, b, caseless);
        } else if (!utils.isUndefined(a)) {
          return getMergedValue(void 0, a, caseless);
        }
      }
      function valueFromConfig2(a, b) {
        if (!utils.isUndefined(b)) {
          return getMergedValue(void 0, b);
        }
      }
      function defaultToConfig2(a, b) {
        if (!utils.isUndefined(b)) {
          return getMergedValue(void 0, b);
        } else if (!utils.isUndefined(a)) {
          return getMergedValue(void 0, a);
        }
      }
      function mergeDirectKeys(a, b, prop) {
        if (prop in config2) {
          return getMergedValue(a, b);
        } else if (prop in config1) {
          return getMergedValue(void 0, a);
        }
      }
      const mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
        headers: (a, b) => mergeDeepProperties(headersToObject2(a), headersToObject2(b), true)
      };
      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        const merge3 = mergeMap[prop] || mergeDeepProperties;
        const configValue = merge3(config1[prop], config2[prop], prop);
        utils.isUndefined(configValue) && merge3 !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    }
    var VERSION3 = "1.2.2";
    var validators$1 = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
      validators$1[type] = function validator2(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings2 = {};
    validators$1.transitional = function transitional2(validator2, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION3 + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return (value, opt, opts) => {
        if (validator2 === false) {
          throw new AxiosError3(
            formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
            AxiosError3.ERR_DEPRECATED
          );
        }
        if (version && !deprecatedWarnings2[opt]) {
          deprecatedWarnings2[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator2 ? validator2(value, opt, opts) : true;
      };
    };
    function assertOptions2(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new AxiosError3("options must be an object", AxiosError3.ERR_BAD_OPTION_VALUE);
      }
      const keys = Object.keys(options);
      let i = keys.length;
      while (i-- > 0) {
        const opt = keys[i];
        const validator2 = schema[opt];
        if (validator2) {
          const value = options[opt];
          const result = value === void 0 || validator2(value, opt, options);
          if (result !== true) {
            throw new AxiosError3("option " + opt + " must be " + result, AxiosError3.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError3("Unknown option " + opt, AxiosError3.ERR_BAD_OPTION);
        }
      }
    }
    var validator = {
      assertOptions: assertOptions2,
      validators: validators$1
    };
    var validators3 = validator.validators;
    var Axios3 = class {
      constructor(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager$1(),
          response: new InterceptorManager$1()
        };
      }
      request(configOrUrl, config) {
        if (typeof configOrUrl === "string") {
          config = config || {};
          config.url = configOrUrl;
        } else {
          config = configOrUrl || {};
        }
        config = mergeConfig3(this.defaults, config);
        const { transitional: transitional2, paramsSerializer, headers } = config;
        if (transitional2 !== void 0) {
          validator.assertOptions(transitional2, {
            silentJSONParsing: validators3.transitional(validators3.boolean),
            forcedJSONParsing: validators3.transitional(validators3.boolean),
            clarifyTimeoutError: validators3.transitional(validators3.boolean)
          }, false);
        }
        if (paramsSerializer !== void 0) {
          validator.assertOptions(paramsSerializer, {
            encode: validators3.function,
            serialize: validators3.function
          }, true);
        }
        config.method = (config.method || this.defaults.method || "get").toLowerCase();
        let contextHeaders;
        contextHeaders = headers && utils.merge(
          headers.common,
          headers[config.method]
        );
        contextHeaders && utils.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          (method) => {
            delete headers[method];
          }
        );
        config.headers = AxiosHeaders$1.concat(contextHeaders, headers);
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i = 0;
        let len;
        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest2.bind(this), void 0];
          chain.unshift.apply(chain, requestInterceptorChain);
          chain.push.apply(chain, responseInterceptorChain);
          len = chain.length;
          promise = Promise.resolve(config);
          while (i < len) {
            promise = promise.then(chain[i++], chain[i++]);
          }
          return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config;
        i = 0;
        while (i < len) {
          const onFulfilled = requestInterceptorChain[i++];
          const onRejected = requestInterceptorChain[i++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected.call(this, error);
            break;
          }
        }
        try {
          promise = dispatchRequest2.call(this, newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        i = 0;
        len = responseInterceptorChain.length;
        while (i < len) {
          promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        }
        return promise;
      }
      getUri(config) {
        config = mergeConfig3(this.defaults, config);
        const fullPath = buildFullPath2(config.baseURL, config.url);
        return buildURL2(fullPath, config.params, config.paramsSerializer);
      }
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData3(method) {
      Axios3.prototype[method] = function(url, config) {
        return this.request(mergeConfig3(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData3(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig3(config || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url,
            data
          }));
        };
      }
      Axios3.prototype[method] = generateHTTPMethod();
      Axios3.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    var Axios$1 = Axios3;
    var CancelToken3 = class {
      constructor(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });
        const token = this;
        this.promise.then((cancel) => {
          if (!token._listeners)
            return;
          let i = token._listeners.length;
          while (i-- > 0) {
            token._listeners[i](cancel);
          }
          token._listeners = null;
        });
        this.promise.then = (onfulfilled) => {
          let _resolve;
          const promise = new Promise((resolve) => {
            token.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message, config, request) {
          if (token.reason) {
            return;
          }
          token.reason = new CanceledError3(message, config, request);
          resolvePromise(token.reason);
        });
      }
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }
      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }
      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index = this._listeners.indexOf(listener);
        if (index !== -1) {
          this._listeners.splice(index, 1);
        }
      }
      static source() {
        let cancel;
        const token = new CancelToken3(function executor(c) {
          cancel = c;
        });
        return {
          token,
          cancel
        };
      }
    };
    var CancelToken$1 = CancelToken3;
    function spread3(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    }
    function isAxiosError3(payload) {
      return utils.isObject(payload) && payload.isAxiosError === true;
    }
    var HttpStatusCode3 = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511
    };
    Object.entries(HttpStatusCode3).forEach(([key, value]) => {
      HttpStatusCode3[value] = key;
    });
    var HttpStatusCode$1 = HttpStatusCode3;
    function createInstance2(defaultConfig) {
      const context = new Axios$1(defaultConfig);
      const instance = bind2(Axios$1.prototype.request, context);
      utils.extend(instance, Axios$1.prototype, context, { allOwnKeys: true });
      utils.extend(instance, context, null, { allOwnKeys: true });
      instance.create = function create(instanceConfig) {
        return createInstance2(mergeConfig3(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios3 = createInstance2(defaults$1);
    axios3.Axios = Axios$1;
    axios3.CanceledError = CanceledError3;
    axios3.CancelToken = CancelToken$1;
    axios3.isCancel = isCancel3;
    axios3.VERSION = VERSION3;
    axios3.toFormData = toFormData3;
    axios3.AxiosError = AxiosError3;
    axios3.Cancel = axios3.CanceledError;
    axios3.all = function all3(promises) {
      return Promise.all(promises);
    };
    axios3.spread = spread3;
    axios3.isAxiosError = isAxiosError3;
    axios3.mergeConfig = mergeConfig3;
    axios3.AxiosHeaders = AxiosHeaders$1;
    axios3.formToJSON = (thing) => formDataToJSON2(utils.isHTMLForm(thing) ? new FormData(thing) : thing);
    axios3.HttpStatusCode = HttpStatusCode$1;
    axios3.default = axios3;
    module.exports = axios3;
  }
});

// node_modules/.pnpm/form-data@4.0.0/node_modules/form-data/lib/browser.js
var require_browser13 = __commonJS({
  "node_modules/.pnpm/form-data@4.0.0/node_modules/form-data/lib/browser.js"(exports, module) {
    init_shim();
    module.exports = typeof self == "object" ? self.FormData : window.FormData;
  }
});

// node_modules/.pnpm/@runonbitcoin+nimble@1.0.14/node_modules/@runonbitcoin/nimble/dist/nimble.browser.min.js
var require_nimble_browser_min = __commonJS({
  "node_modules/.pnpm/@runonbitcoin+nimble@1.0.14/node_modules/@runonbitcoin/nimble/dist/nimble.browser.min.js"(exports, module) {
    init_shim();
    !function(A, t) {
      "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == typeof exports ? exports.nimble = t() : A.nimble = t();
    }(window, function() {
      return function(A) {
        var t = {};
        function e(g) {
          if (t[g])
            return t[g].exports;
          var n = t[g] = { i: g, l: false, exports: {} };
          return A[g].call(n.exports, n, n.exports, e), n.l = true, n.exports;
        }
        return e.m = A, e.c = t, e.d = function(A2, t2, g) {
          e.o(A2, t2) || Object.defineProperty(A2, t2, { enumerable: true, get: g });
        }, e.r = function(A2) {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(A2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(A2, "__esModule", { value: true });
        }, e.t = function(A2, t2) {
          if (1 & t2 && (A2 = e(A2)), 8 & t2)
            return A2;
          if (4 & t2 && "object" == typeof A2 && A2 && A2.__esModule)
            return A2;
          var g = /* @__PURE__ */ Object.create(null);
          if (e.r(g), Object.defineProperty(g, "default", { enumerable: true, value: A2 }), 2 & t2 && "string" != typeof A2)
            for (var n in A2)
              e.d(g, n, function(t3) {
                return A2[t3];
              }.bind(null, n));
          return g;
        }, e.n = function(A2) {
          var t2 = A2 && A2.__esModule ? function() {
            return A2.default;
          } : function() {
            return A2;
          };
          return e.d(t2, "a", t2), t2;
        }, e.o = function(A2, t2) {
          return Object.prototype.hasOwnProperty.call(A2, t2);
        }, e.p = "", e(e.s = 7);
      }([function(A, t, e) {
        let g = null;
        {
          const A2 = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
          g = function(t2) {
            const e2 = t2.length, g2 = new Array(e2);
            for (let n = 0; n < e2; ++n)
              g2[n] = A2[t2[n]];
            return g2.join("");
          };
        }
        A.exports = g;
      }, function(A, t, e) {
        const g = e(24);
        A.exports = function(A2) {
          if ("string" != typeof A2)
            throw new Error("not a string");
          if (A2.length % 2 == 1 && (A2 = "0" + A2), !g(A2))
            throw new Error("bad hex char");
          {
            const t2 = A2.length / 2, e2 = new Uint8Array(t2), g2 = (A3) => A3 != A3;
            for (let n = 0; n < t2; ++n) {
              const t3 = parseInt(A2.substr(2 * n, 2), 16);
              if (g2(t3))
                throw new Error("bad hex char");
              e2[n] = t3;
            }
            return e2;
          }
        };
      }, function(A, t) {
        A.exports = class {
          constructor() {
            this.buffers = [], this.length = 0;
          }
          write(A2) {
            return this.buffers.push(A2), this.length += A2.length, this;
          }
          toBuffer() {
            if (1 === this.buffers.length)
              return this.buffers[0];
            const A2 = new Uint8Array(this.length);
            let t2 = 0;
            return this.buffers.forEach((e) => {
              A2.set(e, t2), t2 += e.length;
            }), A2;
          }
        };
      }, function(A, t) {
        A.exports = function(A2) {
          return A2 instanceof Uint8Array || Array.isArray(A2) && !A2.some((A3) => !Number.isInteger(A3) || A3 < 0 || A3 > 255);
        };
      }, function(A, t, e) {
        const g = e(9);
        let n = null;
        n = function(A2) {
          const t2 = g.getMemoryBuffer(), e2 = g.getSha256();
          g.checkAvailableMemory(A2.length + 32 + 32);
          const n2 = t2.length - A2.length, o = n2 - 32, r = o - 32;
          return t2.set(A2, n2), e2(n2, A2.length, o), e2(o, 32, r), new Uint8Array(t2.slice(r, r + 32));
        }, A.exports = n;
      }, function(A, t, e) {
        (function(t2) {
          const { WebAssembly: g } = t2, n = e(21), o = Math.ceil(236.25);
          let r = null, I = null, B = null, i = null, s = null, E = null, Q = null, C = null;
          const c = () => (r = r || new g.Memory({ initial: o }), r), a = () => (I = I || new Uint8Array(c().buffer), I), u = () => {
            if (!B) {
              const A2 = n("AGFzbQEAAAABFgRgA39/fwBgAn9/AGACf38Bf2ABfwACDwEDZW52Bm1lbW9yeQIAEwMODQABAwECAgAAAAABAQAHpQENC2NvcHlfZGlnaXRzAAAHY29weV9ibgABCGJuX3VucGFkAAINYm5fZnJvbV9kaWdpdAADBmJuX2NtcAAEDWJuX2NtcF9kaWdpdHMABQZibl9hZGQABg1ibl9zdWJfZGlnaXRzAAcGYm5fc3ViAAgOYm5fc3ViX2RpZ2l0czIACQlibl9kb3VibGUACgdibl9oYWxmAAsMYm5fbXVsX2RpZ2l0AAwK9RkNwQEBBX8CQCACQQBMDQAgAkEDcSEEIAJBAWtBA08EQCACQXxxIQdBACECA0AgACACaiIFIAEgAmoiBigCADYCACAFQQRqIAZBBGooAgA2AgAgBUEIaiAGQQhqKAIANgIAIAVBDGogBkEMaigCADYCACACQRBqIQIgByADQQRqIgNHDQALCyAERQ0AIAEgA0ECdCIBaiECIAAgAWohAANAIAAgAigCADYCACACQQRqIQIgAEEEaiEAIARBAWsiBA0ACwsLVAECfyAAIAEoAvwBNgL8ASAAIAEoAvgBNgL4ASABKAL4AQRAIAEhAgNAIAAgAigCADYCACACQQRqIQIgAEEEaiEAIANBAWoiAyABKAL4AUkNAAsLC1cBA38CQCAAKAL4ASICQQJ0IABqIgFBBGsoAgANACABQQhrIQEDQCACQQJPBEAgACACQQFrIgI2AvgBIAEoAgAgAUEEayEBRQ0BDAILCyAAQQA2AvwBCwsRACAAQgE3AvgBIAAgATYCAAvHAgEEfwJAAkACQAJAAkACQCAAKAL4ASIDDQAgACgCAA0AIAEoAvgBDQAgASgCAEUNAQsgASgC/AEhAiAAKAL8AQRAIAINAkF/DwtBASEEIAINBCABKAL4ASICIANJDQQMAwsgACgC/AFFDQIMAQtBASEEIAEoAvgBIgIgA0sNAgtBfyEEIAIgA0kNASACQQJ0QQRrIgMgAGohACABIANqIQEDQEEAIQQgAkEBayICQQBIDQIgASgCACIDIAAoAgAiBEsEQEEBDwsgAEEEayEAIAFBBGshASADIARPDQALQX8PC0F/IQQgAiADSw0AIANBAnRBBGsiBCABaiEBIAAgBGohAANAQQAhBCADQQFrIgNBAEgNASABKAIAIgIgACgCACIFSQRAQQEPCyABQQRrIQEgAEEEayEAQX8hBCACIAVNDQALCyAEC3wBA38gACgC+AEiAiABKAL4ASIDSwRAQQEPCwJ/QX8gAiADSQ0AGiACQQJ0QQRrIgQgAWohASAAIARqIQADQEEAIAJBAWsiAkEASA0BGiAAKAIAIgQgASgCACIDSwRAQQEPCyABQQRrIQEgAEEEayEAIAMgBE0NAAtBfwsL/AICCH8CfgJAIAEoAvwBIgMgAigC/AFGBEAgACADNgL8ASACKAL4ASEFIAAgASgC+AEiBzYC+AEgByAFIAUgB0kbIgpBAEwNASAAIQNBASEEIAchBgNAIAYgBEEBayIIRgRAIAAgBkEBajYC+AELQQAhBiAHIAhLBH8gASgCAAVBAAutIQwgAyAFIAhLBH8gAigCAAVBAAutIAsgDHx8Igs+AgAgBCAKTiALQoCAgIAQVHENAiADQQRqIQMgBEEBaiEEIAFBBGohASACQQRqIQIgC0L/////D1atIQsgACgC+AEhBgwACwALIAFB/AFqIQYCQCABKAL4ASIDIAIoAvgBIgRLDQAgAkH8AWoCQCADIARJDQAgA0ECdEEEayIFIAJqIQQgASAFaiEFA0AgA0EBayIDQQBIDQEgBSgCACIIIAQoAgAiCUsNAiAEQQRrIQQgBUEEayEFIAggCU8NAAsLIQYLIAYoAgAhAyAAIAEgAhAHIAAgAzYC/AELC8IDAgd/An4CQAJ/AkACfyABKAL4ASIFIAIoAvgBIgZLBEAgAEEBNgL4ASAAQfgBagwBCyAFIAZJDQEgBUECdEEEayIHIAJqIQMgASAHaiEEIAUhBwJAA0AgB0EBayIHQQBOBEAgBCgCACIIIAMoAgAiCUsNAiADQQRrIQMgBEEEayEEIAggCU8NAQsLIABBATYC+AEgBkUNBCAAQfgBagwDCyAAQQE2AvgBIAVFDQMgAEH4AWoLIQRBACEDA0AgATUCACELIAACfiADIAZJBEAgCiALfCACNQIAfQwBCyAKIAt8CyIKQoCAgIAQfCAKIApCAFMbIgs+AgAgA0EBaiEDIAtQRQRAIAQgAzYCAAsgCkI/hyEKIAFBBGohASAAQQRqIQAgAkEEaiECIAMgBUcNAAsMAgsgAEEBNgL4ASAAQfgBagshBEEAIQMDQCACNQIAIQsgAAJ+IAMgBUkEQCAKIAt8IAE1AgB9DAELIAogC3wLIgpCgICAgBB8IAogCkIAUxsiCz4CACADQQFqIQMgC1BFBEAgBCADNgIACyAKQj+HIQogAkEEaiECIABBBGohACABQQRqIQEgAyAGRw0ACwsLyQQCCX8CfgJAAkACQAJAAkACQAJAIAEoAvgBIgUNACABKAIADQAgAigC+AENACACKAIARQ0BCyACKAL8ASEDIAEoAvwBIgcEQCADDQJBASEGDAYLQQAhByADRQ0DDAULIAEoAvwBIgcNAQwDCyACKAL4ASIDIAVLDQMLQQEhBiADIAVJDQIgA0ECdEEEayIJIAFqIQQgAiAJaiEIA0AgA0EBayIDQQBIBEBBACEGDAQLIAgoAgAiCiAEKAIAIglLBEBBACEGDAQLIARBBGshBCAIQQRrIQggCSAKTQ0ACwwCCyAFIAIoAvgBIgNLBEAMAgtBASEGIAMgBUsNAQsgBUECdEEEayIDIAJqIQQgASADaiEIIAUhAwNAQQAhByADQQFrIgNBAEgEQEEAIQYMAgsgCCgCACIKIAQoAgAiCUsEQEEAIQYMAgsgBEEEayEEIAhBBGshCEEBIQYgCSAKTQ0ACwsCQCACKAL8ASAHRgRAIAAgASACEAcMAQsgAigC+AEhCyAAIAU2AvgBIAUgCyAFIAtLGyIJQQBMDQAgACEDQQEhBCAFIQcDQCAHIARBAWsiCEYEQCAAIAdBAWo2AvgBC0EAIQdBACEKIAUgCEsEfyABKAIABUEAC60hDCADIAggC0kEfyACKAIABUEAC60gDCANfHwiDD4CACAEIAlOIAxCgICAgBBUcQ0BIANBBGohAyAEQQFqIQQgAUEEaiEBIAJBBGohAiAMQv////8PVq0hDSAAKAL4ASEHDAALAAsgACAGNgL8AQufAQICfgR/IAIoAvgBIQggASgC+AEhByAAQQE2AvgBIAcEQCAAIQYDQCABNQIAIQQgBgJ+IAUgCEkEQCADIAR8IAI1AgB9DAELIAMgBHwLIgNCgICAgBB8IAMgA0IAUxsiBD4CACAFQQFqIQUgBFBFBEAgACAFNgL4AQsgA0I/hyEDIAFBBGohASAGQQRqIQYgAkEEaiECIAUgB0cNAAsLC7UCAQR/IAAgASgC/AE2AvwBIAAgASgC+AEiAkECdCIEIAFqQQRrKAIAQQBIBH8gACAEakEBNgIAIAEoAvgBQQFqBSACCzYC+AECQCABKAL4ASICQQFrIgRBAEwNAAJAIARBAXFFBEAgBCEDIAIhBAwBCyAEQQJ0IgMgAGogASADaigCAEEBdCABIAJBAmsiA0ECdGooAgBBH3ZyNgIACyACQQJGDQAgA0ECaiEFIANBAnQiAiAAakEEayEDIAEgAmpBCGshAgNAIANBBGogAkEIaigCAEEBdCAEQQJ0IAFqQQhrKAIAQR92cjYCACADIAJBBGooAgBBAXQgAigCAEEfdnI2AgAgA0EIayEDIAJBCGshAiAFQQNrIQQgBUECayIFQQJKDQALCyAAIAEoAgBBAXQ2AgAL2QEBBH8gACABKAL4ATYC+AEgACABKAL8ATYC/AEgASgC+AFBAUcEQCABIQIgACEDA0AgAigCACEEIAMgAkEEaiICKAIAQR90IARBAXZyNgIAIANBBGohAyABKAL4AUEBayIEIAVBAWoiBUsNAAsLIARBAnQiAiAAaiABIAJqKAIAQQF2NgIAAkAgACgC+AEiAkECdCAAaiIBQQRrKAIADQAgAUEIayEDA0AgAkECTwRAIAAgAkEBayICNgL4ASADKAIAIANBBGshA0UNAQwCCwsgAEEANgL8AQsL6gICA38DfgJAAkACQAJAAkACQAJAIAIOAgIAAQsgACABRg0FIAAgASgC/AE2AvwBIAAgASgC+AE2AvgBIAEoAvgBRQ0FIAEhAgNAIAAgAigCADYCACACQQRqIQIgAEEEaiEAIANBAWoiAyABKAL4AUkNAAsMBQsgACABKAL8ATYC/AEgASgC+AFFBEAMAwsgAq0hCCABIQIgACEDA0AgAyACNQIAIAh+IAZ8Igc+AgAgAkEEaiECIANBBGohAyAHQiCIIQYgASgC+AEiBCAFQQFqIgVLDQALDAELIABCATcC+AEMAgsgB0KAgICAEFQNACAAIARBAnRqIAY+AgAgASgC+AFBAWohBAsgACAENgL4ASAEQQJ0IABqIgJBBGsoAgANASAAQfwBaiEBIAJBCGshAgNAIARBAkkEQCABIQAMAgsgACAEQQFrIgQ2AvgBIAIoAgAgAkEEayECRQ0ACwwBCyAAQQA2AgALCwB2CXByb2R1Y2VycwEMcHJvY2Vzc2VkLWJ5AQVjbGFuZ1YxMy4wLjAgKGh0dHBzOi8vZ2l0aHViLmNvbS9sbHZtL2xsdm0tcHJvamVjdCBmZDFkOGMyZjA0ZGRlMjNiZWUwZmIzYTdkMDY5YTliMTA0NmRhOTc5KQ=="), t3 = new g.Module(A2), e2 = { env: { memory: c() } };
              B = new g.Instance(t3, e2);
            }
            return B.exports;
          }, h = () => {
            if (!i) {
              const A2 = n("AGFzbQEAAAABNAhgA39/fwBgAn9/AGACf38Bf2AEf39/fwBgAX8AYAN/f38Bf2AEf39/fwF/YAV/f39/fwACwwEMA2Vudghibl91bnBhZAAEA2Vudg1ibl9jbXBfZGlnaXRzAAIDZW52B2NvcHlfYm4AAQNlbnYNYm5fZnJvbV9kaWdpdAABA2Vudgxibl9tdWxfZGlnaXQAAANlbnYLY29weV9kaWdpdHMAAANlbnYGYm5fc3ViAAADZW52BmJuX2FkZAAAA2VudgZibl9jbXAAAgNlbnYOYm5fc3ViX2RpZ2l0czIAAANlbnYHYm5faGFsZgABA2VudgZtZW1vcnkCACcDCQgFBgMAAQMHAQYJAX8BQYCAnAELB4gBCAxibl9kaXZfZGlnaXQACwpibl9kaXZfcmVtAAwSYm5faW52X21vZF9iYXJyZXR0AA0GYm5fbXVsAA4cYm5fcHJlY29tcHV0ZV9iYXJyZXR0X2ZhY3RvcgAPDmJuX21vZF9iYXJyZXR0ABASYm5fcG93X21vZF9iYXJyZXR0ABEFYm5fc3EAEgqeFAj+AQIEfwN+IAJFBEBBAQ8LIAAgASgC+AE2AvgBIAAgASgC/AE2AvwBAkAgASgC+AEiA0EBayIEQQBIDQAgAq0hCCAEBH4gA0EBcUEAIANBfnFrIQUgA0ECdEEIayIDIAFqIQIgACADaiEDA0AgA0EEaiACQQRqNQIAIgkgB0IghoQgCIAiBz4CACADIAI1AgAgCSAHIAh+fUIghoQiByAIgCIJPgIAIAcgCCAJfn0hByACQQhrIQIgA0EIayEDIARBAmshBCAFQQJqIgUNAAtFDQEgB0IghgVCAAshByAEQQJ0IgIgAGogByABIAJqNQIAhCAIgD4CAAsgABAAQQALmgcCCn8EfiMAQYAKayIEJABBASEFAkAgAiACKAL4ASIHQQFrIghBAnRqKAIAIgZFDQAgB0UNACABKAL4ASEFIAEgAhABIglBAEgEQCADBEAgAyABEAILQQAhBSAAQQAQAwwBCwJAIAlFBEAgAigC/AEhAiABKAL8ASEBIABBARADIAAgASACczYC/AEgA0UNAUEAIQUgA0EAEAMMAgsgBSAHayEFIARBgAhqIAFCgICAgBAgBq1CAXyAIhGnIgYQBCAEQYAGaiACIAYQBCAEKAL4CSIGIAEoAvgBRgRAIARBgAhqIAZBAnRqQQA2AgAgBCAEKAL4CUEBajYC+AkLIAAgBUEBajYC+AEgBEEANgL8ByAEQQA2AvwJIAdBAWohCSAEQYAGaiIGIAdBAnRqQQhrIQogBiAIQQJ0aiELA0AgBEGACGogByAFIghqQQJ0aiIFQQRrKQIAIg4gCzUCACIQgCEPIA4gDyAQfn0hDiAFQQhrIQUDQAJAIA9C/////w9YBEAgDyAKNQIAfiAFNQIAIA5CIIaEWA0BCyAPQgF9IQ8gDiAQfCIOQoCAgIAQVA0BCwsgBEEANgL8AyAEIAk2AvgDIARBgAJqIgYgCEECdCIMIARBgAhqaiINIAkQBSAEIARBgAZqIA+nIgUQBCAEQYAEaiAGIAQQBiAAIAxqIAQoAvwFBH8gBEGABGoiBiAGIARBgAZqEAcgBUEBawUgBQs2AgAgDSAEQYAEaiAEKAL4BRAFIARBgAhqIAQoAvgFIgYgCGoiBUECdGpBADYCACAEIAU2AvgJIAhBAWshBSAIQQBKDQALIAMEQCADIAY2AvgBIAMgBCgC/AU2AvwBAkAgBkEBayIIQQBIDQAgEUL/////D4MhDyAIBH4gBkEBcUEAIAZBfnFrIQkgBCAGQQJ0IgdqQfgDaiEFIAMgB2pBCGshB0IAIQ4DQCAHQQRqIAVBBGo1AgAiECAOQiCGhCAPgCIOPgIAIAcgBTUCACAQIA4gD359QiCGhCIOIA+AIhA+AgAgDiAPIBB+fSEOIAVBCGshBSAHQQhrIQcgCEECayEIIAlBAmoiCQ0AC0UNASAOQiCGBUIACyEOIAhBAnQiBSADaiAOIARBgARqIAVqNQIAhCAPgD4CAAsgAxAAIAMgASgC/AE2AvwBIAMQAAsgACACKAL8ASABKAL8AXM2AvwBIAAQAAtBACEFCyAEQYAKaiQAIAULiwIBBn8jAEGAEmsiAyQAIANBgBBqQQEQAwJAAkAgASgC+AFBAUcNACABKAIADQAgAEEAEAMMAQsgA0GADmpBARADIANBgAxqQQAQAyADQYAGaiABIAIgA0GACmoQDBogA0GACGogAhACA0AgA0GACmogA0GAEGoQCEEATEUEQCADQYAEaiIFIANBgAhqIgYgA0GACmoiBCADQYAGaiIBEAwaIAEgA0GADmoiByAFEA4gA0GAAmoiCCADQYAMaiIJIAEQBiABIAQgBRAOIAMgBiABEAYgCSAHEAIgByAIEAIgBiAEEAIgBCADEAIMAQsLIANBgAZqIANBgA5qIAIgABAMGgsgA0GAEmokAAu9AgIJfwJ+IAAgAigC+AEgASgC+AFqIgM2AvgBIAMEQCAAIQMDQCADQQA2AgAgA0EEaiEDIARBAWoiBCAAKAL4AUkNAAsLIAIoAvgBBEAgAEEEaiEGIAAhCANAAkAgASgC+AFFDQAgAiAHQQJ0aiELQgAhDUEAIQkgBiEKIAEhBCAIIQMDQCADIAM1AgAgBDUCACALNQIAfiANfHwiDD4CACAKIgVBBGohCiAEQQRqIQQgA0EEaiEDIAxCIIghDSAJQQFqIgkgASgC+AFJDQALIAxCgICAgBBUDQADQCAFIA0gBTUCAHwiDD4CACAFQQRqIQUgDEIgiCENIAxC/////w9WDQALCyAGQQRqIQYgCEEEaiEIIAdBAWoiByACKAL4AUkNAAsLIAAQACAAIAEoAvwBIAIoAvwBRzYC/AELaAEBfyMAQYACayICJAAgAkIRNwP4ASACQQE2AkAgAkIANwM4IAJCADcDMCACQgA3AyggAkIANwMgIAJCADcDGCACQgA3AxAgAkIANwMIIAJCADcDACAAIAIgAUEAEAwaIAJBgAJqJAALkQQBAn8jAEGABGsiBCQAAkAgASgC+AFBEU8EQCAEQYACaiABIAIgABAMGiAAKAL8AUUNASAAIAAgAhAHDAELIAEgAhABQQBIBEBBACEDIAEoAvgBQQFGBEAgASgCAEUhAwsCQCABKAL8AUUNACADDQAgACACIAEQCSAAQQA2AvwBDAILIAAgARACDAELIAEoAvwBBEAgBEGAAmoiBSABIAMQDiAEQQA2AvwDIAQgBCgCwAI2AoACIAQgBCkCxAI3AoQCIAQgBCkCzAI3AowCIAQgBCkC1AI3ApQCIAQgBCkC3AI3ApwCIAQgBCkC5AI3AqQCIAQgBCkC7AI3AqwCIAQgBCkC9AI3ArQCIAQgBCgC/AI2ArwCIAQgBCgC+ANBEGs2AvgDIAQgBSACEA4gACABIAQQByAAQQA2AvwBIAAgAhAIQQBOBEAgACAAIAIQCQsgACACIAAQBgwBCyAEQYACaiIFIAEgAxAOIAQgBCgCwAI2AoACIAQgBCkCxAI3AoQCIAQgBCkCzAI3AowCIAQgBCkC1AI3ApQCIAQgBCkC3AI3ApwCIAQgBCkC5AI3AqQCIAQgBCkC7AI3AqwCIAQgBCkC9AI3ArQCIAQgBCgC/AI2ArwCIAQgBCgC+ANBEGs2AvgDIAQgBSACEA4gACABIAQQBiAAIAIQCEEASA0AIAAgACACEAkLIARBgARqJAALrAEBAn8jAEGACGsiBSQAIAIoAgAhBgJAAkAgAigC+AFBAUcNACAGDQAgAEEBEAMMAQsgBUGABmogAhAKIAVBgAJqIgIgASABEA4gBSACIAMgBUGABGoQDBogBkEBcUUEQCAAIAVBgARqIAVBgAZqIAMgBBARDAELIAVBgAJqIgIgBUGABGogBUGABmogAyAEEBEgBSACIAEQDiAAIAUgAyAEEBALIAVBgAhqJAALCgAgACABIAEQDgsAdglwcm9kdWNlcnMBDHByb2Nlc3NlZC1ieQEFY2xhbmdWMTMuMC4wIChodHRwczovL2dpdGh1Yi5jb20vbGx2bS9sbHZtLXByb2plY3QgZmQxZDhjMmYwNGRkZTIzYmVlMGZiM2E3ZDA2OWE5YjEwNDZkYTk3OSk="), t3 = new g.Module(A2), e2 = { env: { memory: c() } };
              Object.assign(e2.env, u()), i = new g.Instance(t3, e2);
            }
            return i.exports;
          }, f2 = () => {
            if (!s) {
              const A2 = n("AGFzbQEAAAABLQdgAn9/AGADf39/AGAEf39/fwBgAn9/AX9gBX9/f39/AGAEf39/fwF/YAF/AAKKAg8DZW52DWJuX2Zyb21fZGlnaXQAAANlbnYGYm5fYWRkAAEDZW52BWJuX3NxAAADZW52DmJuX21vZF9iYXJyZXR0AAIDZW52BmJuX211bAABA2VudgZibl9zdWIAAQNlbnYJYm5fZG91YmxlAAADZW52B2NvcHlfYm4AAANlbnYGYm5fY21wAAMDZW52B2JuX2hhbGYAAANlbnYSYm5faW52X21vZF9iYXJyZXR0AAIDZW52HGJuX3ByZWNvbXB1dGVfYmFycmV0dF9mYWN0b3IAAANlbnYSYm5fcG93X21vZF9iYXJyZXR0AAQDZW52CmJuX2Rpdl9yZW0ABQNlbnYGbWVtb3J5AgA8AwsKAAEBAAAGAQEAAQYJAX8BQbCA7AELBzsFDnNlY3AyNTZrMV9pbml0ABMGcHRfYWRkABQGcHRfbXVsABUFZ19tdWwAFgxkZWNvbXByZXNzX3kAFwqRGQqkAwEIfyMAQYAYayICJAAgAUGAAmohBwJAAkAgASgC+ANBAUcNACAHKAIADQAgAEEAEAAgAEGAAmpBABAAIABBgARqQQAQAAwBCyACQYAWaiIDIAcgBxAEIAJBgBBqIgkgA0GAgKABKAIAQZiAoAEoAgAQAyACQYAOaiIFQQMQACACQYAMaiIGQQQQACACQYAUaiIEIAYgARAEIAMgBCAJEAQgAkGACmoiBiADQYCAoAEoAgBBmICgASgCABADIAJBgAZqIgggARACIAMgBSAIEAQgAkGACGoiBSADQYCAoAEoAgBBmICgASgCABADIAJBgARqIgggBRACIAQgBhAGIAMgCCAEEAUgACADQYCAoAEoAgBBmICgASgCABADIAQgBiAAEAUgAkGAEmoiBiAFIAQQBCACQYACaiIFIAkQAiACQQgQACAEIAIgBRAEIAMgBiAEEAUgAEGAAmogA0GAgKABKAIAQZiAoAEoAgAQAyAEIAcQBiADIAQgAUGABGoQBCAAQYAEaiADQYCAoAEoAgBBmICgASgCABADCyACQYAYaiQAC/wGAQp/IwBBgCJrIgMkACACQYAEaiEJIAJBgAJqIQUgAUGAAmohBwJAAkAgASgC+ANBAUcNACAHKAIADQAgACACEAcgAEGAAmogBRAHIABBgARqIAkQBwwBCyABQYAEaiEKAkAgAigC+ANBAUcNACAFKAIADQAgACABEAcgAEGAAmogBxAHIABBgARqIAoQBwwBCyADQYAgaiIEIAoQAiADQYAeaiIIIARBgICgASgCAEGYgKABKAIAEAMgBCAIIAoQBCADQYAcaiILIARBgICgASgCAEGYgKABKAIAEAMgBCAJEAIgA0GAGmoiBiAEQYCAoAEoAgBBmICgASgCABADIAQgBiAJEAQgA0GAGGoiDCAEQYCAoAEoAgBBmICgASgCABADIAQgASAGEAQgA0GAEmoiBiAEQYCAoAEoAgBBmICgASgCABADIAQgAiAIEAQgA0GAEGoiAiAEQYCAoAEoAgBBmICgASgCABADIAQgByAMEAQgA0GADmogBEGAgKABKAIAQZiAoAEoAgAQAyAEIAUgCxAEIANBgAxqIARBgICgASgCAEGYgKABKAIAEAMgBiACEAhFBEAgA0GADmogA0GADGoQCARAIABBABAAIABBgAJqQQAQACAAQYAEakEBEAAMAgsgACABEA4MAQsgA0GACmoiBCADQYAQaiADQYASaiIFEAUgA0GACGoiByADQYAMaiADQYAOaiILEAUgA0GAIGoiASAEEAIgA0GABmoiAiABQYCAoAEoAgBBmICgASgCABADIAEgBCACEAQgA0GABGoiCCABQYCAoAEoAgBBmICgASgCABADIAEgBSACEAQgA0GAAmoiBiABQYCAoAEoAgBBmICgASgCABADIAMgBxACIANBgBZqIgIgAyAIEAUgA0GAFGoiBSAGEAYgASACIAUQBSAAIAFBgICgASgCAEGYgKABKAIAEAMgAiAGIAAQBSABIAcgAhAEIAUgAUGAgKABKAIAQZiAoAEoAgAQAyABIAsgCBAEIAIgAUGAgKABKAIAQZiAoAEoAgAQAyABIAUgAhAFIABBgAJqIAFBgICgASgCAEGYgKABKAIAEAMgASAKIAkQBCACIAFBgICgASgCAEGYgKABKAIAEAMgASAEIAIQBCAAQYAEaiABQYCAoAEoAgBBmICgASgCABADCyADQYAiaiQAC7MCAQN/IwBBgA5rIgMkACABQYACaiEEAkACQAJAIAEoAvgDQQFGBEAgBCgCAEUNAQsgAigC+AFBAUcNASACKAIADQELIABBABAAIABBgAJqQQAQACAAQYAEakEBEAAMAQsgAkGMgKABKAIAEAhFBEAgACABEAcgAEGAAmogBBAHIABBgARqIAFBgARqEAcMAQsCQAJAIAIoAvwBBEAgAigC+AFBAUcNASACKAIADQELIAJBhICgASgCABAIQQBIDQELIANBgAZqIgQgAkGEgKABKAIAQZyAoAEoAgAQAyAAIAEgBBAQDAELIAIoAgAgA0GADGoiBSACEAkgA0GABmogASAFEBBBAXFFBEAgACADQYAGahAODAELIAMgA0GABmoQDiAAIAMgARAPCyADQYAOaiQAC5ACAQV/IwBBgAJrIgIkAAJAAkACQAJAIAEoAvgBQQFGBEAgASgCAEUEQCAAQQAQACAAQYACakEAEAAgAEGABGpBARAADAULIAEoAvwBRQ0BDAILIAEoAvwBDQELIAFBhICgASgCABAIQQBIDQELIAIgAUGEgKABKAIAQZyAoAEoAgAQAyAAIAIQEQwBCyAAQQAQACAAQYACakEAEAAgAEGABGpBARAAIAEoAvgBRQ0AQaCAoAEoAgAhBANAIAEgA0ECdGohBkEAIQUDQCAGKAIAIAV2QQFxBEAgACAAIAQQDwsgBEGABmohBCAFQQFqIgVBIEcNAAsgA0EBaiIDIAEoAvgBSQ0ACwsgAkGAAmokAAueAgEEfyMAQYAIayIDJAAgA0GABGoiBCABQYAEakGAgKABKAIAQZiAoAEoAgAQCiADQYAGaiICIAQQAiADQYACaiIFIAJBgICgASgCAEGYgKABKAIAEAMgAiAFIAQQBCADIAJBgICgASgCAEGYgKABKAIAEAMgAiABIAUQBCAAIAJBgICgASgCAEGYgKABKAIAEAMgAiABQYACaiADEAQgAEGAAmoiASACQYCAoAEoAgBBmICgASgCABADAkAgACgC/AFFDQAgACgC+AFBAUYEQCAAKAIARQ0BCyAAIABBgICgASgCABABCwJAIAAoAvwDRQ0AIAAoAvgDQQFGBEAgASgCAEUNAQsgASABQYCAoAEoAgAQAQsgA0GACGokAAunBAECf0GAgKABIAA2AgBBhICgASAAQYACajYCAEGIgKABIABBgARqIgE2AgBBjICgASAAQYAGajYCAEGQgKABIABBgAhqNgIAQZSAoAEgAEGACmo2AgBBmICgASAAQYAOajYCAEGcgKABIABBgBBqIgA2AgBBoICgASAANgIAIAFBABAAQYyAoAEoAgBBARAAQZCAoAEoAgBBAhAAQYCAoAEoAgAiAUIINwL4ASABQn83AhggAUJ/NwIQIAFCfzcCCCABQq/4//9vNwIAQYSAoAEoAgAiAEIINwL4ASAAQn83AhggAEJ+NwIQIABCu8Ci+uqct9e6fzcCCCAAQsGC2YHN0Zfpv383AgBBlICgASgCACIAQripw9j/kfSjnH83AoACIABCmaiVtIqJ7Yt9NwKIAiAAQqiRxPDA/77S3QA3ApACIABC5YiPtfLOtp3IADcCmAIgAEKYr+C3saug+dkANwIAIABC2dG47rKb/80CNwIIIABCh5ac9NzSmNDVADcCECAAQqz38s7vz5nf+QA3AhggAEIINwL4AyAAQgg3AvgBQZiAoAEoAgAgARALQZyAoAEoAgBBhICgASgCABALQaCAoAEoAgAiAEGUgKABKAIAIgEQByAAQYACaiABQYACahAHIABBgARqQQEQAEGggKABKAIAIQFBACEAA0AgACABaiICQYAGaiACQZCAoAEoAgAQECAAQYAGaiIAQYD6C0cNAAsLbAECfyMAQYASayIDJAAgA0GADGoiBCABEAcgBEGAAmogAUGAAmoQByAEQYAEakEBEAAgA0GABmoiASACEAcgAUGAAmogAkGAAmoQByABQYAEakEBEAAgAyAEIAEQDyAAIAMQEiADQYASaiQAC0gBAn8jAEGADGsiAyQAIANBgAZqIgQgARAHIARBgAJqIAFBgAJqEAcgA0GACmpBARAAIAMgBCACEBAgACADEBIgA0GADGokAAsiAQF/IwBBgAZrIgIkACACIAEQESAAIAIQEiACQYAGaiQAC4ECAQR/IwBBgBRrIgMkACADQYAQaiIEIAEgARAEIANBgBJqIgUgBCABEAQgA0GADmoiASAFQYCAoAEoAgBBmICgASgCABADIANBgApqIgRBBxAAIAUgASAEEAEgA0GADGoiASAFQYCAoAEoAgBBmICgASgCABADIANBgARqIgVBgICgASgCAEGMgKABKAIAEAEgA0GAAmoiBEEEEAAgA0GACGoiBiAFIAQgAxANGiADQYAGaiABIAZBgICgASgCAEGYgKABKAIAEAwCQCADKAKABiACc0EBcQRAIABBgICgASgCACADQYAGahAFDAELIAAgA0GABmoQBwsgA0GAFGokAAsLLQEAQYCAoAELJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2CXByb2R1Y2VycwEMcHJvY2Vzc2VkLWJ5AQVjbGFuZ1YxMy4wLjAgKGh0dHBzOi8vZ2l0aHViLmNvbS9sbHZtL2xsdm0tcHJvamVjdCBmZDFkOGMyZjA0ZGRlMjNiZWUwZmIzYTdkMDY5YTliMTA0NmRhOTc5KQ=="), t3 = new g.Module(A2), e2 = { env: { memory: c() } };
              Object.assign(e2.env, u(), h()), s = new g.Instance(t3, e2);
              const o2 = a();
              Q = o2.length - 512e4, s.exports.secp256k1_init(Q), C = Q + 256;
            }
            return s.exports;
          };
          A.exports = { BN_SIZE: 256, PT_SIZE: 512, getMemory: c, getMemoryBuffer: a, getNPos: () => (f2(), C), getBnExports: u, getBn2Exports: h, getSecp256k1Exports: f2, getEcdsaExports: () => {
            if (!E) {
              const A2 = n("AGFzbQEAAAABNAhgAn9/AGADf39/AGAEf39/fwBgAn9/AX9gAX8AYAZ/f39/f38Bf2AEf39/fwF/YAF/AX8C1QEOA2VudgVnX211bAAAA2Vudgdjb3B5X2JuAAADZW52BmJuX211bAABA2VudgZibl9hZGQAAQNlbnYSYm5faW52X21vZF9iYXJyZXR0AAIDZW52DmJuX21vZF9iYXJyZXR0AAIDZW52CWJuX2RvdWJsZQAAA2VudgZibl9jbXAAAwNlbnYGYm5fc3ViAAEDZW52BnB0X211bAABA2VudgZwdF9hZGQAAQNlbnYFYm5fc3EAAANlbnYNYm5fZnJvbV9kaWdpdAAAA2VudgZtZW1vcnkCAFADBQQEBQYHBgkBfwFBoIC8AgsHOwQKZWNkc2FfaW5pdAANCmVjZHNhX3NpZ24ADgxlY2RzYV92ZXJpZnkADw52YWxpZGF0ZV9wb2ludAAQCtIHBEQAQYCA8AEgADYCAEGEgPABIABBgAJqNgIAQYiA8AEgAEGABmo2AgBBjIDwASAAQYAOajYCAEGQgPABIABBgBBqNgIAC/cBAQF/IwBBgAprIgUkACAFQYAGaiIGIAMQACAAIAYQAUEBIQYCQCAAKAL4AUEBRgRAIAAoAgBFDQELIAVBgARqIgYgACAEEAIgBUGAAmoiACACIAYQAyAFIANBhIDwASgCAEGQgPABKAIAEAQgBiAFIAAQAiABIAZBhIDwASgCAEGQgPABKAIAEAUgASgC/AEEQCABIAFBhIDwASgCABADCyAFQYAEaiIAIAEQBiAAQYSA8AEoAgAQB0EASgRAIAFBhIDwASgCACABEAgLAkAgASgC+AFBAUcNACABKAIADQBBASEGDAELQQAhBgsgBUGACmokACAGC/ECAQJ/IwBBgBRrIgQkAEEBIQUCQCAAQYiA8AEoAgAQB0EASA0AIAFBiIDwASgCABAHQQBIDQAgAEGEgPABKAIAEAdBAE4NACABQYSA8AEoAgAQB0EATg0AIARBgBJqIgUgAUGEgPABKAIAQZCA8AEoAgAQBCAEQYAMaiIBIAIgBRACIARBgBBqIAFBhIDwASgCAEGQgPABKAIAEAUCQCAEKAL8EUUNACAEKAL4EUEBRgRAIAQoAoAQRQ0BCyAEQYAQaiIBIAFBhIDwASgCABADCyAEQYAIaiAEQYAQahAAIARBgAxqIgEgACAEQYASahACIARBgA5qIAFBhIDwASgCAEGQgPABKAIAEAUCQCAEKAL8EUUNACAEKAL4EUEBRgRAIAQoAoAQRQ0BCyAEQYAOaiIBIAFBhIDwASgCABADCyAEQYAEaiIBIAMgBEGADmoQCSAEIARBgAhqIAEQCiAEIAAQByEFCyAEQYAUaiQAIAULngIBBH8jAEGADGsiASQAQQEhAgJAIAAoAvwBDQAgACgC/AMNACAAQYCA8AEoAgAQB0EATg0AIABBgAJqIgNBgIDwASgCABAHQQBODQACQCAAKAL4AUEBRw0AIAAoAgANACAAKAL4A0EBRw0AIAMoAgBFDQELIAFBgApqIgIgABALIAFBgAhqIgQgAiAAEAIgAUGABmoiAEEHEAwgAUGAAmoiAiAEIAAQAyABQYAEaiACQYCA8AEoAgBBjIDwASgCABAFIAEoAvwFBEAgAUGABGoiACAAQYCA8AEoAgAQAwsgAUGAAmoiACADEAsgASAAQYCA8AEoAgBBjIDwASgCABAFIAEgAUGABGoQB0EAR0EBdCECCyABQYAMaiQAIAILCx0BAEGAgPABCxQAAAAAAAAAAAAAAAAAAAAAAAAAAAB2CXByb2R1Y2VycwEMcHJvY2Vzc2VkLWJ5AQVjbGFuZ1YxMy4wLjAgKGh0dHBzOi8vZ2l0aHViLmNvbS9sbHZtL2xsdm0tcHJvamVjdCBmZDFkOGMyZjA0ZGRlMjNiZWUwZmIzYTdkMDY5YTliMTA0NmRhOTc5KQ=="), t3 = new g.Module(A2), e2 = { env: { memory: c() } };
              Object.assign(e2.env, u(), h(), f2()), E = new g.Instance(t3, e2), E.exports.ecdsa_init(Q);
            }
            return E.exports;
          }, writeBN: function(A2, t3, e2) {
            const g2 = (4 - e2.length % 4) % 4, n2 = Math.max(e2.length + g2, 4);
            let o2 = t3 + n2 - 1;
            for (let t4 = 0; t4 < g2; t4++)
              A2[o2--] = 0;
            e2.forEach((t4) => {
              A2[o2--] = t4;
            }), 0 === e2.length && (A2[t3] = A2[t3 + 1] = A2[t3 + 2] = A2[t3 + 3] = 0), A2[t3 + 256 - 1] = 0, A2[t3 + 256 - 2] = 0, A2[t3 + 256 - 3] = 0, A2[t3 + 256 - 4] = 0, A2[t3 + 256 - 5] = 0, A2[t3 + 256 - 6] = 0, A2[t3 + 256 - 7] = 0, A2[t3 + 256 - 8] = n2 / 4, u().bn_unpad(t3);
          }, readBN: function(A2, t3) {
            let e2 = 4 * A2[t3 + 256 - 8];
            for (let g3 = t3 + e2 - 1; g3 >= t3 && !A2[g3]; g3--)
              e2--;
            const g2 = new Uint8Array(e2);
            let n2 = g2.length - 1, o2 = t3;
            for (let t4 = 0; t4 < e2; t4++)
              g2[n2--] = A2[o2++];
            return g2;
          } };
        }).call(this, e(20));
      }, function(A, t) {
        A.exports = function(A2) {
          return A2 ? async (...t2) => await A2(...t2) : null;
        };
      }, function(A, t, e) {
        const g = {};
        g.Address = e(8), g.PublicKey = e(12), g.PrivateKey = e(10), g.Script = e(14), g.Transaction = e(60), g.classes = e(81), g.constants = e(82), g.functions = e(84), g.testnet = false, g.feePerKb = 50, g.version = "1.0.14", g.variant = "browser", A.exports = g;
      }, function(A, t, e) {
        const g = e(48), n = e(50), o = e(52), r = e(3), I = /* @__PURE__ */ new WeakMap(), B = /* @__PURE__ */ new WeakMap();
        class i {
          constructor(A2, t2, e2 = true) {
            if (e2) {
              if (!r(A2) || 20 !== A2.length)
                throw new Error("bad pubkeyhash");
              if ("boolean" != typeof t2)
                throw new Error("bad testnet flag");
            }
            this.pubkeyhash = A2, this.testnet = t2, Object.freeze(this);
          }
          static fromString(A2) {
            const { pubkeyhash: t2, testnet: e2 } = n(A2), g2 = new i(t2, e2, false);
            return B.set(g2, A2), g2;
          }
          static fromPublicKey(A2) {
            if (I.has(A2))
              return I.get(A2);
            const t2 = A2.testnet, e2 = o(A2.point), g2 = new i(e2, t2, false);
            return I.set(A2, g2), g2;
          }
          static from(A2) {
            if (A2 instanceof i)
              return A2;
            if (A2 instanceof e(12))
              return i.fromPublicKey(A2);
            if ("object" == typeof A2 && A2 && (A2 = A2.toString()), "string" == typeof A2)
              return i.fromString(A2);
            throw new Error("unsupported type");
          }
          toString() {
            if (B.has(this))
              return B.get(this);
            const A2 = g(this.pubkeyhash, this.testnet);
            return B.set(this, A2), A2;
          }
          toScript() {
            return e(14).templates.P2PKHLockScript.fromAddress(this);
          }
        }
        A.exports = i;
      }, function(A, t, e) {
        (function(t2) {
          const { WebAssembly: g } = t2, n = e(21);
          let o = null, r = null;
          o = "AGFzbQEAAAABDAJgAn9/AGADf39/AAIPAQNlbnYGbWVtb3J5AgAnAwMCAAEGCQF/AUGAgJwBCwcIAQRzaGExAAEKxgwCrwUBD38jAEHAAmsiCSQAA0AgAkHAAEYEQANAIANBgAJGRQRAIAMgCWoiAUFAayABKAIAIAFBCGooAgAgAUEgaigCACABQTRqKAIAc3NzQQF3NgIAIANBBGohAwwBCwsgACgCZCEKQQAhAyAAKAJQIgwhBiAAQdQAaigCACINIQIgAEHYAGooAgAiDiEFIABB3ABqKAIAIg8hBCAAQeAAaigCACIQIQcDQCAEIQEgBSEEIAYhCCADQdAARgRAIABB6ABqKAIAIQsgCUHQAGohCkEAIQUDQCABIQMgBCEBIAghBiAFQdAARgRAIABB7ABqKAIAIQsgCUGgAWohCkEAIQUDQCADIQQgASEDIAYhCCAFQdAARgRAIABB8ABqKAIAIQsgCUHwAWohCkEAIQEDQCAEIQUgAyEEIAghBiABQdAARkUEQCABIApqKAIAIAIgBHMgBXMgBkEFd2ogB2ogC2pqIQggAUEEaiEBIAJBHnchAyAGIQIgBSEHDAELCyAAIAcgEGo2AmAgACAFIA9qNgJcIAAgBCAOajYCWCAAIAIgDWo2AlQgACAGIAxqNgJQIAlBwAJqJAAFIAUgCmooAgAgByAIQQV3aiADIARzIAJxIAMgBHFzaiALamohBiAFQQRqIQUgAkEedyEBIAghAiAEIQcMAQsLBSAFIApqKAIAIAEgAnMgA3MgBkEFd2ogB2ogC2pqIQggBUEEaiEFIAJBHnchBCAGIQIgAyEHDAELCwUgAyAJaigCACACIARxIAhBBXdqIAEgAkF/c3FqIAdqIApqaiEGIANBBGohAyACQR53IQUgCCECIAEhBwwBCwsFIAIgCWogASACaigAACIEQRh0IARBCHRBgID8B3FyIARBCHZBgP4DcSAEQRh2cnI2AgAgAkEEaiECDAELCwuSBwIHfwF+IwBBgAFrIgMkACADQfgAakHWg4vTfDYCACADQfAAakKh1+f2xpvvjY9/NwMAIANB6ABqQvDDy56cs57B2gA3AwAgA0HgAGpC/rnrxemOlZkQNwMAIANCgcaUupbx6uZvNwNYIANCADcDUCADQQA2AkgDQCABBEAgA0EIaiAEaiAALQAAOgAAIAMgAygCSEEBaiIENgJIIARBwABGBEAgA0EIaiIEIAQQACADQQA2AkggAyADKQNQQoAEfDcDUEEAIQQLIAFBAWshASAAQQFqIQAMAQsLIANBCGogBGpBgAE6AAACQAJAIARBOE8EQCAEQQFqIQQDQCAEQT9LDQIgA0EIaiAEakEAOgAAIARBAWohBAwACwALIANBCGpBAXIhAANAIARBN0YNAiAAIARqQQA6AAAgBEEBaiEEDAALAAsgA0EIaiIAIAAQACAAQQA6AAAgAEE4aiIBQQFrQQA6AAAgAEEAOgACIABBADoAASABQQNrQQA6AAAgAUECa0EAOgAAIABBADoAAyABQQRrQQA6AAAgAEEAIABrQQNxIgFqIgBBADYCACAAQTggAWtBfHEiBGoiAUEEa0EANgIAAkAgBEEJSQ0AIABBADYCCCAAQQA2AgQgAUEIa0EANgIAIAFBDGtBADYCACAEQRlJDQAgAEEANgIYIABBADYCFCAAQQA2AhAgAEEANgIMIAFBEGtBADYCACABQRRrQQA2AgAgAUEYa0EANgIAIAFBHGtBADYCACAEIABBBHFBGHIiBGsiAUEgSQ0AIAAgBGohAANAIABCADcDACAAQRhqQgA3AwAgAEEQakIANwMAIABBCGpCADcDACAAQSBqIQAgAUEgayIBQR9LDQALCwsgAyADKQNQIAMoAkhBA3StfCIKNwNQIAMgCjwARyADIApCCIg8AEYgAyAKQhCIPABFIAMgCkIYiDwARCADIApCIIg8AEMgAyAKQiiIPABCIAMgCkIwiDwAQSADIApCOIg8AEAgA0EIaiIAIAAQAEEAIQBBGCEEIAMoAmghBSADKAJkIQYgAygCYCEHIAMoAlwhCCADKAJYIQkDQCAAQQRHBEAgACACaiIBIAkgBHY6AAAgAUEQaiAFIAR2OgAAIAFBDGogBiAEdjoAACABQQhqIAcgBHY6AAAgAUEEaiAIIAR2OgAAIARBCGshBCAAQQFqIQAMAQsLIANBgAFqJAALAHYJcHJvZHVjZXJzAQxwcm9jZXNzZWQtYnkBBWNsYW5nVjEzLjAuMCAoaHR0cHM6Ly9naXRodWIuY29tL2xsdm0vbGx2bS1wcm9qZWN0IGZkMWQ4YzJmMDRkZGUyM2JlZTBmYjNhN2QwNjlhOWIxMDQ2ZGE5Nzkp", r = "AGFzbQEAAAABDAJgAn9/AGADf39/AAIPAQNlbnYGbWVtb3J5AgA8AwMCAAEGCQF/AUGAguwBCwcKAQZzaGEyNTYAAQrGCwKbBAEWfyMAQYACayIFJAADQCADQcAARgRAA0AgBEHAAUZFBEAgBCAFaiICQUBrIAIoAgAgAkEkaigCACACQThqKAIAIgFBD3cgAUENd3MgAUEKdnNqaiACQQRqKAIAIgFBGXcgAUEOd3MgAUEDdnNqNgIAIARBBGohBAwBCwtBACEBIABB2ABqKAIAIg0hCyAAQdwAaigCACIOIQggAEHgAGooAgAiDyEMIABB5ABqKAIAIhAhAyAAQegAaigCACIRIQYgAEHsAGooAgAiEiEJIABB1ABqKAIAIhMhAiAAKAJQIhQhBANAIAYhCiADIQYgDCEDIAshByABQYACRkUEQCACIAdxIRUgAiAHcyEWIAEgBWooAgAgAUGAgKABaigCACADIAZxIANBGncgA0EVd3MgA0EHd3NqIAlqIAogA0F/c3FqamoiFyAIaiEMIAFBBGohASACIQsgByEIIAohCSAEIgJBHncgAkETd3MgAkEKd3MgFSACIBZxc2ogF2ohBAwBCwsgACAJIBJqNgJsIAAgCiARajYCaCAAIAYgEGo2AmQgACADIA9qNgJgIAAgCCAOajYCXCAAIAcgDWo2AlggACACIBNqNgJUIAAgBCAUajYCUCAFQYACaiQABSADIAVqIAEgA2ooAAAiAkEYdCACQQh0QYCA/AdxciACQQh2QYD+A3EgAkEYdnJyNgIAIANBBGohAwwBCwsLpgcCCn8BfiMAQfAAayIDJAAgA0HoAGpCq7OP/JGjs/DbADcDACADQeAAakL/pLmIxZHagpt/NwMAIANB2ABqQvLmu+Ojp/2npX83AwAgA0LnzKfQ1tDrs7t/NwNQIANCADcDSCADQQA2AkADQCABBEAgAyAEaiAALQAAOgAAIAMgAygCQEEBaiIENgJAIARBwABGBEAgAyADEAAgA0EANgJAIAMgAykDSEKABHw3A0hBACEECyABQQFrIQEgAEEBaiEADAELCyADIARqQYABOgAAAkACQCAEQThPBEAgBEEBaiEEA0AgBEE/Sw0CIAMgBGpBADoAACAEQQFqIQQMAAsACyADQQFyIQADQCAEQTdGDQIgACAEakEAOgAAIARBAWohBAwACwALIAMgAxAAIANBADoAACADQThqIgBBAWtBADoAACADQQA6AAIgA0EAOgABIABBA2tBADoAACAAQQJrQQA6AAAgA0EAOgADIABBBGtBADoAACADQQAgA2tBA3EiAWoiAEEANgIAIABBOCABa0F8cSIEaiIBQQRrQQA2AgACQCAEQQlJDQAgAEEANgIIIABBADYCBCABQQhrQQA2AgAgAUEMa0EANgIAIARBGUkNACAAQQA2AhggAEEANgIUIABBADYCECAAQQA2AgwgAUEQa0EANgIAIAFBFGtBADYCACABQRhrQQA2AgAgAUEca0EANgIAIAQgAEEEcUEYciIEayIBQSBJDQAgACAEaiEAA0AgAEIANwMAIABBGGpCADcDACAAQRBqQgA3AwAgAEEIakIANwMAIABBIGohACABQSBrIgFBH0sNAAsLCyADIAMpA0ggAygCQEEDdK18Ig03A0ggAyANPAA/IAMgDUIIiDwAPiADIA1CEIg8AD0gAyANQhiIPAA8IAMgDUIgiDwAOyADIA1CKIg8ADogAyANQjCIPAA5IAMgDUI4iDwAOCADIAMQAEEAIQAgAygCbCEFIAMoAmghBiADKAJkIQcgAygCYCEIIAMoAlwhCSADKAJYIQogAygCVCELIAMoAlAhDEEYIQQDQCAAQQRHBEAgACACaiIBIAwgBHY6AAAgAUEcaiAFIAR2OgAAIAFBGGogBiAEdjoAACABQRRqIAcgBHY6AAAgAUEQaiAIIAR2OgAAIAFBDGogCSAEdjoAACABQQhqIAogBHY6AAAgAUEEaiALIAR2OgAAIARBCGshBCAAQQFqIQAMAQsLIANB8ABqJAALC4oCAQBBgICgAQuAApgvikKRRDdxz/vAtaXbtelbwlY58RHxWaSCP5LVXhyrmKoH2AFbgxK+hTEkw30MVXRdvnL+sd6Apwbcm3Txm8HBaZvkhke+78adwQ/MoQwkbyzpLaqEdErcqbBc2oj5dlJRPphtxjGoyCcDsMd/Wb/zC+DGR5Gn1VFjygZnKSkUhQq3JzghGy78bSxNEw04U1RzCmW7Cmp2LsnCgYUscpKh6L+iS2YaqHCLS8KjUWzHGeiS0SQGmdaFNQ70cKBqEBbBpBkIbDceTHdIJ7W8sDSzDBw5SqrYTk/KnFvzby5o7oKPdG9jpXgUeMiECALHjPr/vpDrbFCk96P5vvJ4ccYAdglwcm9kdWNlcnMBDHByb2Nlc3NlZC1ieQEFY2xhbmdWMTMuMC4wIChodHRwczovL2dpdGh1Yi5jb20vbGx2bS9sbHZtLXByb2plY3QgZmQxZDhjMmYwNGRkZTIzYmVlMGZiM2E3ZDA2OWE5YjEwNDZkYTk3OSk=";
          let I = null, B = null, i = null, s = null, E = null;
          const Q = () => (I = I || new g.Memory({ initial: 518 }), I);
          function C(A2) {
            const t3 = n(A2), e2 = new g.Module(t3), o2 = { env: { memory: Q() } };
            return new g.Instance(e2, o2);
          }
          A.exports = { checkAvailableMemory: (A2) => {
            if (A2 > 33554432)
              throw new Error("data too big: " + A2);
          }, getMemoryBuffer: () => (B = B || new Uint8Array(Q().buffer), B), getRipemd160: () => (i = i || C("AGFzbQEAAAABEQNgA39/fwBgAn9/AX9gAX8AAg8BA2VudgZtZW1vcnkCABQDBQQBAAIABgkBfwFB4ILMAAsHDQEJcmlwZW1kMTYwAAMK0hgE4QIBAn8CQCABRQ0AIABBADoAACAAIAFqIgJBAWtBADoAACABQQNJDQAgAEEAOgACIABBADoAASACQQNrQQA6AAAgAkECa0EAOgAAIAFBB0kNACAAQQA6AAMgAkEEa0EAOgAAIAFBCUkNACAAQQAgAGtBA3EiA2oiAkEANgIAIAIgASADa0F8cSIDaiIBQQRrQQA2AgAgA0EJSQ0AIAJBADYCCCACQQA2AgQgAUEIa0EANgIAIAFBDGtBADYCACADQRlJDQAgAkEANgIYIAJBADYCFCACQQA2AhAgAkEANgIMIAFBEGtBADYCACABQRRrQQA2AgAgAUEYa0EANgIAIAFBHGtBADYCACADIAJBBHFBGHIiA2siAUEgSQ0AIAIgA2ohAgNAIAJCADcDACACQRhqQgA3AwAgAkEQakIANwMAIAJBCGpCADcDACACQSBqIQIgAUEgayIBQR9LDQALCyAAC+MJAQV/AkACQAJ/IAFBA3FFIAJFckUEQCAAIAEtAAA6AAAgAEEBaiABQQFqIgNBA3FFIAJBAWsiBEVyDQEaIAAgAS0AAToAASAAQQJqIAFBAmoiA0EDcUUgAkECayIERXINARogACABLQACOgACIABBA2ogAUEDaiIDQQNxRSACQQNrIgRFcg0BGiAAIAEtAAM6AAMgAkEEayEEIAFBBGohAyAAQQRqDAELIAIhBCABIQMgAAsiAEEDcSIBRQRAAkAgBEEQTwRAIARBEGsiAUEQcUUEQCAAIAMpAgA3AgAgACADKQIINwIIIANBEGohAyABIQQgAEEQaiEACyABQRBJDQEDQCAAIAMpAgA3AgAgAEEIaiADQQhqKQIANwIAIABBEGogA0EQaikCADcCACAAQRhqIANBGGopAgA3AgAgAEEgaiEAIANBIGohAyAEQSBrIgRBD0sNAAsLIAQhAQsgAUEIcQRAIAAgAykCADcCACADQQhqIQMgAEEIaiEACyABQQRxBEAgACADKAIANgIAIANBBGohAyAAQQRqIQALIAFBAnEEQCAAIAMvAAA7AAAgA0ECaiEDIABBAmohAAsgAUEBcQ0BDAILAkAgBEEgSQ0AAkACQAJAIAFBAWsOAwABAgMLIAAgAygCACICOgAAIAAgAkEQdjoAAiAAIAJBCHY6AAEgBEEDayEEIABBA2ohB0EAIQEDQCABIAdqIgAgASADaiIFQQRqKAIAIgZBCHQgAkEYdnI2AgAgAEEEaiAFQQhqKAIAIgJBCHQgBkEYdnI2AgAgAEEIaiAFQQxqKAIAIgZBCHQgAkEYdnI2AgAgAEEMaiAFQRBqKAIAIgJBCHQgBkEYdnI2AgAgAUEQaiEBIARBEGsiBEEQSw0ACyABIAdqIQAgASADakEDaiEDDAILIAAgAygCACICOwAAIARBAmshBCAAQQJqIQdBACEBA0AgASAHaiIAIAEgA2oiBUEEaigCACIGQRB0IAJBEHZyNgIAIABBBGogBUEIaigCACICQRB0IAZBEHZyNgIAIABBCGogBUEMaigCACIGQRB0IAJBEHZyNgIAIABBDGogBUEQaigCACICQRB0IAZBEHZyNgIAIAFBEGohASAEQRBrIgRBEUsNAAsgASAHaiEAIAEgA2pBAmohAwwBCyAAIAMoAgAiAjoAACAEQQFrIQQgAEEBaiEHQQAhAQNAIAEgB2oiACABIANqIgVBBGooAgAiBkEYdCACQQh2cjYCACAAQQRqIAVBCGooAgAiAkEYdCAGQQh2cjYCACAAQQhqIAVBDGooAgAiBkEYdCACQQh2cjYCACAAQQxqIAVBEGooAgAiAkEYdCAGQQh2cjYCACABQRBqIQEgBEEQayIEQRJLDQALIAEgB2ohACABIANqQQFqIQMLIARBEHEEQCAAIAMtAAA6AAAgACADKAABNgABIAAgAykABTcABSAAIAMvAA07AA0gACADLQAPOgAPIANBEGohAyAAQRBqIQALIARBCHEEQCAAIAMpAAA3AAAgA0EIaiEDIABBCGohAAsgBEEEcQRAIAAgAygAADYAACADQQRqIQMgAEEEaiEACyAEQQJxBEAgACADLwAAOwAAIANBAmohAyAAQQJqIQALIARBAXFFDQELIAAgAy0AADoAAAsLmQkBE39BcCEGIABB2ABqKAIAIg8hASAAQdQAaigCACIQIQwgAEHQAGooAgAiESEHIABBzABqKAIAIhIhDSAAKAJIIhMhAgNAIAEiCCAAIAZBMGotAABBAnRqQQhqKAIAIAwiAyAHIA0iBXNzIAJqaiAGQYABai0AAHdqIQ0gB0EKdyEMIAMhASAFIQcgCCECIAYgBkEBaiIGTQ0AC0FwIQEgDyEJIBAhBiARIQQgEiEHIBMhCgNAIAkiDiAAIAFB0AFqLQAAQQJ0akEIaigCACAKIAciAiAEIAYiC0F/c3JzampB5peKhQVqIAFBoAJqLQAAd2ohByAEQQp3IQYgCyEJIAIhBCAOIQogASABQQFqIgFNDQALQRAhBANAIAMiCiAAIARBIGotAABBAnRqQQhqKAIAIAggBSANIgFxaiAMIgkgAUF/c3FqakGZ84nUBWogBEHwAGotAAB3aiENIAVBCnchDCAJIQMgASEFIAohCCAEQQFqIgRBIEcNAAtBECEDA0AgCyIIIAAgA0HAAWotAABBAnRqQQhqKAIAIA4gAiAGIgVBf3NxaiAFIAciBHFqakGkorfiBWogA0GQAmotAAB3aiEHIAJBCnchBiAFIQsgBCECIAghDiADQQFqIgNBIEcNAAtBICEDA0AgCSIOIAAgA0Egai0AAEECdGpBCGooAgAgCiAMIgsgDSICIAFBf3Nyc2pqQaHX5/YGaiADQfAAai0AAHdqIQ0gAUEKdyEMIAshCSACIQEgDiEKIANBAWoiA0EwRw0AC0EgIQEDQCAFIgogACABQcABai0AAEECdGpBCGooAgAgCCAGIgkgByIDIARBf3Nyc2pqQfP9wOsGaiABQZACai0AAHdqIQcgBEEKdyEGIAkhBSADIQQgCiEIIAFBAWoiAUEwRw0AC0EwIQEDQCALIgggACABQSBqLQAAQQJ0akEIaigCACAOIAIgDCIFQX9zcWogBSANIgRxampBpIaRhwdrIAFB8ABqLQAAd2ohDSACQQp3IQwgBSELIAQhAiAIIQ4gAUEBaiIBQcAARw0AC0EwIQIDQCAJIg4gACACQcABai0AAEECdGpBCGooAgAgCiADIAciAXFqIAYiCyABQX9zcWpqQenttdMHaiACQZACai0AAHdqIQcgA0EKdyEGIAshCSABIQMgDiEKIAJBAWoiAkHAAEcNAAtBwAAhAgNAIAUiCSAAIAJBIGotAABBAnRqQQhqKAIAIAggDSIKIAQgDCIDQX9zcnNqakGyhbC1BWsgAkHwAGotAAB3aiENIARBCnchDCADIQUgCiEEIAkhCCACQQFqIgJB0ABHDQALQcAAIQUDQCALIgggACAFQcABai0AAEECdGpBCGooAgAgBiILIAEgByIEc3MgDmpqIAVBkAJqLQAAd2ohByABQQp3IQYgBCEBIAghDiAFQQFqIgVB0ABHDQALIAAgDSATaiAEajYCWCAAIAkgD2ogB2o2AlQgACADIBBqIAhqNgJQIAAgDCARaiALajYCTCAAIAogEmogBmo2AkggAEEIakHAABAAGiAAQQA6AFwL7AICBH8BfiMAQeAAayIDJAAgA0HYAGpBECgCADYCACADQdAAakEIKQMANwMAIANBADoAXCADQQApAwA3A0ggA0HIABAAIgNBCGohBSADAn9BACABRQ0AGgJAA0ACQCAEIAVqIQYgAUHAACAEayIESQ0AIAYgACAEEAEgAyADLQBcIARqOgBcIAMgAykDACAEQQN0rXw3AwAgAxACIAEgBGsiAUUNAiAAIARqIQAgAy0AXCEEDAELCyAGIAAgARABIAMgAykDACABQQN0rXw3AwAgAy0AXCABagwBCyADLQBcCyIAQQFqOgBcIAUgAEH/AXFqQYABOgAAIAMtAFxBOU8EQCADQcAAOgBcIAMQAgsgA0HEAGogAykDACIHQiCIPgIAIANBwAA6AFwgA0FAayAHPgIAIAMQAiACQRBqIANB2ABqKAIANgAAIAJBCGogA0HQAGopAwA3AAAgAiADKQNINwAAIANB4ABqJAALC+cCAQBBAAvgAgEjRWeJq83v/ty6mHZUMhDw4dLDAAAAAAAAAAAAAAAAAAECAwQFBgcICQoLDA0ODwcEDQEKBg8DDAAJBQIOCwgDCg4ECQ8IAQIHAAYNCwUMAQkLCgAIDAQNAwcPDgUGAgQABQkHDAIKDgEDCAsGDw0LDg8MBQgHCQsNDg8GBwkIBwYIDQsJBw8HDA8JCwcNDAsNBgcOCQ0PDggNBgUMBwULDA4PDg8JCAkOBQYIBgUMCQ8FCwYIDQwFDA0OCwgFBgUOBwAJAgsEDQYPCAEKAwwGCwMHAA0FCg4PCAwECQECDwUBAwcOBgkLCAwCCgAEDQgGBAEDCw8ABQwCDQkHCg4MDwoEAQUIBwYCDQ4AAwkLCAkJCw0PDwUHBwgLDg4MBgkNDwcMCAkLBwcMBwYPDQsJBw8LCAYGDgwNBQ4NDQcFDwUICw4OBg4GCQwJDAUPCAgFDAkMBQ4GCA0GBQ8NCwsAdglwcm9kdWNlcnMBDHByb2Nlc3NlZC1ieQEFY2xhbmdWMTMuMC4wIChodHRwczovL2dpdGh1Yi5jb20vbGx2bS9sbHZtLXByb2plY3QgZmQxZDhjMmYwNGRkZTIzYmVlMGZiM2E3ZDA2OWE5YjEwNDZkYTk3OSk=").exports.ripemd160, i), getSha1: () => (s = s || C(o).exports.sha1, s), getSha256: () => (E = E || C(r).exports.sha256, E) };
        }).call(this, e(20));
      }, function(A, t, e) {
        const g = e(27), n = e(56), o = e(57), r = e(3), I = e(13), B = /* @__PURE__ */ new WeakMap();
        class i {
          constructor(A2, t2, e2, g2 = true) {
            if (g2) {
              if (!r(A2))
                throw new Error("bad number");
              if ("boolean" != typeof t2)
                throw new Error("bad testnet flag");
              if ("boolean" != typeof e2)
                throw new Error("bad compressed flag");
              I(A2);
            }
            this.number = A2, this.testnet = t2, this.compressed = e2, Object.freeze(this);
          }
          static fromString(A2) {
            const { number: t2, testnet: e2, compressed: g2 } = o(A2), n2 = new i(t2, e2, g2, false);
            return B.set(n2, A2), n2;
          }
          static fromRandom(A2 = e(7).testnet) {
            const t2 = g();
            return new i(t2, A2, true, false);
          }
          static from(A2) {
            if (A2 instanceof i)
              return A2;
            if ("object" == typeof A2 && A2 && (A2 = A2.toString()), "string" == typeof A2)
              return i.fromString(A2);
            throw new Error("unsupported type");
          }
          toString() {
            if (B.has(this))
              return B.get(this);
            const A2 = n(this.number, this.testnet, this.compressed);
            return B.set(this, A2), A2;
          }
          toPublicKey() {
            return e(12).fromPrivateKey(this);
          }
          toAddress() {
            return this.toPublicKey().toAddress();
          }
        }
        A.exports = i;
      }, function(A, t) {
        A.exports = function(A2, t2) {
          if (0 === t2.length)
            A2.write([0]);
          else if (t2.length <= 75)
            A2.write([t2.length]), A2.write(t2);
          else if (t2.length <= 255)
            A2.write([76, t2.length]), A2.write(t2);
          else if (t2.length <= 65535)
            A2.write([77, t2.length % 256, t2.length >> 8]), A2.write(t2);
          else {
            if (!(t2.length <= 4294967295))
              throw new Error("data too large");
            {
              const e = new Uint8Array(5);
              e[0] = 78;
              let g = t2.length;
              e[1] = g % 256, g = Math.floor(g / 256), e[2] = g % 256, g = Math.floor(g / 256), e[3] = g % 256, g = Math.floor(g / 256), e[4] = g, A2.write(e), A2.write(t2);
            }
          }
          return A2;
        };
      }, function(A, t, e) {
        const g = e(0), n = e(1), o = e(25), r = e(54), I = e(23), B = e(3), i = e(26), s = /* @__PURE__ */ new WeakMap();
        class E {
          constructor(A2, t2, e2, g2 = true) {
            if (g2) {
              if ("object" != typeof A2 || !B(A2.x) || !B(A2.y))
                throw new Error("bad point");
              if ("boolean" != typeof t2)
                throw new Error("bad testnet flag");
              if ("boolean" != typeof e2)
                throw new Error("bad compressed flag");
              i(A2);
            }
            this.point = A2, this.testnet = t2, this.compressed = e2, Object.freeze(this);
          }
          static fromString(A2) {
            const t2 = o(n(A2)), g2 = e(7).testnet, r2 = 66 === A2.length;
            return new E(t2, g2, r2, false);
          }
          static fromPrivateKey(A2) {
            if (s.has(A2))
              return s.get(A2);
            if (!(A2 instanceof e(10)))
              throw new Error("not a PrivateKey: " + A2);
            const t2 = r(A2.number), g2 = A2.testnet, n2 = A2.compressed, o2 = new E(t2, g2, n2, false);
            return s.set(A2, o2), o2;
          }
          static from(A2) {
            if (A2 instanceof E)
              return A2;
            if (A2 instanceof e(10))
              return E.fromPrivateKey(A2);
            if ("object" == typeof A2 && A2 && (A2 = A2.toString()), "string" == typeof A2)
              return E.fromString(A2);
            throw new Error("unsupported type");
          }
          toString() {
            return g(this.toBuffer());
          }
          toBuffer() {
            return I(this.point, this.compressed);
          }
          toAddress() {
            return e(8).fromPublicKey(this);
          }
        }
        A.exports = E;
      }, function(A, t, e) {
        const { BN_SIZE: g, getMemoryBuffer: n, getBnExports: o, writeBN: r, getNPos: I } = e(5);
        A.exports = function(A2) {
          if (32 !== A2.length)
            throw new Error("bad length");
          const t2 = n(), e2 = t2.length - g, B = o().bn_cmp, i = I();
          if (r(t2, e2, A2), B(e2, i) >= 0)
            throw new Error("outside range");
          return A2;
        };
      }, function(A, t, e) {
        const g = e(28), n = e(29), o = e(30), r = e(0), I = e(1), B = e(15), i = e(3), s = e(58), E = e(59), Q = e(8), C = /* @__PURE__ */ new WeakMap();
        class c {
          constructor(A2 = [], t2 = true) {
            if (t2 && !i(A2))
              throw new Error("not a buffer");
            this.buffer = A2;
            if (this.constructor !== c) {
              if (!this.constructor.matches(A2))
                throw new Error("not a " + this.constructor.name);
              if (this.constructor.toString().includes("constructor"))
                throw new Error("template constructors not allowed");
            } else {
              const t3 = Object.values(c.templates).find((t4) => t4.matches(A2));
              if (t3) {
                if (t3.toString().includes("constructor"))
                  throw new Error("template constructors not allowed");
                Object.setPrototypeOf(this, t3.prototype);
              }
            }
            return Object.freeze(this), new Proxy(this, { get: (A3, t3, e2) => t3 === Symbol.iterator ? A3.buffer[Symbol.iterator].bind(A3.buffer) : "symbol" != typeof t3 && Number.isInteger(parseInt(t3)) ? A3.buffer[t3] : Reflect.get(A3, t3, e2) });
          }
          static fromString(A2) {
            if ("string" != typeof A2)
              throw new Error("not a string");
            try {
              return c.fromHex(A2);
            } catch (t2) {
              return c.fromASM(A2);
            }
          }
          static fromHex(A2) {
            return new c(I(A2), false);
          }
          static fromASM(A2) {
            return this.fromBuffer(E(A2));
          }
          static fromBuffer(A2) {
            return new c(A2 || null, true);
          }
          static from(A2) {
            if (A2 instanceof c)
              return A2;
            if (i(A2))
              return c.fromBuffer(A2);
            if ("object" == typeof A2 && A2 && (A2 = A2.toHex ? A2.toHex() : A2.toString()), "string" == typeof A2)
              return c.fromString(A2);
            throw new Error("unsupported type");
          }
          toString() {
            return this.toHex();
          }
          toHex() {
            return r(this.buffer);
          }
          toASM() {
            return s(this.buffer);
          }
          toBuffer() {
            return this.buffer;
          }
          get length() {
            return this.buffer.length;
          }
          slice(A2, t2) {
            return this.buffer.slice(A2, t2);
          }
          get chunks() {
            if (C.has(this))
              return C.get(this);
            const A2 = B(this.buffer);
            return C.set(this, A2), A2;
          }
        }
        class P2PKHLockScript extends c {
          static matches(A2) {
            return n(A2);
          }
          static fromAddress(A2) {
            return new P2PKHLockScript(g(Q.from(A2).pubkeyhash));
          }
          toAddress() {
            return new Q(o(this.buffer), e(7).testnet);
          }
        }
        c.templates = { P2PKHLockScript }, A.exports = c;
      }, function(A, t) {
        A.exports = function(A2) {
          const t2 = [];
          let e = 0;
          for (; e < A2.length; ) {
            const g = A2[e];
            if (e += 1, 0 === g)
              t2.push({ opcode: g, buf: [] });
            else if (g < 76)
              t2.push({ opcode: g, buf: A2.slice(e, e + g) }), e += g;
            else if (76 === g) {
              const n = A2[e];
              e += 1, t2.push({ opcode: g, buf: A2.slice(e, e + n) }), e += n;
            } else if (77 === g) {
              const n = A2[e] | A2[e + 1] << 8;
              e += 2, t2.push({ opcode: g, buf: A2.slice(e, e + n) }), e += n;
            } else if (78 === g) {
              const n = A2[e] + 256 * A2[e + 1] + 65536 * A2[e + 2] + 16777216 * A2[e + 3];
              e += 4, t2.push({ opcode: g, buf: A2.slice(e, e + n) }), e += n;
            } else
              t2.push({ opcode: g });
          }
          if (e !== A2.length)
            throw new Error("bad script");
          return t2;
        };
      }, function(A, t, e) {
        const g = e(33), n = e(63), o = e(4), r = e(17);
        A.exports = function(A2, t2, e2, I, B, i) {
          return i ? n(A2, t2, e2, I, B).then(r).then(r) : o(g(A2, t2, e2, I, B));
        };
      }, function(A, t, e) {
        const g = "undefined" != typeof window && window.crypto && window.crypto.subtle;
        let n = null;
        if (g)
          n = async (A2) => new Uint8Array(await g.digest("SHA-256", new Uint8Array(A2)));
        else {
          n = e(6)(e(37));
        }
        A.exports = n;
      }, function(A, t, e) {
        const g = e(49), n = e(4);
        A.exports = function(A2, t2) {
          const e2 = new Uint8Array(t2.length + 5);
          e2[0] = A2, e2.set(t2, 1);
          const o = n(e2.slice(0, t2.length + 1));
          return e2.set(o.slice(0, 4), e2.length - 4), g(e2);
        };
      }, function(A, t) {
        A.exports = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
      }, function(A, t) {
        var e;
        e = function() {
          return this;
        }();
        try {
          e = e || new Function("return this")();
        } catch (A2) {
          "object" == typeof window && (e = window);
        }
        A.exports = e;
      }, function(A, t, e) {
        let g = null;
        {
          const A2 = [], t2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
          for (let e2 = 0, g2 = t2.length; e2 < g2; ++e2)
            A2[t2.charCodeAt(e2)] = e2;
          A2["-".charCodeAt(0)] = 62, A2["_".charCodeAt(0)] = 63, g = function(t3) {
            let e2;
            const g2 = function(A3) {
              const t4 = A3.length;
              if (t4 % 4 > 0)
                throw new Error("length must be a multiple of 4");
              let e3 = A3.indexOf("=");
              return -1 === e3 && (e3 = t4), [e3, e3 === t4 ? 0 : 4 - e3 % 4];
            }(t3), n = g2[0], o = g2[1], r = new Uint8Array(function(A3, t4, e3) {
              return 3 * (t4 + e3) / 4 - e3;
            }(0, n, o));
            let I = 0;
            const B = o > 0 ? n - 4 : n;
            let i;
            for (i = 0; i < B; i += 4)
              e2 = A2[t3.charCodeAt(i)] << 18 | A2[t3.charCodeAt(i + 1)] << 12 | A2[t3.charCodeAt(i + 2)] << 6 | A2[t3.charCodeAt(i + 3)], r[I++] = e2 >> 16 & 255, r[I++] = e2 >> 8 & 255, r[I++] = 255 & e2;
            return 2 === o && (e2 = A2[t3.charCodeAt(i)] << 2 | A2[t3.charCodeAt(i + 1)] >> 4, r[I++] = 255 & e2), 1 === o && (e2 = A2[t3.charCodeAt(i)] << 10 | A2[t3.charCodeAt(i + 1)] << 4 | A2[t3.charCodeAt(i + 2)] >> 2, r[I++] = e2 >> 8 & 255, r[I++] = 255 & e2), r;
          };
        }
        A.exports = g;
      }, function(A, t, e) {
        const g = e(51), n = e(4);
        A.exports = function(A2) {
          const t2 = g(A2), e2 = t2[0], o = n(t2.slice(0, t2.length - 4));
          if (o[0] !== t2[t2.length - 4] || o[1] !== t2[t2.length - 3] || o[2] !== t2[t2.length - 2] || o[3] !== t2[t2.length - 1])
            throw new Error("bad checksum");
          return { version: e2, payload: t2.slice(1, t2.length - 4) };
        };
      }, function(A, t) {
        A.exports = function(A2, t2 = true) {
          if (!t2) {
            const t3 = new Uint8Array(65);
            return t3[0] = 4, t3.set(A2.x, 33 - A2.x.length), t3.set(A2.y, 65 - A2.y.length), t3;
          }
          const e = new Uint8Array(33);
          return e[0] = 0 == (1 & A2.y[A2.y.length - 1]) ? 2 : 3, e.set(A2.x, 33 - A2.x.length), e;
        };
      }, function(A, t) {
        const e = /^(?:[a-fA-F0-9][a-fA-F0-9])*$/;
        A.exports = function(A2) {
          return e.test(A2);
        };
      }, function(A, t, e) {
        const { BN_SIZE: g, getMemoryBuffer: n, getSecp256k1Exports: o, writeBN: r, readBN: I } = e(5), B = e(26);
        A.exports = function(A2) {
          const t2 = A2[0];
          if (4 === t2) {
            const t3 = function(A3) {
              if (65 !== A3.length)
                throw new Error("bad length");
              let t4 = 1;
              for (; !A3[t4] && t4 < A3.length; )
                t4++;
              const e2 = A3.slice(t4, 33);
              let g2 = 33;
              for (; !A3[g2] && g2 < A3.length; )
                g2++;
              const n2 = A3.slice(g2, 65);
              return { x: e2, y: n2 };
            }(A2);
            return B(t3), t3;
          }
          if (2 === t2 || 3 === t2) {
            const t3 = function(A3) {
              if (33 !== A3.length)
                throw new Error("bad length");
              let t4 = 1;
              for (; !A3[t4] && t4 < A3.length; )
                t4++;
              const e2 = A3.slice(t4, 33), B2 = n(), i = B2.length - g, s = i - g;
              r(B2, i, e2), o().decompress_y(s, i, A3[0]);
              const E = I(B2, s);
              return { x: e2, y: E };
            }(A2);
            return B(t3), t3;
          }
          throw new Error("bad prefix: " + t2);
        };
      }, function(A, t, e) {
        const { PT_SIZE: g, BN_SIZE: n, getMemoryBuffer: o, getEcdsaExports: r, writeBN: I } = e(5);
        A.exports = function(A2) {
          const t2 = o(), e2 = t2.length - g;
          I(t2, e2, A2.x), I(t2, e2 + n, A2.y);
          const B = r().validate_point(e2);
          if (0 !== B)
            throw new Error(1 === B ? "outside range" : 2 === B ? "not on curve" : "bad point");
          return A2;
        };
      }, function(A, t, e) {
        const g = e(55), n = e(13);
        A.exports = function() {
          for (; ; )
            try {
              return n(g(32));
            } catch (A2) {
              continue;
            }
        };
      }, function(A, t, e) {
        const g = e(3);
        A.exports = function(A2) {
          if (!g(A2))
            throw new Error("not a buffer");
          const t2 = new Uint8Array(25);
          return t2[0] = 118, t2[1] = 169, t2[2] = 20, t2.set(A2, 3), t2[23] = 136, t2[24] = 172, t2;
        };
      }, function(A, t) {
        A.exports = function(A2) {
          return 25 === A2.length && 118 === A2[0] && 169 === A2[1] && 20 === A2[2] && 136 === A2[23] && 172 === A2[24];
        };
      }, function(A, t) {
        A.exports = function(A2) {
          return A2.slice(3, 23);
        };
      }, function(A, t) {
        A.exports = { OP_0: 0, OP_FALSE: 0, OP_PUSH: 0, OP_PUSHDATA1: 76, OP_PUSHDATA2: 77, OP_PUSHDATA4: 78, OP_1NEGATE: 79, OP_TRUE: 81, OP_1: 81, OP_2: 82, OP_3: 83, OP_4: 84, OP_5: 85, OP_6: 86, OP_7: 87, OP_8: 88, OP_9: 89, OP_10: 90, OP_11: 91, OP_12: 92, OP_13: 93, OP_14: 94, OP_15: 95, OP_16: 96, OP_NOP: 97, OP_IF: 99, OP_NOTIF: 100, OP_ELSE: 103, OP_ENDIF: 104, OP_VERIFY: 105, OP_RETURN: 106, OP_TOALTSTACK: 107, OP_FROMALTSTACK: 108, OP_IFDUP: 115, OP_DEPTH: 116, OP_DROP: 117, OP_DUP: 118, OP_NIP: 119, OP_OVER: 120, OP_PICK: 121, OP_ROLL: 122, OP_ROT: 123, OP_SWAP: 124, OP_TUCK: 125, OP_2DROP: 109, OP_2DUP: 110, OP_3DUP: 111, OP_2OVER: 112, OP_2ROT: 113, OP_2SWAP: 114, OP_CAT: 126, OP_SPLIT: 127, OP_SIZE: 130, OP_INVERT: 131, OP_AND: 132, OP_OR: 133, OP_XOR: 134, OP_EQUAL: 135, OP_EQUALVERIFY: 136, OP_LSHIFT: 152, OP_RSHIFT: 153, OP_1ADD: 139, OP_1SUB: 140, OP_NEGATE: 143, OP_ABS: 144, OP_NOT: 145, OP_0NOTEQUAL: 146, OP_ADD: 147, OP_SUB: 148, OP_MUL: 149, OP_DIV: 150, OP_MOD: 151, OP_BOOLAND: 154, OP_BOOLOR: 155, OP_NUMEQUAL: 156, OP_NUMEQUALVERIFY: 157, OP_NUMNOTEQUAL: 158, OP_LESSTHAN: 159, OP_GREATERTHAN: 160, OP_LESSTHANOREQUAL: 161, OP_GREATERTHANOREQUAL: 162, OP_MIN: 163, OP_MAX: 164, OP_WITHIN: 165, OP_NUM2BIN: 128, OP_BIN2NUM: 129, OP_RIPEMD160: 166, OP_SHA1: 167, OP_SHA256: 168, OP_HASH160: 169, OP_HASH256: 170, OP_CODESEPARATOR: 171, OP_CHECKSIG: 172, OP_CHECKSIGVERIFY: 173, OP_CHECKMULTISIG: 174, OP_CHECKMULTISIGVERIFY: 175, OP_NOP1: 176, OP_NOP2: 177, OP_NOP3: 178, OP_NOP4: 179, OP_NOP5: 180, OP_NOP6: 181, OP_NOP7: 182, OP_NOP8: 183, OP_NOP9: 184, OP_NOP10: 185 };
      }, function(A, t, e) {
        const g = e(2), n = e(62);
        A.exports = function(A2) {
          const t2 = new g();
          return n(t2, A2), t2.toBuffer();
        };
      }, function(A, t, e) {
        const g = e(2), n = e(34), o = e(35), r = e(36), I = e(1), B = e(4), i = e(17);
        A.exports = function(A2, t2, e2, s, E, Q) {
          const C = A2.inputs[t2], c = A2.outputs || [];
          let a = new Uint8Array(32), u = new Uint8Array(32), h = new Uint8Array(32);
          function f2(t3, B2, i2) {
            const Q2 = new g();
            return n(Q2, void 0 === A2.version ? 1 : A2.version), Q2.write(t3), Q2.write(B2), Q2.write(I(C.txid).reverse()), n(Q2, C.vout), r(Q2, e2.length), Q2.write(e2), o(Q2, s), n(Q2, void 0 === C.sequence ? 4294967295 : C.sequence), Q2.write(i2), n(Q2, A2.locktime || 0), n(Q2, E >>> 0), Q2.toBuffer();
          }
          return 128 & E || (a = function() {
            if (A2._hashPrevouts)
              return A2._hashPrevouts;
            const t3 = new g();
            A2.inputs.forEach((A3) => {
              t3.write(I(A3.txid).reverse()), n(t3, A3.vout);
            });
            const e3 = t3.toBuffer();
            return A2._hashPrevouts = Q ? i(e3).then(i) : B(e3), A2._hashPrevouts;
          }()), 128 & E || 3 == (31 & E) || 2 == (31 & E) || (u = function() {
            if (A2._hashSequence)
              return A2._hashSequence;
            const t3 = new g();
            A2.inputs.forEach((A3) => {
              n(t3, void 0 === A3.sequence ? 4294967295 : A3.sequence);
            });
            const e3 = t3.toBuffer();
            return A2._hashSequence = Q ? i(e3).then(i) : B(e3), A2._hashSequence;
          }()), 3 != (31 & E) && 2 != (31 & E) ? h = function() {
            if (A2._hashOutputsAll)
              return A2._hashOutputsAll;
            const t3 = new g();
            c.forEach((A3) => {
              o(t3, A3.satoshis), r(t3, A3.script.length), t3.write(A3.script);
            });
            const e3 = t3.toBuffer();
            return A2._hashOutputsAll = Q ? i(e3).then(i) : B(e3), A2._hashOutputsAll;
          }() : 3 == (31 & E) && t2 < c.length && (h = function(A3) {
            const t3 = c[A3], e3 = new g();
            o(e3, t3.satoshis), r(e3, t3.script.length), e3.write(t3.script);
            const n2 = e3.toBuffer();
            return Q ? i(n2).then(i) : B(n2);
          }(t2)), Q ? Promise.all([a, u, h]).then((A3) => f2(...A3)) : f2(a, u, h);
        };
      }, function(A, t) {
        A.exports = function(A2, t2) {
          if (t2 > 4294967295)
            throw new Error("number too large");
          const e = new Uint8Array(4);
          return e[0] = t2 % 256, t2 = Math.floor(t2 / 256), e[1] = t2 % 256, t2 >>= 8, e[2] = t2 % 256, t2 >>= 8, e[3] = t2, A2.write(e);
        };
      }, function(A, t) {
        A.exports = function(A2, t2) {
          if (t2 > Number.MAX_SAFE_INTEGER)
            throw new Error("number too large");
          const e = new Uint8Array(8);
          return e[0] = t2 % 256, t2 = Math.floor(t2 / 256), e[1] = t2 % 256, t2 = Math.floor(t2 / 256), e[2] = t2 % 256, t2 = Math.floor(t2 / 256), e[3] = t2 % 256, t2 = Math.floor(t2 / 256), e[4] = t2 % 256, t2 = Math.floor(t2 / 256), e[5] = t2 % 256, t2 >>= 8, e[6] = t2 % 256, t2 >>= 8, e[7] = t2, A2.write(e);
        };
      }, function(A, t) {
        A.exports = function(A2, t2) {
          if (t2 > Number.MAX_SAFE_INTEGER)
            throw new Error("varint too large");
          if (t2 <= 252)
            return A2.write([t2]);
          if (t2 <= 65535)
            return A2.write([253, t2 % 256, Math.floor(t2 / 256)]);
          if (t2 <= 4294967295) {
            const e2 = new Uint8Array(5);
            return e2[0] = 254, e2[1] = t2 % 256, t2 = Math.floor(t2 / 256), e2[2] = t2 % 256, t2 = Math.floor(t2 / 256), e2[3] = t2 % 256, t2 = Math.floor(t2 / 256), e2[4] = t2, A2.write(e2);
          }
          const e = new Uint8Array(9);
          return e[0] = 255, e[1] = t2 % 256, t2 = Math.floor(t2 / 256), e[2] = t2 % 256, t2 = Math.floor(t2 / 256), e[3] = t2 % 256, t2 = Math.floor(t2 / 256), e[4] = t2 % 256, t2 = Math.floor(t2 / 256), e[5] = t2 % 256, t2 = Math.floor(t2 / 256), e[6] = t2 % 256, t2 = Math.floor(t2 / 256), e[7] = t2 % 256, t2 = Math.floor(t2 / 256), e[8] = t2, A2.write(e);
        };
      }, function(A, t, e) {
        const g = e(9);
        let n = null;
        n = function(A2) {
          const t2 = g.getMemoryBuffer(), e2 = g.getSha256();
          g.checkAvailableMemory(A2.length + 32);
          const n2 = t2.length - A2.length, o = n2 - 32;
          return t2.set(A2, n2), e2(n2, A2.length, o), new Uint8Array(t2.slice(o, o + 32));
        }, A.exports = n;
      }, function(A, t, e) {
        const g = e(27), n = e(64);
        A.exports = function(A2, t2, e2) {
          for (; ; ) {
            const o = g(), r = n(A2, o, t2, e2);
            if (r)
              return { r: r.r, s: r.s, k: o };
          }
        };
      }, function(A, t) {
        A.exports = class {
          constructor(A2, t2 = 0) {
            this.buffer = A2, this.pos = t2;
          }
          read(A2) {
            this.checkRemaining(A2);
            const t2 = this.pos, e = t2 + A2, g = this.buffer.slice(t2, e);
            return this.pos = e, g;
          }
          close() {
            if (this.pos !== this.buffer.length)
              throw new Error("unconsumed data");
          }
          checkRemaining(A2) {
            if (this.buffer.length - this.pos < A2)
              throw new Error("not enough data");
          }
        };
      }, function(A, t) {
        A.exports = function(A2) {
          A2.checkRemaining(4);
          const { buffer: t2, pos: e } = A2;
          return A2.pos += 4, 2 * (t2[e + 3] << 23) + (t2[e + 2] << 16 | t2[e + 1] << 8 | t2[e + 0] << 0);
        };
      }, function(A, t, e) {
        const g = e(2), n = e(70);
        A.exports = function(A2) {
          const t2 = new g();
          return n(t2, A2), t2.toBuffer();
        };
      }, function(A, t, e) {
        const g = e(73);
        A.exports = function(A2, t2, e2, n, o, r = false) {
          const I = g(A2, t2, e2, n, o, { async: r, trace: false });
          if (r)
            return I.then((A3) => A3.error ? Promise.reject(A3.error) : A3.success);
          if (I.error)
            throw I.error;
          return I.success;
        };
      }, function(A, t, e) {
        const g = e(39), n = e(75);
        A.exports = function(A2) {
          const t2 = new g(A2), e2 = n(t2);
          return t2.close(), e2;
        };
      }, function(A, t, e) {
        const { BN_SIZE: g, PT_SIZE: n, getMemoryBuffer: o, getEcdsaExports: r, writeBN: I } = e(5);
        A.exports = function(A2, t2, e2) {
          const B = o(), i = B.length - g, s = i - g, E = s - g, Q = E - n, C = r().ecdsa_verify;
          return I(B, i, A2.r), I(B, s, A2.s), I(B, E, t2), I(B, Q, e2.x), I(B, Q + g, e2.y), 0 === C(i, s, E, Q);
        };
      }, function(A, t, e) {
        const g = e(16);
        A.exports = async function(A2, t2, e2, n, o) {
          return await g(A2, t2, e2, n, o, true);
        };
      }, function(A, t, e) {
        const g = e(9);
        A.exports = function(A2) {
          const t2 = g.getMemoryBuffer(), e2 = g.getRipemd160();
          g.checkAvailableMemory(A2.length + 20);
          const n = t2.length - A2.length, o = n - 20;
          return t2.set(A2, n), e2(n, A2.length, o), new Uint8Array(t2.slice(o, o + 20));
        };
      }, function(A, t, e) {
        const g = e(9);
        let n = null;
        n = function(A2) {
          const t2 = g.getMemoryBuffer(), e2 = g.getSha1();
          g.checkAvailableMemory(A2.length + 20);
          const n2 = t2.length - A2.length, o = n2 - 20;
          return t2.set(A2, n2), e2(n2, A2.length, o), new Uint8Array(t2.slice(o, o + 20));
        }, A.exports = n;
      }, function(A, t, e) {
        const g = e(18);
        A.exports = function(A2, t2) {
          return g(t2 ? 111 : 0, A2);
        };
      }, function(A, t, e) {
        const g = e(19);
        A.exports = function(A2) {
          const t2 = [];
          let e2, n, o, r, I = "";
          for (e2 in A2)
            for (n = 0, o = A2[e2], I += o || I.length ^ e2 ? "" : 1; n in t2 || o; )
              r = t2[n], r = r ? 256 * r + o : o, o = r / 58 | 0, t2[n] = r % 58, n++;
          for (; n--; )
            I += g[t2[n]];
          return I;
        };
      }, function(A, t, e) {
        const g = e(22);
        A.exports = function(A2) {
          const { version: t2, payload: e2 } = g(A2);
          if (20 !== e2.length)
            throw new Error("bad payload");
          if (0 !== t2 && 111 !== t2)
            throw new Error("unsupported version");
          return { testnet: 0 !== t2, pubkeyhash: e2 };
        };
      }, function(A, t, e) {
        const g = e(19);
        A.exports = function(A2) {
          if ("string" != typeof A2)
            throw new Error("not a string");
          const t2 = [], e2 = [];
          let n, o, r;
          for (let I = 0; I < A2.length; I++) {
            if (n = 0, o = g.indexOf(A2[I]), o < 0)
              throw new Error("bad base58 chars");
            for (o || e2.length ^ I || e2.push(0); n in t2 || o; )
              r = t2[n], r = r ? 58 * r + o : o, o = r >> 8, t2[n] = r % 256, n++;
          }
          for (; n--; )
            e2.push(t2[n]);
          return e2;
        };
      }, function(A, t, e) {
        const g = e(53), n = e(23);
        A.exports = function(A2) {
          return g(n(A2, true));
        };
      }, function(A, t, e) {
        const g = e(9);
        let n = null;
        n = function(A2) {
          const t2 = g.getMemoryBuffer(), e2 = g.getSha256(), n2 = g.getRipemd160();
          g.checkAvailableMemory(A2.length + 32 + 20);
          const o = t2.length - A2.length, r = o - 32, I = r - 20;
          return t2.set(A2, o), e2(o, A2.length, r), n2(r, 32, I), new Uint8Array(t2.slice(I, I + 20));
        }, A.exports = n;
      }, function(A, t, e) {
        const { BN_SIZE: g, PT_SIZE: n, getMemoryBuffer: o, getSecp256k1Exports: r, writeBN: I, readBN: B } = e(5);
        A.exports = function(A2) {
          const t2 = o(), e2 = t2.length - g, i = e2 - n;
          return I(t2, e2, A2), r().g_mul(i, e2), { x: B(t2, i), y: B(t2, i + g) };
        };
      }, function(A, t, e) {
        (function(t2) {
          A.exports = function(A2) {
            return t2.crypto.getRandomValues(new Uint8Array(A2));
          };
        }).call(this, e(20));
      }, function(A, t, e) {
        const g = e(18);
        A.exports = function(A2, t2, e2 = true) {
          return g(t2 ? 239 : 128, e2 ? [...A2, 1] : A2);
        };
      }, function(A, t, e) {
        const g = e(22), n = e(13);
        A.exports = function(A2) {
          const { version: t2, payload: e2 } = g(A2), o = 239 === t2;
          let r, I;
          if (32 === e2.length)
            I = false, r = e2;
          else {
            if (33 !== e2.length)
              throw new Error("bad length");
            I = true, r = e2.slice(0, 32);
          }
          return n(r), { number: r, testnet: o, compressed: I };
        };
      }, function(A, t, e) {
        const g = e(15), n = e(0), o = e(31), r = [];
        Object.entries(o).forEach(([A2, t2]) => {
          r[t2] = A2;
        }), A.exports = function(A2) {
          return g(A2).map((A3) => A3.buf ? n(A3.buf) || "0" : A3.opcode === o.OP_1NEGATE ? "-1" : r[A3.opcode] || `<unknown opcode ${A3.opcode}>`).join(" ");
        };
      }, function(A, t, e) {
        const g = e(1), n = e(31), o = e(2), r = e(11);
        A.exports = function(A2) {
          const t2 = A2.split(" ").filter((A3) => A3.length), e2 = new o();
          return t2.forEach((A3) => {
            if (A3 in n)
              e2.write([n[A3]]);
            else if ("0" === A3)
              e2.write([n.OP_0]);
            else if ("-1" === A3)
              e2.write([n.OP_1NEGATE]);
            else {
              const t3 = g(A3);
              r(e2, t3);
            }
          }), e2.toBuffer();
        };
      }, function(A, t, e) {
        const g = e(61), n = e(28), o = e(0), r = e(1), I = e(30), B = e(24), i = e(29), s = e(11), E = e(65), Q = e(66), C = e(41), c = e(71), a = e(10), u = e(8), h = e(14), f2 = e(2), w = e(3), l = e(72), D = /* @__PURE__ */ new WeakMap();
        class p {
          constructor(...A2) {
            if (A2.length)
              throw new Error("use Transaction.fromHex() to parse a transaction");
            this.version = 1, this.inputs = [], this.outputs = [], this.locktime = 0, this.feePerKb = e(7).feePerKb, this.changeOutput = void 0;
          }
          static fromHex(A2) {
            const t2 = r(A2);
            return p.fromBuffer(t2);
          }
          static fromString(A2) {
            return this.fromHex(A2);
          }
          static fromBuffer(A2) {
            if (!w(A2))
              throw new Error("not a buffer");
            const t2 = Q(A2), e2 = new this();
            return t2.inputs.forEach((A3) => e2.input(A3)), t2.outputs.forEach((A3) => e2.output(A3)), e2.locktime = t2.locktime, e2.version = t2.version, e2;
          }
          toHex() {
            return o(this.toBuffer());
          }
          toString() {
            return this.toHex();
          }
          toBuffer() {
            return this._calculateChange(), C(this);
          }
          get hash() {
            if (Object.isFrozen(this)) {
              if (D.has(this))
                return D.get(this);
              const A2 = c(this.toBuffer());
              return D.set(this, A2), A2;
            }
            return c(this.toBuffer());
          }
          get fee() {
            const A2 = this.inputs.findIndex((A3) => !A3.output);
            if (-1 !== A2) {
              throw new Error(`missing previous output information for input ${A2}

${`Hint: Set tx.inputs[${A2}].output = new Transaction.Output(script, satoshis)`}`);
            }
            return this.inputs.reduce((A3, t2) => A3 + t2.output.satoshis, 0) - this.outputs.reduce((A3, t2) => A3 + t2.satoshis, 0);
          }
          from(A2) {
            if (Object.isFrozen(this))
              throw new Error("transaction finalized");
            if (Array.isArray(A2))
              return A2.forEach((A3) => this.from(A3)), this;
            const t2 = new y(A2.txid, A2.vout, [], 4294967295, A2);
            return this.inputs.push(t2), this;
          }
          to(A2, t2) {
            if (Object.isFrozen(this))
              throw new Error("transaction finalized");
            A2 = u.from(A2), G(t2);
            const e2 = n(A2.pubkeyhash), g2 = new d(e2, t2, this);
            return this.outputs.push(g2), this;
          }
          input(A2) {
            if (Object.isFrozen(this))
              throw new Error("transaction finalized");
            if ("object" != typeof A2 || !A2)
              throw new Error("bad input");
            return A2 = A2 instanceof y ? A2 : new y(void 0 === A2.txid && A2.output ? A2.output.txid : A2.txid, void 0 === A2.vout && A2.output ? A2.output.vout : A2.vout, A2.script, A2.sequence, A2.output), this.inputs.push(A2), this;
          }
          output(A2) {
            if (Object.isFrozen(this))
              throw new Error("transaction finalized");
            return (A2 = A2 instanceof d ? A2 : new d(A2.script, A2.satoshis, this)).tx = this, this.outputs.push(A2), this;
          }
          change(A2) {
            if (Object.isFrozen(this))
              throw new Error("transaction finalized");
            if (this.changeOutput)
              throw new Error("change output already added");
            const t2 = n(u.from(A2).pubkeyhash), e2 = new d(t2, 0, this);
            return this.outputs.push(e2), this.changeOutput = e2, this;
          }
          sign(A2) {
            if (Object.isFrozen(this))
              throw new Error("transaction finalized");
            if ("string" == typeof A2 && (A2 = a.fromString(A2)), !(A2 instanceof a))
              throw new Error("not a private key: " + A2);
            for (let t2 = 0; t2 < this.inputs.length; t2++) {
              const e2 = this.inputs[t2], n2 = e2.output;
              if (e2.script.length)
                continue;
              if (!n2)
                continue;
              const o2 = n2.script, r2 = n2.satoshis;
              if (!i(n2.script))
                continue;
              if (!E(I(n2.script), A2.toAddress().pubkeyhash))
                continue;
              const B2 = g(this, t2, o2, r2, A2.number, A2.toPublicKey().point), Q2 = new f2();
              s(Q2, B2), s(Q2, A2.toPublicKey().toBuffer());
              const C2 = Q2.toBuffer();
              e2.script = h.fromBuffer(C2);
            }
            return this;
          }
          verify() {
            const A2 = this.inputs.map((A3) => A3.output), t2 = this.feePerKb;
            return l(this, A2, t2), this;
          }
          finalize() {
            return Object.isFrozen(this) || (this._calculateChange(), Object.freeze(this), Object.freeze(this.inputs), Object.freeze(this.outputs), this.inputs.forEach((A2) => Object.freeze(A2)), this.outputs.forEach((A2) => Object.freeze(A2))), this;
          }
          _calculateChange() {
            if (Object.isFrozen(this))
              return;
            const A2 = this.outputs.indexOf(this.changeOutput);
            if (-1 === A2)
              return void (this.changeOutput = void 0);
            this.changeOutput.satoshis = 0;
            const t2 = this.fee - Math.ceil(C(this).length * this.feePerKb / 1e3);
            t2 >= 1 ? this.changeOutput.satoshis = t2 : (this.outputs.splice(A2, 1), this.changeOutput = void 0);
          }
          setFeePerKb(A2) {
            if (Object.isFrozen(this))
              throw new Error("transaction finalized");
            return G(A2), this.feePerKb = A2, this;
          }
        }
        class y {
          constructor(A2, t2, e2 = [], g2 = 0, n2) {
            if (!B(A2) || 64 !== A2.length)
              throw new Error("bad txid: " + A2);
            if (!Number.isInteger(t2) || t2 < 0)
              throw new Error("bad vout: " + t2);
            this.txid = A2, this.vout = t2, this.script = h.from(e2), this.sequence = function(A3) {
              if (!Number.isInteger(A3) || A3 < 0 || A3 > 4294967295)
                throw new Error("bad sequence: " + A3);
              return A3;
            }(g2), n2 instanceof d ? this.output = n2 : "object" == typeof n2 && n2 && (this.output = new d(n2.script, n2.satoshis));
          }
        }
        class d {
          constructor(A2, t2, e2) {
            this.script = h.from(A2), this.satoshis = G(t2), this.tx = e2;
          }
          get txid() {
            return this.tx.hash;
          }
          get vout() {
            return this.tx.outputs.indexOf(this);
          }
        }
        function G(A2) {
          if (!Number.isInteger(A2) || A2 < 0 || A2 > Number.MAX_SAFE_INTEGER)
            throw new Error("bad satoshis: " + A2);
          return A2;
        }
        p.Input = y, p.Output = d, A.exports = p;
      }, function(A, t, e) {
        const g = e(32), n = e(16), o = e(38);
        A.exports = function(A2, t2, e2, r, I, B, i = 1) {
          const s = n(A2, t2, e2, r, i |= 64), E = o(s, I, B), Q = g(E);
          return Array.from([...Q, i]);
        };
      }, function(A, t) {
        A.exports = function(A2, t2) {
          const e = 128 & t2.r[0] ? [0].concat(Array.from(t2.r)) : t2.r, g = 128 & t2.s[0] ? [0].concat(Array.from(t2.s)) : t2.s, n = e.length, o = g.length, r = 2 + n + 2 + o, I = new Uint8Array(r + 2);
          I[0] = 48, I[1] = r, I[2] = 2, I[3] = n, I.set(e, 4), I[n + 4] = 2, I[n + 5] = o, I.set(g, n + 6), A2.write(I);
        };
      }, function(A, t, e) {
        const g = e(33);
        A.exports = async function(A2, t2, e2, n, o) {
          return await g(A2, t2, e2, n, o, true);
        };
      }, function(A, t, e) {
        const { BN_SIZE: g, PT_SIZE: n, getMemoryBuffer: o, getEcdsaExports: r, writeBN: I, readBN: B } = e(5);
        A.exports = function(A2, t2, e2, i) {
          const s = o(), E = s.length - g, Q = E - g, C = Q - g, c = C - n, a = c - g, u = a - g, h = r().ecdsa_sign;
          return I(s, E, A2), I(s, Q, t2), I(s, C, e2), I(s, c, i.x), I(s, c + g, i.y), h(a, u, E, Q, C, c) ? null : { r: B(s, a), s: B(s, u) };
        };
      }, function(A, t) {
        A.exports = function(A2, t2) {
          if (A2.length !== t2.length)
            return false;
          for (let e = 0; e < A2.length; e++)
            if (A2[e] !== t2[e])
              return false;
          return true;
        };
      }, function(A, t, e) {
        const g = e(39), n = e(67);
        A.exports = function(A2) {
          const t2 = new g(A2), e2 = n(t2);
          return t2.close(), e2;
        };
      }, function(A, t, e) {
        const g = e(0), n = e(40), o = e(68), r = e(69);
        A.exports = function(A2) {
          const t2 = n(A2), e2 = r(A2), I = [];
          for (let t3 = 0; t3 < e2; t3++) {
            const t4 = g(new Uint8Array(A2.read(32)).reverse()), e3 = n(A2), o2 = r(A2), B2 = { txid: t4, vout: e3, script: A2.read(o2), sequence: n(A2) };
            I.push(B2);
          }
          const B = r(A2), i = [];
          for (let t3 = 0; t3 < B; t3++) {
            const t4 = o(A2), e3 = r(A2), g2 = { satoshis: t4, script: A2.read(e3) };
            i.push(g2);
          }
          return { version: t2, inputs: I, outputs: i, locktime: n(A2) };
        };
      }, function(A, t) {
        A.exports = function(A2) {
          A2.checkRemaining(8);
          const { buffer: t2, pos: e } = A2;
          A2.pos += 8;
          let g = t2[e + 7];
          return g = g << 8 | t2[e + 6], g = g << 8 | t2[e + 5], g = 256 * g + t2[e + 4], g = 256 * g + t2[e + 3], g = 256 * g + t2[e + 2], g = 256 * g + t2[e + 1], g = 256 * g + t2[e + 0], g;
        };
      }, function(A, t) {
        A.exports = function(A2) {
          const { buffer: t2, pos: e } = A2;
          A2.checkRemaining(1);
          const g = t2[e];
          if (g <= 252)
            return A2.pos += 1, g;
          if (253 === g)
            return A2.checkRemaining(3), A2.pos += 3, 256 * t2[e + 2] + t2[e + 1];
          if (254 === g)
            return A2.checkRemaining(5), A2.pos += 5, 16777216 * t2[e + 4] + 65536 * t2[e + 3] + 256 * t2[e + 2] + t2[e + 1];
          A2.checkRemaining(9), A2.pos += 9;
          const n = 72057594037927940 * t2[e + 8] + 281474976710656 * t2[e + 7] + 1099511627776 * t2[e + 6] + 4294967296 * t2[e + 5] + 16777216 * t2[e + 4] + 65536 * t2[e + 3] + 256 * t2[e + 2] + t2[e + 1];
          if (n > Number.MAX_SAFE_INTEGER)
            throw new Error("varint too large");
          return n;
        };
      }, function(A, t, e) {
        const g = e(1), n = e(34), o = e(35), r = e(36);
        A.exports = function(A2, t2) {
          const e2 = void 0 === t2.version ? 1 : t2.version, I = t2.inputs || [], B = t2.outputs || [], i = void 0 === t2.locktime ? 0 : t2.locktime;
          n(A2, e2), r(A2, I.length);
          for (const t3 of I) {
            const e3 = void 0 === t3.script ? [] : t3.script, o2 = void 0 === t3.sequence ? 4294967295 : t3.sequence;
            A2.write(g(t3.txid).reverse()), n(A2, t3.vout), r(A2, e3.length), A2.write(e3), n(A2, o2);
          }
          r(A2, B.length);
          for (const t3 of B)
            o(A2, t3.satoshis), r(A2, t3.script.length), A2.write(t3.script);
          return n(A2, i), this;
        };
      }, function(A, t, e) {
        const g = e(0), n = e(4);
        A.exports = function(A2) {
          return g(n(A2).reverse());
        };
      }, function(A, t, e) {
        const g = e(41), n = e(42);
        A.exports = function(A2, t2, e2) {
          const o = void 0 !== A2.version ? A2.version : 1, r = void 0 !== A2.locktime ? A2.locktime : 0;
          if (1 !== o)
            throw new Error("bad version");
          if (r < 0 || r > 4294967295 || !Number.isInteger(r))
            throw new Error("bad locktime");
          if (0 === A2.inputs.length)
            throw new Error("no inputs");
          if (0 === A2.outputs.length)
            throw new Error("no outputs");
          if (t2.reduce((A3, t3) => A3 + t3.satoshis, 0) - A2.outputs.reduce((A3, t3) => A3 + t3.satoshis, 0) < g(A2).length * e2 / 1e3)
            throw new Error("insufficient priority");
          A2.inputs.forEach((t3, e3) => {
            A2.inputs.slice(e3 + 1).forEach((A3) => {
              if (t3.txid === A3.txid && t3.vout === A3.vout)
                throw new Error("duplicate input");
            });
          }), A2.inputs.forEach((e3, g2) => {
            n(e3.script, t2[g2].script, A2, g2, t2[g2].satoshis);
          });
        };
      }, function(A, t, e) {
        const g = e(0), n = e(1), o = e(15), r = e(74), I = e(76), B = e(78), i = e(79), s = e(17), E = e(25), Q = e(46), C = e(47), c = e(37), a = 103, u = 104, h = { async: false, trace: true };
        const f2 = [255, 127, 63, 31, 15, 7, 3, 1];
        const w = [255, 254, 252, 248, 240, 224, 192, 128];
        A.exports = function(A2, t2, e2, l, D, p = {}) {
          const { async: y, trace: d } = { ...h, ...p }, G = [], N = [], m = [], b = [], k = [];
          let S = 0, Y = false;
          function F(A3, t3 = true) {
            if (d && A3 >= 0) {
              const { opcode: e3 } = G[A3];
              k.push([{ opcode: e3, exec: t3 }, [...N], [...m]]);
            }
          }
          function R(A3 = null) {
            k.length && F(k.length), !A3 && b.length && (A3 = new Error("ENDIF missing"));
            const t3 = !A3 && !!N.length && N[N.length - 1].some((A4) => A4);
            return A3 || t3 || (A3 = new Error("top of stack is false")), { success: t3, error: A3, chunks: G, stack: N, stackTrace: k };
          }
          try {
            let M2 = function() {
              if (b.length > 0 && !b[b.length - 1]) {
                let A4 = 0, t3 = 0;
                for (; v < G.length; ) {
                  const e3 = G[v].opcode, g2 = G[v - 1].opcode, n2 = 99 === g2 && 0 === A4 || [a, u].includes(g2) && 0 === t3;
                  if (F(v - 1, n2), t3 = A4, 99 === e3 || 100 === e3)
                    A4++;
                  else if (e3 === u) {
                    if (0 === A4)
                      break;
                    A4--;
                  } else if (e3 === a && !A4)
                    break;
                  v++;
                }
                if (v >= G.length)
                  return void (Y = true);
              } else
                F(v - 1);
              const A3 = G[v++];
              if (A3.buf)
                N.push(A3.buf);
              else
                switch (A3.opcode) {
                  case 79:
                    N.push([129]);
                    break;
                  case 0:
                    N.push([]);
                    break;
                  case 81:
                    N.push([1]);
                    break;
                  case 82:
                    N.push([2]);
                    break;
                  case 83:
                    N.push([3]);
                    break;
                  case 84:
                    N.push([4]);
                    break;
                  case 85:
                    N.push([5]);
                    break;
                  case 86:
                    N.push([6]);
                    break;
                  case 87:
                    N.push([7]);
                    break;
                  case 88:
                    N.push([8]);
                    break;
                  case 89:
                    N.push([9]);
                    break;
                  case 90:
                    N.push([10]);
                    break;
                  case 91:
                    N.push([11]);
                    break;
                  case 92:
                    N.push([12]);
                    break;
                  case 93:
                    N.push([13]);
                    break;
                  case 94:
                    N.push([14]);
                    break;
                  case 95:
                    N.push([15]);
                    break;
                  case 96:
                    N.push([16]);
                    break;
                  case 97:
                    break;
                  case 99:
                    b.push(U());
                    break;
                  case 100:
                    b.push(!U());
                    break;
                  case a:
                    if (!b.length)
                      throw new Error("ELSE found without matching IF");
                    b[b.length - 1] = !b[b.length - 1];
                    break;
                  case u:
                    if (!b.length)
                      throw new Error("ENDIF found without matching IF");
                    b.pop();
                    break;
                  case 105:
                    if (!U())
                      throw new Error("OP_VERIFY failed");
                    break;
                  case 106:
                    Y = true;
                    break;
                  case 107:
                    m.push(d2());
                    break;
                  case 108:
                    N.push(k2());
                    break;
                  case 115:
                    {
                      const A4 = d2();
                      N.push(A4), A4.some((A5) => A5) && N.push(Array.from(A4));
                    }
                    break;
                  case 116:
                    N.push(O(BigInt(N.length)));
                    break;
                  case 117:
                    d2();
                    break;
                  case 118:
                    {
                      const A4 = d2();
                      N.push(A4), N.push(Array.from(A4));
                    }
                    break;
                  case 119:
                    {
                      const A4 = d2();
                      d2(), N.push(A4);
                    }
                    break;
                  case 120:
                    {
                      const A4 = d2(), t3 = d2();
                      N.push(t3, A4, t3);
                    }
                    break;
                  case 121:
                    {
                      const A4 = L(d2());
                      if (A4.neg || A4.num >= N.length)
                        throw new Error("OP_PICK failed, out of range");
                      N.push(Array.from(N[N.length - Number(A4.num) - 1]));
                    }
                    break;
                  case 122:
                    {
                      const A4 = L(d2());
                      if (A4.neg || Number(A4.num) >= N.length)
                        throw new Error("OP_ROLL failed, out of range");
                      N.push(N.splice(N.length - Number(A4.num) - 1, 1)[0]);
                    }
                    break;
                  case 123:
                    {
                      const A4 = d2(), t3 = d2(), e3 = d2();
                      N.push(t3, A4, e3);
                    }
                    break;
                  case 124:
                    {
                      const A4 = d2(), t3 = d2();
                      N.push(A4, t3);
                    }
                    break;
                  case 125:
                    {
                      const A4 = d2(), t3 = d2();
                      N.push(A4, t3, A4);
                    }
                    break;
                  case 109:
                    d2(), d2();
                    break;
                  case 110:
                    {
                      const A4 = d2(), t3 = d2();
                      N.push(t3, A4, t3, A4);
                    }
                    break;
                  case 111:
                    {
                      const A4 = d2(), t3 = d2(), e3 = d2();
                      N.push(e3, t3, A4, e3, t3, A4);
                    }
                    break;
                  case 112:
                    {
                      const A4 = d2(), t3 = d2(), e3 = d2(), g2 = d2();
                      N.push(g2, e3, t3, A4, g2, e3);
                    }
                    break;
                  case 113:
                    {
                      const A4 = d2(), t3 = d2(), e3 = d2(), g2 = d2(), n2 = d2(), o2 = d2();
                      N.push(g2, e3, t3, A4, o2, n2);
                    }
                    break;
                  case 114:
                    {
                      const A4 = d2(), t3 = d2(), e3 = d2(), g2 = d2();
                      N.push(t3, A4, g2, e3);
                    }
                    break;
                  case 126:
                    {
                      const A4 = d2(), t3 = d2();
                      N.push(Array.from([...t3, ...A4]));
                    }
                    break;
                  case 127:
                    {
                      const A4 = L(d2()), t3 = d2();
                      if (A4.neg || Number(A4.num) > t3.length)
                        throw new Error("OP_SPLIT failed, out of range");
                      N.push(t3.slice(0, Number(A4.num)), t3.slice(Number(A4.num)));
                    }
                    break;
                  case 130:
                    {
                      const A4 = d2();
                      N.push(A4), N.push(O(A4.length));
                    }
                    break;
                  case 131:
                    N.push(d2().map((A4) => 255 ^ A4));
                    break;
                  case 132:
                    {
                      const A4 = d2(), t3 = d2();
                      if (A4.length !== t3.length)
                        throw new Error("OP_AND failed, different sizes");
                      N.push(A4.map((A5, e3) => A5 & t3[e3]));
                    }
                    break;
                  case 133:
                    {
                      const A4 = d2(), t3 = d2();
                      if (A4.length !== t3.length)
                        throw new Error("OP_OR failed, different sizes");
                      N.push(A4.map((A5, e3) => A5 | t3[e3]));
                    }
                    break;
                  case 134:
                    {
                      const A4 = d2(), t3 = d2();
                      if (A4.length !== t3.length)
                        throw new Error("OP_XOR failed, different sizes");
                      N.push(A4.map((A5, e3) => A5 ^ t3[e3]));
                    }
                    break;
                  case 135:
                    {
                      const A4 = d2(), t3 = d2(), e3 = A4.length === t3.length && !A4.some((A5, e4) => A5 !== t3[e4]);
                      N.push(O(e3 ? 1 : 0));
                    }
                    break;
                  case 136:
                    {
                      const A4 = d2(), t3 = d2();
                      if (!(A4.length === t3.length && !A4.some((A5, e3) => A5 !== t3[e3])))
                        throw new Error(`'OP_EQUALVERIFY failed"`);
                    }
                    break;
                  case 152:
                    {
                      const A4 = L(d2());
                      if (A4.neg)
                        throw new Error("OP_LSHIFT failed, n negative");
                      N.push(function(A5, t3) {
                        const e3 = t3 % 8, g2 = Math.floor(t3 / 8), n2 = f2[e3], o2 = 255 ^ n2, r2 = Array.from(A5.length).fill(0);
                        for (let t4 = A5.length - 1; t4 >= 0; t4--) {
                          const I2 = t4 - g2;
                          if (I2 >= 0) {
                            let g3 = A5[t4] & n2;
                            g3 <<= e3, r2[I2] |= g3;
                          }
                          if (I2 - 1 >= 0) {
                            let g3 = A5[t4] & o2;
                            g3 >>= (8 - e3) % 8, r2[I2 - 1] |= g3;
                          }
                        }
                        return r2;
                      }(d2(), Number(A4.num)));
                    }
                    break;
                  case 153:
                    {
                      const A4 = L(d2());
                      if (A4.neg)
                        throw new Error("OP_RSHIFT failed, n negative");
                      N.push(function(A5, t3) {
                        const e3 = t3 % 8, g2 = Math.floor(t3 / 8), n2 = w[e3], o2 = 255 ^ n2, r2 = new Array(A5.length).fill(0);
                        for (let t4 = 0; t4 < A5.length; t4++) {
                          const I2 = t4 + g2;
                          if (I2 < A5.length) {
                            let g3 = A5[t4] & n2;
                            g3 >>= e3, r2[I2] |= g3;
                          }
                          if (I2 + 1 < A5.length) {
                            let g3 = A5[t4] & o2;
                            g3 <<= (8 - e3) % 8, r2[I2 + 1] |= g3;
                          }
                        }
                        return r2;
                      }(d2(), Number(A4.num)));
                    }
                    break;
                  case 139:
                    N.push(O(P(L(d2()), { num: BigInt(1), neg: false })));
                    break;
                  case 140:
                    N.push(O(P(L(d2()), { num: BigInt(1), neg: true })));
                    break;
                  case 143:
                    {
                      const A4 = L(d2());
                      N.push(O({ num: A4.num, neg: !A4.neg }));
                    }
                    break;
                  case 144:
                    {
                      const A4 = L(d2());
                      N.push(O(A4.num));
                    }
                    break;
                  case 145:
                    {
                      const A4 = L(d2());
                      N.push(A4.num === BigInt(0) ? O(1) : O(0));
                    }
                    break;
                  case 146:
                    {
                      const A4 = L(d2());
                      N.push(A4.num === BigInt(0) ? O(0) : O(1));
                    }
                    break;
                  case 147:
                    N.push(O(P(L(d2()), L(d2()))));
                    break;
                  case 148:
                    N.push(O(K(L(d2()), L(d2()))));
                    break;
                  case 149:
                    {
                      const A4 = L(d2()), t3 = L(d2());
                      N.push(O(t3.num * A4.num, t3.neg !== A4.neg));
                    }
                    break;
                  case 150:
                    {
                      const A4 = L(d2()), t3 = L(d2());
                      if (A4.num === BigInt(0))
                        throw new Error("OP_DIV failed, divide by 0");
                      N.push(O(t3.num / A4.num, t3.neg !== A4.neg));
                    }
                    break;
                  case 151:
                    {
                      const A4 = L(d2()), t3 = L(d2());
                      if (A4.num === BigInt(0))
                        throw new Error("OP_DIV failed, divide by 0");
                      N.push(O(t3.num % A4.num, t3.neg));
                    }
                    break;
                  case 154:
                    {
                      const A4 = U(), t3 = U();
                      N.push(O(A4 && t3 ? 1 : 0));
                    }
                    break;
                  case 155:
                    {
                      const A4 = U(), t3 = U();
                      N.push(O(A4 || t3 ? 1 : 0));
                    }
                    break;
                  case 156:
                    {
                      const A4 = L(d2()), t3 = L(d2());
                      N.push(O(t3.num === A4.num && t3.neg === A4.neg ? 1 : 0));
                    }
                    break;
                  case 157:
                    {
                      const A4 = L(d2()), t3 = L(d2());
                      if (t3.num !== A4.num || t3.neg !== A4.neg)
                        throw new Error("OP_NUMEQUALVERIFY failed");
                    }
                    break;
                  case 158:
                    {
                      const A4 = L(d2()), t3 = L(d2());
                      N.push(O(t3.num !== A4.num || t3.neg !== A4.neg ? 1 : 0));
                    }
                    break;
                  case 159:
                    N.push(O(x(L(d2()), L(d2())) ? 1 : 0));
                    break;
                  case 160:
                    N.push(O(J(L(d2()), L(d2())) ? 1 : 0));
                    break;
                  case 161:
                    N.push(O(q(L(d2()), L(d2())) ? 1 : 0));
                    break;
                  case 162:
                    N.push(O(H(L(d2()), L(d2())) ? 1 : 0));
                    break;
                  case 163:
                    {
                      const A4 = L(d2()), t3 = L(d2());
                      N.push(O(x(A4, t3) ? t3 : A4));
                    }
                    break;
                  case 164:
                    {
                      const A4 = L(d2()), t3 = L(d2());
                      N.push(O(J(A4, t3) ? t3 : A4));
                    }
                    break;
                  case 165:
                    {
                      const A4 = L(d2()), t3 = L(d2()), e3 = L(d2());
                      N.push(O(H(t3, e3) && x(A4, e3) ? 1 : 0));
                    }
                    break;
                  case 129:
                    N.push(O(L(d2())));
                    break;
                  case 128:
                    {
                      const A4 = L(d2()), t3 = d2(), e3 = L(t3);
                      if (A4.neg || A4.num < BigInt(1) || A4.num < BigInt(t3.length) || A4.num > BigInt(2147483647))
                        throw new Error("OP_NUM2BIN failed, out of range");
                      const g2 = Array.from(n(BigInt(e3.num).toString(16)));
                      for (let t4 = g2.length; t4 < Number(A4.num); t4++)
                        g2.push(0);
                      128 & g2[g2.length - 1] && g2.push(0), e3.neg && (g2[g2.length - 1] |= e3.neg ? 128 : 0), N.push(g2);
                    }
                    break;
                  case 166:
                    return y ? B(d2()).then((A4) => N.push(A4)) : void N.push(Q(d2()));
                  case 167:
                    return y ? i(d2()).then((A4) => N.push(A4)) : void N.push(C(d2()));
                  case 168:
                    return y ? s(d2()).then((A4) => N.push(A4)) : void N.push(c(d2()));
                  case 169:
                    return y ? s(d2()).then((A4) => B(A4)).then((A4) => N.push(A4)) : void N.push(Q(c(d2())));
                  case 170:
                    return y ? s(d2()).then((A4) => s(A4)).then((A4) => N.push(A4)) : void N.push(c(c(d2())));
                  case 171:
                    S = v + 1;
                    break;
                  case 172:
                  case 173:
                    {
                      const g2 = d2(), n2 = E(g2), o2 = d2(), B2 = t2.slice(S), i2 = (t3) => {
                        if (172 === A3.opcode)
                          N.push(O(t3 ? 1 : 0));
                        else if (!t3)
                          throw new Error("OP_CHECKSIGVERIFY failed");
                      };
                      if (y)
                        return I(e2, l, o2, n2, B2, D).then(i2);
                      i2(r(e2, l, o2, n2, B2, D));
                    }
                    break;
                  case 174:
                  case 175:
                    {
                      const g2 = L(d2());
                      if (g2.neg)
                        throw new Error("OP_CHECKMULTISIG failed, out of range");
                      const n2 = [];
                      for (let A4 = 0; A4 < Number(g2.num); A4++) {
                        const A5 = E(d2());
                        n2.push(A5);
                      }
                      const o2 = L(d2());
                      if (o2.neg || o2.num > g2.num)
                        throw new Error("OP_CHECKMULTISIG failed, out of range");
                      const B2 = [];
                      for (let A4 = 0; A4 < Number(o2.num); A4++)
                        B2.push(d2());
                      d2();
                      let i2 = 0, s2 = 0, Q2 = true;
                      const C2 = t2.slice(S), c2 = (t3) => {
                        if (174 === A3.opcode)
                          N.push(O(t3 ? 1 : 0));
                        else if (!t3)
                          throw new Error("OP_CHECKMULTISIGVERIFY failed");
                      };
                      if (y)
                        return (async () => {
                          for (; s2 < B2.length; ) {
                            if (i2 === n2.length) {
                              Q2 = false;
                              break;
                            }
                            await I(e2, l, B2[s2], n2[i2], C2, D) && s2++, i2++;
                          }
                          return Q2;
                        })().then(c2);
                      for (; s2 < B2.length; ) {
                        if (i2 === n2.length) {
                          Q2 = false;
                          break;
                        }
                        r(e2, l, B2[s2], n2[i2], C2, D) && s2++, i2++;
                      }
                      c2(Q2);
                    }
                    break;
                  case 176:
                  case 177:
                  case 178:
                  case 179:
                  case 180:
                  case 181:
                  case 182:
                  case 183:
                  case 184:
                  case 185:
                    break;
                  default:
                    throw new Error("reserved opcode: " + A3.opcode);
                }
            };
            var M = M2;
            const h2 = o(A2), p2 = o(t2);
            if (h2.some((A3) => A3.opcode && A3.opcode > 96))
              throw new Error("non-push data in unlock script");
            G.push(...h2), G.push(...p2);
            const d2 = () => {
              if (!N.length)
                throw new Error("stack empty");
              return N.pop();
            }, k2 = () => {
              if (!m.length)
                throw new Error("alt stack empty");
              return m.pop();
            }, U = () => d2().some((A3) => A3), O = (A3, t3) => {
              if ("object" == typeof A3 && (t3 = A3.neg, A3 = A3.num), BigInt(A3) === BigInt(0))
                return [];
              const e3 = Array.from(n(BigInt(A3).toString(16))).reverse();
              return 128 & e3[e3.length - 1] && e3.push(0), t3 && (e3[e3.length - 1] |= 128), e3;
            }, L = (A3) => {
              if (!A3.length)
                return { num: BigInt(0), neg: false };
              const t3 = !!(128 & A3[A3.length - 1]);
              A3[A3.length - 1] &= 127;
              return { num: BigInt("0x" + g(Array.from(A3).reverse())), neg: t3 };
            }, P = (A3, t3) => A3.neg === t3.neg ? { num: A3.num + t3.num, neg: A3.neg } : A3.num > t3.num ? { num: A3.num - t3.num, neg: A3.neg } : { num: t3.num - A3.num, neg: t3.neg }, K = (A3, t3) => P(t3, { num: A3.num, neg: !A3.neg }), x = (A3, t3) => t3.neg !== A3.neg ? t3.neg : t3.neg && t3.num > A3.num || !t3.neg && t3.num < A3.num, J = (A3, t3) => t3.neg !== A3.neg ? !t3.neg : t3.neg && t3.num < A3.num || !t3.neg && t3.num > A3.num, q = (A3, t3) => t3.neg !== A3.neg ? t3.neg : t3.neg && t3.num >= A3.num || !t3.neg && t3.num <= A3.num, H = (A3, t3) => t3.neg !== A3.neg ? !t3.neg : t3.neg && t3.num <= A3.num || !t3.neg && t3.num >= A3.num;
            let v = 0;
            if (y)
              return (async () => {
                try {
                  for (; v < G.length && !Y; )
                    await M2();
                  return R();
                } catch (A3) {
                  const t3 = R(A3);
                  return Promise.resolve(t3);
                }
              })();
            for (; v < G.length && !Y; )
              M2();
            return R();
          } catch (A3) {
            const t3 = R(A3);
            return y ? Promise.resolve(t3) : t3;
          }
        };
      }, function(A, t, e) {
        const g = e(43), n = e(16), o = e(44);
        A.exports = function(A2, t2, e2, r, I, B) {
          const i = e2.slice(0, e2.length - 1), s = e2[e2.length - 1], E = n(A2, t2, I, B, s);
          return o(g(i), E, r);
        };
      }, function(A, t) {
        A.exports = function(A2) {
          const [t2, e, g, n] = A2.read(4), o = A2.read(n), [r, I] = A2.read(2), B = A2.read(I);
          if (48 !== t2 || 2 !== g || 2 !== r || e !== n + I + 4 || 128 & o[0] || 128 & B[0])
            throw new Error("bad der");
          return { r: 0 === o[0] ? o.slice(1) : o, s: 0 === B[0] ? B.slice(1) : B };
        };
      }, function(A, t, e) {
        const g = e(43), n = e(45), o = e(77);
        A.exports = async function(A2, t2, e2, r, I, B) {
          const i = e2.slice(0, e2.length - 1), s = e2[e2.length - 1], E = await n(A2, t2, I, B, s);
          try {
            return await o(g(i), E, r);
          } catch (A3) {
            return false;
          }
        };
      }, function(A, t, e) {
        const g = e(6), n = e(44);
        A.exports = g(n);
      }, function(A, t, e) {
        const g = e(6), n = e(46);
        A.exports = g(n);
      }, function(A, t, e) {
        const g = "undefined" != typeof window && window.crypto && window.crypto.subtle;
        let n = null;
        if (g)
          n = async (A2) => new Uint8Array(await g.digest("SHA-1", new Uint8Array(A2)));
        else {
          n = e(6)(e(47));
        }
        A.exports = n;
      }, function(A, t, e) {
        const g = e(6), n = e(38);
        A.exports = g(n);
      }, function(A, t, e) {
        A.exports = { Address: e(8), BufferReader: e(39), BufferWriter: e(2), PrivateKey: e(10), PublicKey: e(12), Script: e(14), Transaction: e(60) };
      }, function(A, t, e) {
        A.exports = { base58Chars: e(19), opcodes: e(31), sighashFlags: e(83) };
      }, function(A, t) {
        A.exports = { SIGHASH_ALL: 1, SIGHASH_NONE: 2, SIGHASH_SINGLE: 3, SIGHASH_ANYONECANPAY: 128, SIGHASH_FORKID: 64 };
      }, function(A, t, e) {
        A.exports = { areBuffersEqual: e(65), asyncify: e(6), calculatePublicKeyHash: e(52), calculatePublicKey: e(54), calculateTxid: e(71), createP2PKHLockScript: e(28), createP2PKHUnlockScript: e(85), decodeAddress: e(50), decodeASM: e(59), decodeBase58Check: e(22), decodeBase58: e(51), decodeBase64: e(21), decodeDER: e(43), decodeHex: e(1), decodePublicKey: e(25), decodeScriptChunks: e(15), decodeTx: e(66), decodeWIF: e(57), ecdsaSignAsync: e(80), ecdsaSignWithK: e(64), ecdsaSign: e(38), ecdsaVerifyAsync: e(77), ecdsaVerify: e(44), encodeAddress: e(48), encodeASM: e(58), encodeBase58Check: e(18), encodeBase58: e(49), encodeDER: e(32), encodeHex: e(0), encodePublicKey: e(23), encodePushData: e(86), encodeTx: e(41), encodeWIF: e(56), evalScript: e(73), extractP2PKHLockScriptPubkeyhash: e(30), generatePrivateKey: e(27), generateRandomData: e(55), generateTxSignatureAsync: e(87), generateTxSignature: e(61), isBuffer: e(3), isHex: e(24), isP2PKHLockScript: e(29), preimageAsync: e(63), preimage: e(33), readBlockHeader: e(88), readDER: e(75), readTx: e(67), readU32LE: e(40), readU64LE: e(68), readVarint: e(69), ripemd160Async: e(78), ripemd160: e(46), sha1Async: e(79), sha1: e(47), sha256Async: e(17), sha256: e(37), sha256d: e(4), sha256ripemd160: e(53), sighashAsync: e(45), sighash: e(16), verifyPoint: e(26), verifyPrivateKey: e(13), verifyScriptAsync: e(89), verifyScript: e(42), verifyTxSignatureAsync: e(76), verifyTxSignature: e(74), verifyTx: e(72), writeDER: e(62), writePushData: e(11), writeTx: e(70), writeU32LE: e(34), writeU64LE: e(35), writeVarint: e(36) };
      }, function(A, t, e) {
        const g = e(2), n = e(11);
        A.exports = function(A2, t2) {
          const e2 = new g();
          return n(e2, A2), n(e2, t2), e2.toBuffer();
        };
      }, function(A, t, e) {
        const g = e(2), n = e(11);
        A.exports = function(A2) {
          const t2 = new g();
          return n(t2, A2), t2.toBuffer();
        };
      }, function(A, t, e) {
        const g = e(32), n = e(45), o = e(80);
        A.exports = async function(A2, t2, e2, r, I, B, i = 1) {
          i |= 64;
          const s = await n(A2, t2, e2, r, i), E = await o(s, I, B), Q = g(E);
          return Array.from([...Q, i]);
        };
      }, function(A, t, e) {
        const g = e(40);
        A.exports = function(A2) {
          return { version: g(A2), prevBlock: A2.read(32), merkleRoot: A2.read(32), timestamp: g(A2), bits: g(A2), nonce: g(A2) };
        };
      }, function(A, t, e) {
        const g = e(42);
        A.exports = function(A2, t2, e2, n, o) {
          return g(A2, t2, e2, n, o, true);
        };
      }]);
    });
  }
});

// dep:stag-relayx
init_shim();

// node_modules/.pnpm/stag-relayx@0.2.8/node_modules/stag-relayx/dist/esm/index.js
init_shim();

// node_modules/.pnpm/stag-relayx@0.2.8/node_modules/stag-relayx/dist/esm/onchain.js
var onchain_exports = {};
__export(onchain_exports, {
  default: () => onchain_default,
  findAll: () => findAll,
  findOne: () => findOne,
  findOrCreate: () => findOrCreate,
  post: () => post
});
init_shim();

// node_modules/.pnpm/stag-relayx@0.2.8/node_modules/stag-relayx/dist/esm/actor.js
init_shim();
var bsv = __toESM(require_bsv_module());

// node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/index.js
init_shim();

// node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/v1.js
init_shim();

// node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/rng.js
init_shim();
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/stringify.js
init_shim();

// node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/validate.js
init_shim();

// node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/regex.js
init_shim();
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

// node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

// node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/v3.js
init_shim();

// node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/v35.js
init_shim();

// node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/parse.js
init_shim();
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default = parse;

// node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
var URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return unsafeStringify(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

// node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/md5.js
init_shim();
function md5(bytes) {
  if (typeof bytes === "string") {
    const msg = unescape(encodeURIComponent(bytes));
    bytes = new Uint8Array(msg.length);
    for (let i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
function md5ToHexEncodedArray(input) {
  const output = [];
  const length32 = input.length * 32;
  const hexTab = "0123456789abcdef";
  for (let i = 0; i < length32; i += 8) {
    const x = input[i >> 5] >>> i % 32 & 255;
    const hex = parseInt(hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15), 16);
    output.push(hex);
  }
  return output;
}
function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(x, len) {
  x[len >> 5] |= 128 << len % 32;
  x[getOutputLength(len) - 1] = len;
  let a = 1732584193;
  let b = -271733879;
  let c = -1732584194;
  let d = 271733878;
  for (let i = 0; i < x.length; i += 16) {
    const olda = a;
    const oldb = b;
    const oldc = c;
    const oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }
  return [a, b, c, d];
}
function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }
  const length8 = input.length * 8;
  const output = new Uint32Array(getOutputLength(length8));
  for (let i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 255) << i % 32;
  }
  return output;
}
function safeAdd(x, y) {
  const lsw = (x & 65535) + (y & 65535);
  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}
function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}
function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}
function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}
var md5_default = md5;

// node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/v3.js
var v3 = v35("v3", 48, md5_default);

// node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/v4.js
init_shim();

// node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/native.js
init_shim();
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};

// node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/v5.js
init_shim();

// node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/sha1.js
init_shim();
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;
    case 1:
      return x ^ y ^ z;
    case 2:
      return x & y ^ x & z ^ y & z;
    case 3:
      return x ^ y ^ z;
  }
}
function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}
function sha1(bytes) {
  const K = [1518500249, 1859775393, 2400959708, 3395469782];
  const H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof bytes === "string") {
    const msg = unescape(encodeURIComponent(bytes));
    bytes = [];
    for (let i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(128);
  const l = bytes.length / 4 + 2;
  const N = Math.ceil(l / 16);
  const M = new Array(N);
  for (let i = 0; i < N; ++i) {
    const arr = new Uint32Array(16);
    for (let j = 0; j < 16; ++j) {
      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
    }
    M[i] = arr;
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (let i = 0; i < N; ++i) {
    const W = new Uint32Array(80);
    for (let t = 0; t < 16; ++t) {
      W[t] = M[i][t];
    }
    for (let t = 16; t < 80; ++t) {
      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }
    let a = H[0];
    let b = H[1];
    let c = H[2];
    let d = H[3];
    let e = H[4];
    for (let t = 0; t < 80; ++t) {
      const s = Math.floor(t / 20);
      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }
    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }
  return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
}
var sha1_default = sha1;

// node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/v5.js
var v5 = v35("v5", 80, sha1_default);

// node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/nil.js
init_shim();

// node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/version.js
init_shim();

// node_modules/.pnpm/stag-relayx@0.2.8/node_modules/stag-relayx/dist/esm/actor.js
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var authorIdentityPrefix = "15PciHG22SNLQJXMoSUaWVi7WSqc7hCfva";
var Actor = class {
  constructor({ relayone }) {
    this.relayone = relayone;
  }
  get identity() {
    return "";
  }
  publishOpReturn(opReturn) {
    return __awaiter(this, void 0, void 0, function* () {
    });
  }
  publishMessage(newMessage, sign = false) {
    return __awaiter(this, void 0, void 0, function* () {
      newMessage.nonce = newMessage.nonce || v4_default();
      const payloadToSign = JSON.stringify(Object.assign(newMessage.content, {
        _app: newMessage.app,
        _type: newMessage.type,
        _nonce: newMessage.nonce
      }));
      console.log("PAYLOAD TO SIGN", payloadToSign);
      let signature = "";
      const send = {
        to: "johngalt@relayx.io",
        amount: 1e-3,
        currency: "BSV",
        opReturn: [
          "onchain.sv",
          newMessage.app,
          newMessage.type,
          payloadToSign,
          "|",
          authorIdentityPrefix,
          "BITCOIN_ECDSA",
          this.identity,
          signature,
          "0x05"
        ]
      };
      console.log("relayone.send", send);
      return this.relayone.send(send);
    });
  }
  socialMessage(newMessage) {
    const defaultContentType = "text/markdown";
    const contentType = newMessage.contentType || "text/markdown";
    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
      const payloadToSign = newMessage.content;
      let address = new bsv.Address().fromString(this.identity);
      var signature = "";
      return this.publishOpReturn([
        "B",
        newMessage.app,
        payloadToSign,
        "|",
        authorIdentityPrefix,
        "BITCOIN_ECDSA",
        this.identity,
        signature,
        "0x05"
      ]);
      let verified = bsv.Bsm.verify(import_buffer.Buffer.from(payloadToSign, "utf8"), signature, address);
      if (!verified) {
        throw new Error("SIGNATURE NOT VERIFIED");
      }
    }));
  }
};

// node_modules/.pnpm/stag-relayx@0.2.8/node_modules/stag-relayx/dist/esm/onchain.js
var __awaiter2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var axios = require_axios();
function post(params) {
  return __awaiter2(this, void 0, void 0, function* () {
    return onchain(window.relayone).post(params);
  });
}
function findOne(params) {
  return __awaiter2(this, void 0, void 0, function* () {
    return onchain(window.relayone).findOne(params);
  });
}
function findAll(params) {
  return __awaiter2(this, void 0, void 0, function* () {
    return onchain(window.relayone).findAll(params);
  });
}
function findOrCreate(params) {
  return __awaiter2(this, void 0, void 0, function* () {
    return onchain(window.relayone).findOrCreate(params);
  });
}
var onchain = (relayone) => {
  function findOne2(params) {
    return __awaiter2(this, void 0, void 0, function* () {
      const where = {};
      if (params.app) {
        where["app"] = params.app;
      }
      if (params.author) {
        where["author"] = params.author;
      }
      if (params.type) {
        where["type"] = params.type;
      }
      if (params.content) {
        Object.keys(params.content).forEach((key) => {
          where[key] = params.content[key];
        });
      }
      const query = new URLSearchParams(where).toString();
      const url = `https://onchain.sv/api/v1/search/events`;
      console.log("SEARCH URL", url);
      const { data } = yield axios.post(url, params);
      const [event] = data.events;
      if (!event) {
        return;
      }
      return event;
    });
  }
  function findAll2(params) {
    return __awaiter2(this, void 0, void 0, function* () {
      const where = {};
      if (params.app) {
        where["app"] = params.app;
      }
      if (params.author) {
        where["author"] = params.author;
      }
      if (params.type) {
        where["type"] = params.type;
      }
      if (params.content) {
        Object.keys(params.content).forEach((key) => {
          where[key] = params.content[key];
        });
        delete params.content;
      }
      const query = Object.keys(where).reduce((query2, key) => {
        return `${query2}&${key}=${where[key]}`;
      }, "?");
      const url = `http://localhost:5200/api/v1/search/events`;
      const { data } = yield axios.post(url, params);
      return data.events;
    });
  }
  function post2(params) {
    return __awaiter2(this, void 0, void 0, function* () {
      console.log("POST", params);
      const actor = new Actor({
        relayone
      });
      console.log("actor", actor);
      const message = {
        app: params.app,
        type: params.type,
        content: params.content
      };
      console.log("actor.publishMessage", message);
      const result = yield actor.publishMessage(message);
      console.log("relayone.send.result", result);
      axios.get(`https://onchain.sv/api/v1/events/${result.txid}`).then((result2) => {
        console.log("published to onchain.sv", result2);
      }).catch((error) => {
        console.error("failed to publish to onchain.sv", error);
      });
      return {
        result
      };
    });
  }
  function findOrCreate2(params) {
    return __awaiter2(this, void 0, void 0, function* () {
      var isNew = true;
      var result = yield findOne2(params.where);
      if (result) {
        return [result, false];
      }
      if (!result) {
        yield post2(Object.assign(params.where, params.defaults));
        result = yield findOne2(params.where);
      }
      if (!result) {
        throw new Error("Failed To Find Or Create");
      }
      return [result, isNew];
    });
  }
  return {
    findOne: findOne2,
    findOrCreate: findOrCreate2,
    post: post2,
    findAll: findAll2
  };
};
var onchain_default = onchain;

// node_modules/.pnpm/stag-relayx@0.2.8/node_modules/stag-relayx/dist/esm/boost.js
init_shim();

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/index.js
init_shim();

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/axios.js
init_shim();

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/utils.js
init_shim();

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/helpers/bind.js
init_shim();
function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/utils.js
var { toString } = Object.prototype;
var { getPrototypeOf } = Object;
var kindOf = ((cache) => (thing) => {
  const str = toString.call(thing);
  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null));
var kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type;
};
var typeOfTest = (type) => (thing) => typeof thing === type;
var { isArray } = Array;
var isUndefined = typeOfTest("undefined");
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
var isArrayBuffer = kindOfTest("ArrayBuffer");
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
var isString = typeOfTest("string");
var isFunction = typeOfTest("function");
var isNumber = typeOfTest("number");
var isObject = (thing) => thing !== null && typeof thing === "object";
var isBoolean = (thing) => thing === true || thing === false;
var isPlainObject = (val) => {
  if (kindOf(val) !== "object") {
    return false;
  }
  const prototype3 = getPrototypeOf(val);
  return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};
var isDate = kindOfTest("Date");
var isFile = kindOfTest("File");
var isBlob = kindOfTest("Blob");
var isFileList = kindOfTest("FileList");
var isStream = (val) => isObject(val) && isFunction(val.pipe);
var isFormData = (thing) => {
  const pattern = "[object FormData]";
  return thing && (typeof FormData === "function" && thing instanceof FormData || toString.call(thing) === pattern || isFunction(thing.toString) && thing.toString() === pattern);
};
var isURLSearchParams = kindOfTest("URLSearchParams");
var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  let i;
  let l;
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
var _global2 = (() => {
  if (typeof globalThis !== "undefined")
    return globalThis;
  return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : _global;
})();
var isContextDefined = (context) => !isUndefined(context) && context !== _global2;
function merge() {
  const { caseless } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}
var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction(val)) {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, { allOwnKeys });
  return a;
};
var stripBOM = (content) => {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
};
var inherits = (constructor, superConstructor, props, descriptors2) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, "super", {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};
var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};
  destObj = destObj || {};
  if (sourceObj == null)
    return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};
var endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === void 0 || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};
var toArray = (thing) => {
  if (!thing)
    return null;
  if (isArray(thing))
    return thing;
  let i = thing.length;
  if (!isNumber(i))
    return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};
var isTypedArray = ((TypedArray) => {
  return (thing) => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
var forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];
  const iterator = generator.call(obj);
  let result;
  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};
var matchAll = (regExp, str) => {
  let matches;
  const arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};
var isHTMLForm = kindOfTest("HTMLFormElement");
var toCamelCase = (str) => {
  return str.toLowerCase().replace(
    /[_-\s]([a-z\d])(\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};
var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
var isRegExp = kindOfTest("RegExp");
var reduceDescriptors = (obj, reducer) => {
  const descriptors2 = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors2, (descriptor, name) => {
    if (reducer(descriptor, name, obj) !== false) {
      reducedDescriptors[name] = descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};
var freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
      return false;
    }
    const value = obj[name];
    if (!isFunction(value))
      return;
    descriptor.enumerable = false;
    if ("writable" in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error("Can not rewrite read-only method '" + name + "'");
      };
    }
  });
};
var toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};
  const define2 = (arr) => {
    arr.forEach((value) => {
      obj[value] = true;
    });
  };
  isArray(arrayOrString) ? define2(arrayOrString) : define2(String(arrayOrString).split(delimiter));
  return obj;
};
var noop = () => {
};
var toFiniteNumber = (value, defaultValue) => {
  value = +value;
  return Number.isFinite(value) ? value : defaultValue;
};
var toJSONObject = (obj) => {
  const stack = new Array(10);
  const visit = (source, i) => {
    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }
      if (!("toJSON" in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};
        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });
        stack[i] = void 0;
        return target;
      }
    }
    return source;
  };
  return visit(obj, 0);
};
var utils_default = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty,
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global2,
  isContextDefined,
  toJSONObject
};

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/core/Axios.js
init_shim();

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/helpers/buildURL.js
init_shim();

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/helpers/AxiosURLSearchParams.js
init_shim();

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/helpers/toFormData.js
init_shim();

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/core/AxiosError.js
init_shim();
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = "AxiosError";
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}
utils_default.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      message: this.message,
      name: this.name,
      description: this.description,
      number: this.number,
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      config: utils_default.toJSONObject(this.config),
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});
var prototype = AxiosError.prototype;
var descriptors = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
].forEach((code) => {
  descriptors[code] = { value: code };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, "isAxiosError", { value: true });
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype);
  utils_default.toFlatObject(error, axiosError, function filter2(obj) {
    return obj !== Error.prototype;
  }, (prop) => {
    return prop !== "isAxiosError";
  });
  AxiosError.call(axiosError, error.message, code, config, request, response);
  axiosError.cause = error;
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
var AxiosError_default = AxiosError;

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/env/classes/FormData.js
init_shim();
var import_form_data = __toESM(require_browser13(), 1);
var FormData_default = import_form_data.default;

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/helpers/toFormData.js
function isVisitable(thing) {
  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
}
function removeBrackets(key) {
  return utils_default.endsWith(key, "[]") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path)
    return key;
  return path.concat(key).map(function each(token, i) {
    token = removeBrackets(token);
    return !dots && i ? "[" + token + "]" : token;
  }).join(dots ? "." : "");
}
function isFlatArray(arr) {
  return utils_default.isArray(arr) && !arr.some(isVisitable);
}
var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});
function isSpecCompliant(thing) {
  return thing && utils_default.isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator];
}
function toFormData(obj, formData, options) {
  if (!utils_default.isObject(obj)) {
    throw new TypeError("target must be an object");
  }
  formData = formData || new (FormData_default || FormData)();
  options = utils_default.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils_default.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
  const useBlob = _Blob && isSpecCompliant(formData);
  if (!utils_default.isFunction(visitor)) {
    throw new TypeError("visitor must be a function");
  }
  function convertValue(value) {
    if (value === null)
      return "";
    if (utils_default.isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && utils_default.isBlob(value)) {
      throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
    }
    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
      return useBlob && typeof Blob === "function" ? new Blob([value]) : import_buffer.Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === "object") {
      if (utils_default.endsWith(key, "{}")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, "[]") && (arr = utils_default.toArray(value)))) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils_default.isUndefined(el) || el === null) && formData.append(
            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
            convertValue(el)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path) {
    if (utils_default.isUndefined(value))
      return;
    if (stack.indexOf(value) !== -1) {
      throw Error("Circular reference detected in " + path.join("."));
    }
    stack.push(value);
    utils_default.forEach(value, function each(el, key) {
      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
        formData,
        el,
        utils_default.isString(key) ? key.trim() : key,
        path,
        exposedHelpers
      );
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils_default.isObject(obj)) {
    throw new TypeError("data must be an object");
  }
  build(obj);
  return formData;
}
var toFormData_default = toFormData;

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/helpers/AxiosURLSearchParams.js
function encode(str) {
  const charMap = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData_default(params, this, options);
}
var prototype2 = AxiosURLSearchParams.prototype;
prototype2.append = function append(name, value) {
  this._pairs.push([name, value]);
};
prototype2.toString = function toString2(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode);
  } : encode;
  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + "=" + _encode(pair[1]);
  }, "").join("&");
};
var AxiosURLSearchParams_default = AxiosURLSearchParams;

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/helpers/buildURL.js
function encode2(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function buildURL(url, params, options) {
  if (!params) {
    return url;
  }
  const _encode = options && options.encode || encode2;
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
}

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/core/InterceptorManager.js
init_shim();
var InterceptorManager = class {
  constructor() {
    this.handlers = [];
  }
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }
  forEach(fn) {
    utils_default.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
};
var InterceptorManager_default = InterceptorManager;

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/core/dispatchRequest.js
init_shim();

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/core/transformData.js
init_shim();

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/defaults/index.js
init_shim();

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/defaults/transitional.js
init_shim();
var transitional_default = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/helpers/toURLEncodedForm.js
init_shim();

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/platform/index.js
init_shim();

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/platform/browser/index.js
init_shim();

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
init_shim();
var URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/platform/browser/classes/FormData.js
init_shim();
var FormData_default2 = FormData;

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/platform/browser/index.js
var isStandardBrowserEnv = (() => {
  let product;
  if (typeof navigator !== "undefined" && ((product = navigator.product) === "ReactNative" || product === "NativeScript" || product === "NS")) {
    return false;
  }
  return typeof window !== "undefined" && typeof document !== "undefined";
})();
var isStandardBrowserWebWorkerEnv = (() => {
  return typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
})();
var browser_default = {
  isBrowser: true,
  classes: {
    URLSearchParams: URLSearchParams_default,
    FormData: FormData_default2,
    Blob
  },
  isStandardBrowserEnv,
  isStandardBrowserWebWorkerEnv,
  protocols: ["http", "https", "file", "blob", "url", "data"]
};

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/helpers/toURLEncodedForm.js
function toURLEncodedForm(data, options) {
  return toFormData_default(data, new browser_default.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (browser_default.isNode && utils_default.isBuffer(value)) {
        this.append(key, value.toString("base64"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/helpers/formDataToJSON.js
init_shim();
function parsePropPath(name) {
  return utils_default.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
    return match[0] === "[]" ? "" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils_default.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils_default.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils_default.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils_default.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
    const obj = {};
    utils_default.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var formDataToJSON_default = formDataToJSON;

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/defaults/index.js
var DEFAULT_CONTENT_TYPE = {
  "Content-Type": void 0
};
function stringifySafely(rawValue, parser, encoder) {
  if (utils_default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils_default.trim(rawValue);
    } catch (e) {
      if (e.name !== "SyntaxError") {
        throw e;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
  transitional: transitional_default,
  adapter: ["xhr", "http"],
  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || "";
    const hasJSONContentType = contentType.indexOf("application/json") > -1;
    const isObjectPayload = utils_default.isObject(data);
    if (isObjectPayload && utils_default.isHTMLForm(data)) {
      data = new FormData(data);
    }
    const isFormData2 = utils_default.isFormData(data);
    if (isFormData2) {
      if (!hasJSONContentType) {
        return data;
      }
      return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
    }
    if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data)) {
      return data;
    }
    if (utils_default.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils_default.isURLSearchParams(data)) {
      headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
      return data.toString();
    }
    let isFileList2;
    if (isObjectPayload) {
      if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }
      if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
        const _FormData = this.env && this.env.FormData;
        return toFormData_default(
          isFileList2 ? { "files[]": data } : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType("application/json", false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    const transitional2 = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
    const JSONRequested = this.responseType === "json";
    if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === "SyntaxError") {
            throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }
    return data;
  }],
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: browser_default.classes.FormData,
    Blob: browser_default.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      "Accept": "application/json, text/plain, */*"
    }
  }
};
utils_default.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});
utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
  defaults.headers[method] = utils_default.merge(DEFAULT_CONTENT_TYPE);
});
var defaults_default = defaults;

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/core/AxiosHeaders.js
init_shim();

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/helpers/parseHeaders.js
init_shim();
var ignoreDuplicateOf = utils_default.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]);
var parseHeaders_default = (rawHeaders) => {
  const parsed = {};
  let key;
  let val;
  let i;
  rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
    i = line.indexOf(":");
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === "set-cookie") {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
    }
  });
  return parsed;
};

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/core/AxiosHeaders.js
var $internals = Symbol("internals");
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
function isValidHeaderName(str) {
  return /^[-_a-zA-Z]+$/.test(str.trim());
}
function matchHeaderValue(context, value, header, filter2) {
  if (utils_default.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (!utils_default.isString(value))
    return;
  if (utils_default.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils_default.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils_default.toCamelCase(" " + header);
  ["get", "set", "has"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
var AxiosHeaders = class {
  constructor(headers) {
    headers && this.set(headers);
  }
  set(header, valueOrRewrite, rewrite) {
    const self2 = this;
    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error("header name must be a non-empty string");
      }
      const key = utils_default.findKey(self2, lHeader);
      if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
        self2[key || _header] = normalizeValue(_value);
      }
    }
    const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
    if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders_default(header), valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  }
  get(header, parser) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      if (key) {
        const value = this[key];
        if (!parser) {
          return value;
        }
        if (parser === true) {
          return parseTokens(value);
        }
        if (utils_default.isFunction(parser)) {
          return parser.call(this, value, key);
        }
        if (utils_default.isRegExp(parser)) {
          return parser.exec(value);
        }
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      return !!(key && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  }
  delete(header, matcher) {
    const self2 = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = utils_default.findKey(self2, _header);
        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
          delete self2[key];
          deleted = true;
        }
      }
    }
    if (utils_default.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  }
  clear() {
    return Object.keys(this).forEach(this.delete.bind(this));
  }
  normalize(format) {
    const self2 = this;
    const headers = {};
    utils_default.forEach(this, (value, header) => {
      const key = utils_default.findKey(headers, header);
      if (key) {
        self2[key] = normalizeValue(value);
        delete self2[header];
        return;
      }
      const normalized = format ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self2[header];
      }
      self2[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  }
  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }
  toJSON(asStrings) {
    const obj = /* @__PURE__ */ Object.create(null);
    utils_default.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(", ") : value);
    });
    return obj;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }
  static concat(first, ...targets) {
    const computed = new this(first);
    targets.forEach((target) => computed.set(target));
    return computed;
  }
  static accessor(header) {
    const internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    const accessors = internals.accessors;
    const prototype3 = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype3, _header);
        accessors[lHeader] = true;
      }
    }
    utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
};
AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent"]);
utils_default.freezeMethods(AxiosHeaders.prototype);
utils_default.freezeMethods(AxiosHeaders);
var AxiosHeaders_default = AxiosHeaders;

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/core/transformData.js
function transformData(fns, response) {
  const config = this || defaults_default;
  const context = response || config;
  const headers = AxiosHeaders_default.from(context.headers);
  let data = context.data;
  utils_default.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/cancel/isCancel.js
init_shim();
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/cancel/CanceledError.js
init_shim();
function CanceledError(message, config, request) {
  AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config, request);
  this.name = "CanceledError";
}
utils_default.inherits(CanceledError, AxiosError_default, {
  __CANCEL__: true
});
var CanceledError_default = CanceledError;

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/adapters/adapters.js
init_shim();

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/helpers/null.js
init_shim();
var null_default = null;

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/adapters/xhr.js
init_shim();

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/core/settle.js
init_shim();
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError_default(
      "Request failed with status code " + response.status,
      [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/helpers/cookies.js
init_shim();
var cookies_default = browser_default.isStandardBrowserEnv ? function standardBrowserEnv() {
  return {
    write: function write(name, value, expires, path, domain, secure) {
      const cookie = [];
      cookie.push(name + "=" + encodeURIComponent(value));
      if (utils_default.isNumber(expires)) {
        cookie.push("expires=" + new Date(expires).toGMTString());
      }
      if (utils_default.isString(path)) {
        cookie.push("path=" + path);
      }
      if (utils_default.isString(domain)) {
        cookie.push("domain=" + domain);
      }
      if (secure === true) {
        cookie.push("secure");
      }
      document.cookie = cookie.join("; ");
    },
    read: function read(name) {
      const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove: function remove(name) {
      this.write(name, "", Date.now() - 864e5);
    }
  };
}() : function nonStandardBrowserEnv() {
  return {
    write: function write() {
    },
    read: function read() {
      return null;
    },
    remove: function remove() {
    }
  };
}();

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/core/buildFullPath.js
init_shim();

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/helpers/isAbsoluteURL.js
init_shim();
function isAbsoluteURL(url) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/helpers/combineURLs.js
init_shim();
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/core/buildFullPath.js
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/helpers/isURLSameOrigin.js
init_shim();
var isURLSameOrigin_default = browser_default.isStandardBrowserEnv ? function standardBrowserEnv2() {
  const msie = /(msie|trident)/i.test(navigator.userAgent);
  const urlParsingNode = document.createElement("a");
  let originURL;
  function resolveURL(url) {
    let href = url;
    if (msie) {
      urlParsingNode.setAttribute("href", href);
      href = urlParsingNode.href;
    }
    urlParsingNode.setAttribute("href", href);
    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
    };
  }
  originURL = resolveURL(window.location.href);
  return function isURLSameOrigin(requestURL) {
    const parsed = utils_default.isString(requestURL) ? resolveURL(requestURL) : requestURL;
    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
  };
}() : function nonStandardBrowserEnv2() {
  return function isURLSameOrigin() {
    return true;
  };
}();

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/helpers/parseProtocol.js
init_shim();
function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || "";
}

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/helpers/speedometer.js
init_shim();
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i = tail;
    let bytesCount = 0;
    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
var speedometer_default = speedometer;

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/adapters/xhr.js
function progressEventReducer(listener, isDownloadStream) {
  let bytesNotified = 0;
  const _speedometer = speedometer_default(50, 250);
  return (e) => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
      event: e
    };
    data[isDownloadStream ? "download" : "upload"] = true;
    listener(data);
  };
}
var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
var xhr_default = isXHRAdapterSupported && function(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    let requestData = config.data;
    const requestHeaders = AxiosHeaders_default.from(config.headers).normalize();
    const responseType = config.responseType;
    let onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }
      if (config.signal) {
        config.signal.removeEventListener("abort", onCanceled);
      }
    }
    if (utils_default.isFormData(requestData) && (browser_default.isStandardBrowserEnv || browser_default.isStandardBrowserWebWorkerEnv)) {
      requestHeaders.setContentType(false);
    }
    let request = new XMLHttpRequest();
    if (config.auth) {
      const username = config.auth.username || "";
      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
      requestHeaders.set("Authorization", "Basic " + btoa(username + ":" + password));
    }
    const fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
    request.timeout = config.timeout;
    function onloadend() {
      if (!request) {
        return;
      }
      const responseHeaders = AxiosHeaders_default.from(
        "getAllResponseHeaders" in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request = null;
    }
    if ("onloadend" in request) {
      request.onloadend = onloadend;
    } else {
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }
      reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config, request));
      request = null;
    };
    request.onerror = function handleError() {
      reject(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request));
      request = null;
    };
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
      const transitional2 = config.transitional || transitional_default;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(new AxiosError_default(
        timeoutErrorMessage,
        transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
        config,
        request
      ));
      request = null;
    };
    if (browser_default.isStandardBrowserEnv) {
      const xsrfValue = (config.withCredentials || isURLSameOrigin_default(fullPath)) && config.xsrfCookieName && cookies_default.read(config.xsrfCookieName);
      if (xsrfValue) {
        requestHeaders.set(config.xsrfHeaderName, xsrfValue);
      }
    }
    requestData === void 0 && requestHeaders.setContentType(null);
    if ("setRequestHeader" in request) {
      utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }
    if (!utils_default.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }
    if (responseType && responseType !== "json") {
      request.responseType = config.responseType;
    }
    if (typeof config.onDownloadProgress === "function") {
      request.addEventListener("progress", progressEventReducer(config.onDownloadProgress, true));
    }
    if (typeof config.onUploadProgress === "function" && request.upload) {
      request.upload.addEventListener("progress", progressEventReducer(config.onUploadProgress));
    }
    if (config.cancelToken || config.signal) {
      onCanceled = (cancel) => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
        request.abort();
        request = null;
      };
      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
      }
    }
    const protocol = parseProtocol(fullPath);
    if (protocol && browser_default.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config));
      return;
    }
    request.send(requestData || null);
  });
};

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/adapters/adapters.js
var knownAdapters = {
  http: null_default,
  xhr: xhr_default
};
utils_default.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, "name", { value });
    } catch (e) {
    }
    Object.defineProperty(fn, "adapterName", { value });
  }
});
var adapters_default = {
  getAdapter: (adapters) => {
    adapters = utils_default.isArray(adapters) ? adapters : [adapters];
    const { length } = adapters;
    let nameOrAdapter;
    let adapter;
    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      if (adapter = utils_default.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter) {
        break;
      }
    }
    if (!adapter) {
      if (adapter === false) {
        throw new AxiosError_default(
          `Adapter ${nameOrAdapter} is not supported by the environment`,
          "ERR_NOT_SUPPORT"
        );
      }
      throw new Error(
        utils_default.hasOwnProp(knownAdapters, nameOrAdapter) ? `Adapter '${nameOrAdapter}' is not available in the build` : `Unknown adapter '${nameOrAdapter}'`
      );
    }
    if (!utils_default.isFunction(adapter)) {
      throw new TypeError("adapter is not a function");
    }
    return adapter;
  },
  adapters: knownAdapters
};

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/core/dispatchRequest.js
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError_default(null, config);
  }
}
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders_default.from(config.headers);
  config.data = transformData.call(
    config,
    config.transformRequest
  );
  if (["post", "put", "patch"].indexOf(config.method) !== -1) {
    config.headers.setContentType("application/x-www-form-urlencoded", false);
  }
  const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );
    response.headers = AxiosHeaders_default.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/core/mergeConfig.js
init_shim();
var headersToObject = (thing) => thing instanceof AxiosHeaders_default ? thing.toJSON() : thing;
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source, caseless) {
    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
      return utils_default.merge.call({ caseless }, target, source);
    } else if (utils_default.isPlainObject(source)) {
      return utils_default.merge({}, source);
    } else if (utils_default.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a, b, caseless) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(a, b, caseless);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a, caseless);
    }
  }
  function valueFromConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    }
  }
  function defaultToConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a);
    }
  }
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(void 0, a);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
  };
  utils_default.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
}

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/helpers/validator.js
init_shim();

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/env/data.js
init_shim();
var VERSION = "1.2.2";

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/helpers/validator.js
var validators = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
  validators[type] = function validator(thing) {
    return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
  };
});
var deprecatedWarnings = {};
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
  }
  return (value, opt, opts) => {
    if (validator === false) {
      throw new AxiosError_default(
        formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
        AxiosError_default.ERR_DEPRECATED
      );
    }
    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          " has been deprecated since v" + version + " and will be removed in the near future"
        )
      );
    }
    return validator ? validator(value, opt, opts) : true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === void 0 || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
    }
  }
}
var validator_default = {
  assertOptions,
  validators
};

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/core/Axios.js
var validators2 = validator_default.validators;
var Axios = class {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager_default(),
      response: new InterceptorManager_default()
    };
  }
  request(configOrUrl, config) {
    if (typeof configOrUrl === "string") {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }
    config = mergeConfig(this.defaults, config);
    const { transitional: transitional2, paramsSerializer, headers } = config;
    if (transitional2 !== void 0) {
      validator_default.assertOptions(transitional2, {
        silentJSONParsing: validators2.transitional(validators2.boolean),
        forcedJSONParsing: validators2.transitional(validators2.boolean),
        clarifyTimeoutError: validators2.transitional(validators2.boolean)
      }, false);
    }
    if (paramsSerializer !== void 0) {
      validator_default.assertOptions(paramsSerializer, {
        encode: validators2.function,
        serialize: validators2.function
      }, true);
    }
    config.method = (config.method || this.defaults.method || "get").toLowerCase();
    let contextHeaders;
    contextHeaders = headers && utils_default.merge(
      headers.common,
      headers[config.method]
    );
    contextHeaders && utils_default.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (method) => {
        delete headers[method];
      }
    );
    config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    let promise;
    let i = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), void 0];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;
      promise = Promise.resolve(config);
      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }
      return promise;
    }
    len = requestInterceptorChain.length;
    let newConfig = config;
    i = 0;
    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i = 0;
    len = responseInterceptorChain.length;
    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }
    return promise;
  }
  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
};
utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData2(method) {
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});
utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData2(method) {
  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url,
        data
      }));
    };
  }
  Axios.prototype[method] = generateHTTPMethod();
  Axios.prototype[method + "Form"] = generateHTTPMethod(true);
});
var Axios_default = Axios;

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/cancel/CancelToken.js
init_shim();
var CancelToken = class {
  constructor(executor) {
    if (typeof executor !== "function") {
      throw new TypeError("executor must be a function.");
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    const token = this;
    this.promise.then((cancel) => {
      if (!token._listeners)
        return;
      let i = token._listeners.length;
      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });
    this.promise.then = (onfulfilled) => {
      let _resolve;
      const promise = new Promise((resolve) => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message, config, request) {
      if (token.reason) {
        return;
      }
      token.reason = new CanceledError_default(message, config, request);
      resolvePromise(token.reason);
    });
  }
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }
  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }
  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
};
var CancelToken_default = CancelToken;

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/helpers/spread.js
init_shim();
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/helpers/isAxiosError.js
init_shim();
function isAxiosError(payload) {
  return utils_default.isObject(payload) && payload.isAxiosError === true;
}

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/helpers/HttpStatusCode.js
init_shim();
var HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});
var HttpStatusCode_default = HttpStatusCode;

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/lib/axios.js
function createInstance(defaultConfig) {
  const context = new Axios_default(defaultConfig);
  const instance = bind(Axios_default.prototype.request, context);
  utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
  utils_default.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios2 = createInstance(defaults_default);
axios2.Axios = Axios_default;
axios2.CanceledError = CanceledError_default;
axios2.CancelToken = CancelToken_default;
axios2.isCancel = isCancel;
axios2.VERSION = VERSION;
axios2.toFormData = toFormData_default;
axios2.AxiosError = AxiosError_default;
axios2.Cancel = axios2.CanceledError;
axios2.all = function all(promises) {
  return Promise.all(promises);
};
axios2.spread = spread;
axios2.isAxiosError = isAxiosError;
axios2.mergeConfig = mergeConfig;
axios2.AxiosHeaders = AxiosHeaders_default;
axios2.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
axios2.HttpStatusCode = HttpStatusCode_default;
axios2.default = axios2;
var axios_default = axios2;

// node_modules/.pnpm/axios@1.2.2/node_modules/axios/index.js
var {
  Axios: Axios2,
  AxiosError: AxiosError2,
  CanceledError: CanceledError2,
  isCancel: isCancel2,
  CancelToken: CancelToken2,
  VERSION: VERSION2,
  all: all2,
  Cancel,
  isAxiosError: isAxiosError2,
  spread: spread2,
  toFormData: toFormData2,
  AxiosHeaders: AxiosHeaders2,
  HttpStatusCode: HttpStatusCode2,
  formToJSON,
  mergeConfig: mergeConfig2
} = axios_default;

// node_modules/.pnpm/stag-relayx@0.2.8/node_modules/stag-relayx/dist/esm/boost.js
var import_nimble = __toESM(require_nimble_browser_min());
var __awaiter3 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
function boost_default(relayone) {
  function buy(buyBoost, options = { outputs: [] }) {
    var _a;
    return __awaiter3(this, void 0, void 0, function* () {
      const { content, difficulty, value, tag } = buyBoost;
      var url = `https://pow.co/api/v1/boostpow/${content}/new?difficulty=${difficulty}`;
      if (tag) {
        url = `${url}&tag=${tag}`;
      }
      const { data } = yield axios_default.get(url);
      const paymentRequest = data;
      const script = import_nimble.Script.fromHex(paymentRequest.outputs[0].script);
      const send = {
        opReturn: [
          "onchain",
          "18pPQigu7j69ioDcUG9dACE1iAN9nCfowr",
          "job",
          JSON.stringify({
            index: 0
          })
        ],
        amount: value / 1e8,
        to: script.toASM(),
        currency: "BSV"
      };
      console.log("stag.relayx.send", send);
      (_a = options.outputs) === null || _a === void 0 ? void 0 : _a.push(send);
      const sendResult = yield relayone.send({
        outputs: options.outputs
      });
      const { data: { job } } = yield axios_default.get(`https://pow.co/api/v1/boost/jobs/${sendResult.txid}`);
      const result = {
        txid: sendResult.txid,
        txhex: sendResult.rawTx,
        job
      };
      console.log("stag.relayx.send.result", result);
      return result;
    });
  }
  function fetch({ txid }) {
    return __awaiter3(this, void 0, void 0, function* () {
      const { data: { job } } = yield axios_default.get(`https://pow.co/api/v1/boost/jobs/${txid}`);
      return job;
    });
  }
  return {
    buy,
    fetch
  };
}

// node_modules/.pnpm/stag-relayx@0.2.8/node_modules/stag-relayx/dist/esm/anypay.js
var anypay_exports = {};
__export(anypay_exports, {
  anypay: () => anypay,
  bip270: () => bip270,
  default: () => anypay_default,
  json: () => json
});
init_shim();
var __awaiter4 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
function anypay_default(relayone) {
}
function bip270() {
  return __awaiter4(this, void 0, void 0, function* () {
  });
}
function json() {
  return __awaiter4(this, void 0, void 0, function* () {
  });
}
function anypay() {
  return __awaiter4(this, void 0, void 0, function* () {
  });
}

// node_modules/.pnpm/stag-relayx@0.2.8/node_modules/stag-relayx/dist/esm/index.js
var nimble = __toESM(require_nimble_browser_min());
var StagWalletRelayx = class {
  constructor(relayone) {
    this.relayone = relayone;
  }
  get boost() {
    return boost_default(this.relayone);
  }
  get onchain() {
    return onchain_exports;
  }
  get pay() {
    return anypay_exports;
  }
  get nimble() {
    return nimble;
  }
};
function wrapRelayx(relayone) {
  return new StagWalletRelayx(relayone);
}
var esm_default = wrapRelayx;

// dep:stag-relayx
var stag_relayx_default = esm_default;
export {
  StagWalletRelayx,
  stag_relayx_default as default,
  wrapRelayx
};
/*! For license information please see bsv.module.js.LICENSE.txt */
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
//# sourceMappingURL=stag-relayx.js.map
